// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.InformaticaDataManagement.Models
{
    /// <summary> The InformaticaOrganizationProperties. </summary>
    public partial class InformaticaOrganizationProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InformaticaOrganizationProperties"/>. </summary>
        public InformaticaOrganizationProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="InformaticaOrganizationProperties"/>. </summary>
        /// <param name="provisioningState"></param>
        /// <param name="informaticaProperties"></param>
        /// <param name="marketplaceDetails"></param>
        /// <param name="userDetails"></param>
        /// <param name="companyDetails"></param>
        /// <param name="linkOrganization"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InformaticaOrganizationProperties(InformaticaProvisioningState? provisioningState, InformaticaProperties informaticaProperties, InformaticaMarketplaceDetails marketplaceDetails, InformaticaUserDetails userDetails, InformaticaCompanyDetails companyDetails, LinkOrganization linkOrganization, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            InformaticaProperties = informaticaProperties;
            MarketplaceDetails = marketplaceDetails;
            UserDetails = userDetails;
            CompanyDetails = companyDetails;
            LinkOrganization = linkOrganization;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the provisioning state. </summary>
        public InformaticaProvisioningState? ProvisioningState { get; }
        /// <summary> Gets or sets the informatica properties. </summary>
        public InformaticaProperties InformaticaProperties { get; set; }
        /// <summary> Gets or sets the marketplace details. </summary>
        public InformaticaMarketplaceDetails MarketplaceDetails { get; set; }
        /// <summary> Gets or sets the user details. </summary>
        public InformaticaUserDetails UserDetails { get; set; }
        /// <summary> Gets or sets the company details. </summary>
        public InformaticaCompanyDetails CompanyDetails { get; set; }
        /// <summary> Gets or sets the link organization. </summary>
        internal LinkOrganization LinkOrganization { get; set; }
        /// <summary> Gets or sets the link organization token. </summary>
        public string LinkOrganizationToken
        {
            get => LinkOrganization is null ? default : LinkOrganization.Token;
            set
            {
                if (LinkOrganization is null)
                    LinkOrganization = new LinkOrganization();
                LinkOrganization.Token = value;
            }
        }
    }
}
