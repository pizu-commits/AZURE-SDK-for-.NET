// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace Azure.Messaging.EventGrid.Namespaces
{
    /// <summary> Model factory for models. </summary>
    public static partial class EventGridNamespacesModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Namespaces.ReceiveResult"/>. </summary>
        /// <param name="details"></param>
        /// <returns> A new <see cref="Namespaces.ReceiveResult"/> instance for mocking. </returns>
        public static ReceiveResult ReceiveResult(IEnumerable<ReceiveDetails> details = null)
        {
            details ??= new List<ReceiveDetails>();

            return new ReceiveResult(details?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Namespaces.ReceiveDetails"/>. </summary>
        /// <param name="brokerProperties"></param>
        /// <param name="event"></param>
        /// <returns> A new <see cref="Namespaces.ReceiveDetails"/> instance for mocking. </returns>
        public static ReceiveDetails ReceiveDetails(BrokerProperties brokerProperties = null, CloudEvent @event = null)
        {
            return new ReceiveDetails(brokerProperties, @event, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Namespaces.BrokerProperties"/>. </summary>
        /// <param name="lockToken"></param>
        /// <param name="deliveryCount"></param>
        /// <returns> A new <see cref="Namespaces.BrokerProperties"/> instance for mocking. </returns>
        public static BrokerProperties BrokerProperties(string lockToken = null, int deliveryCount = default)
        {
            return new BrokerProperties(lockToken, deliveryCount, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Namespaces.AcknowledgeResult"/>. </summary>
        /// <param name="failedLockTokens"></param>
        /// <param name="succeededLockTokens"></param>
        /// <returns> A new <see cref="Namespaces.AcknowledgeResult"/> instance for mocking. </returns>
        public static AcknowledgeResult AcknowledgeResult(IEnumerable<FailedLockToken> failedLockTokens = null, IEnumerable<string> succeededLockTokens = null)
        {
            failedLockTokens ??= new List<FailedLockToken>();
            succeededLockTokens ??= new List<string>();

            return new AcknowledgeResult(failedLockTokens?.ToList(), succeededLockTokens?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Namespaces.FailedLockToken"/>. </summary>
        /// <param name="lockToken"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Namespaces.FailedLockToken"/> instance for mocking. </returns>
        public static FailedLockToken FailedLockToken(string lockToken = null, ResponseError error = null)
        {
            return new FailedLockToken(lockToken, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Namespaces.ReleaseResult"/>. </summary>
        /// <param name="failedLockTokens"></param>
        /// <param name="succeededLockTokens"></param>
        /// <returns> A new <see cref="Namespaces.ReleaseResult"/> instance for mocking. </returns>
        public static ReleaseResult ReleaseResult(IEnumerable<FailedLockToken> failedLockTokens = null, IEnumerable<string> succeededLockTokens = null)
        {
            failedLockTokens ??= new List<FailedLockToken>();
            succeededLockTokens ??= new List<string>();

            return new ReleaseResult(failedLockTokens?.ToList(), succeededLockTokens?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Namespaces.RejectResult"/>. </summary>
        /// <param name="failedLockTokens"></param>
        /// <param name="succeededLockTokens"></param>
        /// <returns> A new <see cref="Namespaces.RejectResult"/> instance for mocking. </returns>
        public static RejectResult RejectResult(IEnumerable<FailedLockToken> failedLockTokens = null, IEnumerable<string> succeededLockTokens = null)
        {
            failedLockTokens ??= new List<FailedLockToken>();
            succeededLockTokens ??= new List<string>();

            return new RejectResult(failedLockTokens?.ToList(), succeededLockTokens?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Namespaces.RenewLocksResult"/>. </summary>
        /// <param name="failedLockTokens"></param>
        /// <param name="succeededLockTokens"></param>
        /// <returns> A new <see cref="Namespaces.RenewLocksResult"/> instance for mocking. </returns>
        public static RenewLocksResult RenewLocksResult(IEnumerable<FailedLockToken> failedLockTokens = null, IEnumerable<string> succeededLockTokens = null)
        {
            failedLockTokens ??= new List<FailedLockToken>();
            succeededLockTokens ??= new List<string>();

            return new RenewLocksResult(failedLockTokens?.ToList(), succeededLockTokens?.ToList(), serializedAdditionalRawData: null);
        }
    }
}
