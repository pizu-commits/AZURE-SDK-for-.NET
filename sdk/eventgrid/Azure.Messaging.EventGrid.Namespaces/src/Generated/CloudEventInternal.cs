// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Messaging.EventGrid.Namespaces
{
    /// <summary> The CloudEvent. </summary>
    internal partial class CloudEventInternal
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CloudEventInternal"/>. </summary>
        /// <param name="id"></param>
        /// <param name="source"></param>
        /// <param name="type"></param>
        /// <param name="specversion"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="source"/>, <paramref name="type"/> or <paramref name="specversion"/> is null. </exception>
        public CloudEventInternal(string id, string source, string type, string specversion)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(source, nameof(source));
            Argument.AssertNotNull(type, nameof(type));
            Argument.AssertNotNull(specversion, nameof(specversion));

            Id = id;
            Source = source;
            Type = type;
            Specversion = specversion;
        }

        /// <summary> Initializes a new instance of <see cref="CloudEventInternal"/>. </summary>
        /// <param name="id"></param>
        /// <param name="source"></param>
        /// <param name="data"></param>
        /// <param name="dataBase64"></param>
        /// <param name="type"></param>
        /// <param name="time"></param>
        /// <param name="specversion"></param>
        /// <param name="dataschema"></param>
        /// <param name="datacontenttype"></param>
        /// <param name="subject"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CloudEventInternal(string id, string source, BinaryData data, BinaryData dataBase64, string type, DateTimeOffset? time, string specversion, string dataschema, string datacontenttype, string subject, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Source = source;
            Data = data;
            DataBase64 = dataBase64;
            Type = type;
            Time = time;
            Specversion = specversion;
            Dataschema = dataschema;
            Datacontenttype = datacontenttype;
            Subject = subject;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CloudEventInternal"/> for deserialization. </summary>
        internal CloudEventInternal()
        {
        }

        /// <summary> Gets or sets the id. </summary>
        public string Id { get; set; }
        /// <summary> Gets or sets the source. </summary>
        public string Source { get; set; }
        /// <summary>
        /// Gets or sets the data
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Data { get; set; }
        /// <summary>
        /// Gets or sets the data base 64
        /// <para>
        /// To assign a byte[] to this property use <see cref="BinaryData.FromBytes(byte[])"/>.
        /// The byte[] will be serialized to a Base64 encoded string.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromBytes(new byte[] { 1, 2, 3 })</term>
        /// <description>Creates a payload of "AQID".</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData DataBase64 { get; set; }
        /// <summary> Gets or sets the type. </summary>
        public string Type { get; set; }
        /// <summary> Gets or sets the time. </summary>
        public DateTimeOffset? Time { get; set; }
        /// <summary> Gets or sets the specversion. </summary>
        public string Specversion { get; set; }
        /// <summary> Gets or sets the dataschema. </summary>
        public string Dataschema { get; set; }
        /// <summary> Gets or sets the datacontenttype. </summary>
        public string Datacontenttype { get; set; }
        /// <summary> Gets or sets the subject. </summary>
        public string Subject { get; set; }
    }
}
