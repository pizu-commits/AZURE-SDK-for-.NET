// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> The AcsRouterJobQueuedEventData. </summary>
    public partial class AcsRouterJobQueuedEventData : AcsRouterJobEventData
    {
        /// <summary> Initializes a new instance of <see cref="AcsRouterJobQueuedEventData"/>. </summary>
        /// <param name="labels"></param>
        /// <param name="tags"></param>
        /// <param name="attachedWorkerSelectors"></param>
        /// <param name="requestedWorkerSelectors"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="labels"/>, <paramref name="tags"/>, <paramref name="attachedWorkerSelectors"/> or <paramref name="requestedWorkerSelectors"/> is null. </exception>
        internal AcsRouterJobQueuedEventData(IReadOnlyDictionary<string, string> labels, IReadOnlyDictionary<string, string> tags, IEnumerable<AcsRouterWorkerSelector> attachedWorkerSelectors, IEnumerable<AcsRouterWorkerSelector> requestedWorkerSelectors) : base(labels, tags)
        {
            Argument.AssertNotNull(labels, nameof(labels));
            Argument.AssertNotNull(tags, nameof(tags));
            Argument.AssertNotNull(attachedWorkerSelectors, nameof(attachedWorkerSelectors));
            Argument.AssertNotNull(requestedWorkerSelectors, nameof(requestedWorkerSelectors));

            AttachedWorkerSelectors = attachedWorkerSelectors.ToList();
            RequestedWorkerSelectors = requestedWorkerSelectors.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="AcsRouterJobQueuedEventData"/>. </summary>
        /// <param name="jobId"></param>
        /// <param name="channelReference"></param>
        /// <param name="channelId"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="queueId"></param>
        /// <param name="labels"></param>
        /// <param name="tags"></param>
        /// <param name="priority"></param>
        /// <param name="attachedWorkerSelectors"></param>
        /// <param name="requestedWorkerSelectors"></param>
        internal AcsRouterJobQueuedEventData(string jobId, string channelReference, string channelId, IDictionary<string, BinaryData> serializedAdditionalRawData, string queueId, IReadOnlyDictionary<string, string> labels, IReadOnlyDictionary<string, string> tags, int? priority, IReadOnlyList<AcsRouterWorkerSelector> attachedWorkerSelectors, IReadOnlyList<AcsRouterWorkerSelector> requestedWorkerSelectors) : base(jobId, channelReference, channelId, serializedAdditionalRawData, queueId, labels, tags)
        {
            Priority = priority;
            AttachedWorkerSelectors = attachedWorkerSelectors;
            RequestedWorkerSelectors = requestedWorkerSelectors;
        }

        /// <summary> Initializes a new instance of <see cref="AcsRouterJobQueuedEventData"/> for deserialization. </summary>
        internal AcsRouterJobQueuedEventData()
        {
        }

        /// <summary> Gets the priority. </summary>
        public int? Priority { get; }
        /// <summary> Gets the attached worker selectors. </summary>
        public IReadOnlyList<AcsRouterWorkerSelector> AttachedWorkerSelectors { get; }
        /// <summary> Gets the requested worker selectors. </summary>
        public IReadOnlyList<AcsRouterWorkerSelector> RequestedWorkerSelectors { get; }
    }
}
