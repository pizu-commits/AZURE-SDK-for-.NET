// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> The MediaLiveEventIngestHeartbeatEventData. </summary>
    public partial class MediaLiveEventIngestHeartbeatEventData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MediaLiveEventIngestHeartbeatEventData"/>. </summary>
        internal MediaLiveEventIngestHeartbeatEventData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MediaLiveEventIngestHeartbeatEventData"/>. </summary>
        /// <param name="trackType"></param>
        /// <param name="trackName"></param>
        /// <param name="transcriptionLanguage"></param>
        /// <param name="transcriptionState"></param>
        /// <param name="bitrate"></param>
        /// <param name="incomingBitrate"></param>
        /// <param name="ingestDriftValue"></param>
        /// <param name="lastFragmentArrivalTime"></param>
        /// <param name="lastTimestamp"></param>
        /// <param name="timescale"></param>
        /// <param name="overlapCount"></param>
        /// <param name="discontinuityCount"></param>
        /// <param name="nonincreasingCount"></param>
        /// <param name="unexpectedBitrate"></param>
        /// <param name="state"></param>
        /// <param name="healthy"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MediaLiveEventIngestHeartbeatEventData(string trackType, string trackName, string transcriptionLanguage, string transcriptionState, long? bitrate, long? incomingBitrate, string ingestDriftValue, string lastFragmentArrivalTime, string lastTimestamp, string timescale, long? overlapCount, long? discontinuityCount, long? nonincreasingCount, bool? unexpectedBitrate, string state, bool? healthy, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TrackType = trackType;
            TrackName = trackName;
            TranscriptionLanguage = transcriptionLanguage;
            TranscriptionState = transcriptionState;
            Bitrate = bitrate;
            IncomingBitrate = incomingBitrate;
            IngestDriftValue = ingestDriftValue;
            LastFragmentArrivalTime = lastFragmentArrivalTime;
            LastTimestamp = lastTimestamp;
            Timescale = timescale;
            OverlapCount = overlapCount;
            DiscontinuityCount = discontinuityCount;
            NonincreasingCount = nonincreasingCount;
            UnexpectedBitrate = unexpectedBitrate;
            State = state;
            Healthy = healthy;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the track type. </summary>
        public string TrackType { get; }
        /// <summary> Gets the track name. </summary>
        public string TrackName { get; }
        /// <summary> Gets the transcription language. </summary>
        public string TranscriptionLanguage { get; }
        /// <summary> Gets the transcription state. </summary>
        public string TranscriptionState { get; }
        /// <summary> Gets the bitrate. </summary>
        public long? Bitrate { get; }
        /// <summary> Gets the incoming bitrate. </summary>
        public long? IncomingBitrate { get; }
        /// <summary> Gets the ingest drift value. </summary>
        public string IngestDriftValue { get; }
        /// <summary> Gets the last fragment arrival time. </summary>
        public string LastFragmentArrivalTime { get; }
        /// <summary> Gets the last timestamp. </summary>
        public string LastTimestamp { get; }
        /// <summary> Gets the timescale. </summary>
        public string Timescale { get; }
        /// <summary> Gets the overlap count. </summary>
        public long? OverlapCount { get; }
        /// <summary> Gets the discontinuity count. </summary>
        public long? DiscontinuityCount { get; }
        /// <summary> Gets the nonincreasing count. </summary>
        public long? NonincreasingCount { get; }
        /// <summary> Gets the unexpected bitrate. </summary>
        public bool? UnexpectedBitrate { get; }
        /// <summary> Gets the state. </summary>
        public string State { get; }
        /// <summary> Gets the healthy. </summary>
        public bool? Healthy { get; }
    }
}
