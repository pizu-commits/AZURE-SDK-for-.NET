// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> The AcsRouterWorkerOfferAcceptedEventData. </summary>
    public partial class AcsRouterWorkerOfferAcceptedEventData : AcsRouterWorkerEventData
    {
        /// <summary> Initializes a new instance of <see cref="AcsRouterWorkerOfferAcceptedEventData"/>. </summary>
        /// <param name="workerLabels"></param>
        /// <param name="workerTags"></param>
        /// <param name="jobLabels"></param>
        /// <param name="jobTags"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="workerLabels"/>, <paramref name="workerTags"/>, <paramref name="jobLabels"/> or <paramref name="jobTags"/> is null. </exception>
        internal AcsRouterWorkerOfferAcceptedEventData(IReadOnlyDictionary<string, string> workerLabels, IReadOnlyDictionary<string, string> workerTags, IReadOnlyDictionary<string, string> jobLabels, IReadOnlyDictionary<string, string> jobTags)
        {
            Argument.AssertNotNull(workerLabels, nameof(workerLabels));
            Argument.AssertNotNull(workerTags, nameof(workerTags));
            Argument.AssertNotNull(jobLabels, nameof(jobLabels));
            Argument.AssertNotNull(jobTags, nameof(jobTags));

            WorkerLabels = workerLabels;
            WorkerTags = workerTags;
            JobLabels = jobLabels;
            JobTags = jobTags;
        }

        /// <summary> Initializes a new instance of <see cref="AcsRouterWorkerOfferAcceptedEventData"/>. </summary>
        /// <param name="jobId"></param>
        /// <param name="channelReference"></param>
        /// <param name="channelId"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="workerId"></param>
        /// <param name="queueId"></param>
        /// <param name="offerId"></param>
        /// <param name="assignmentId"></param>
        /// <param name="jobPriority"></param>
        /// <param name="workerLabels"></param>
        /// <param name="workerTags"></param>
        /// <param name="jobLabels"></param>
        /// <param name="jobTags"></param>
        internal AcsRouterWorkerOfferAcceptedEventData(string jobId, string channelReference, string channelId, IDictionary<string, BinaryData> serializedAdditionalRawData, string workerId, string queueId, string offerId, string assignmentId, int? jobPriority, IReadOnlyDictionary<string, string> workerLabels, IReadOnlyDictionary<string, string> workerTags, IReadOnlyDictionary<string, string> jobLabels, IReadOnlyDictionary<string, string> jobTags) : base(jobId, channelReference, channelId, serializedAdditionalRawData, workerId)
        {
            QueueId = queueId;
            OfferId = offerId;
            AssignmentId = assignmentId;
            JobPriority = jobPriority;
            WorkerLabels = workerLabels;
            WorkerTags = workerTags;
            JobLabels = jobLabels;
            JobTags = jobTags;
        }

        /// <summary> Initializes a new instance of <see cref="AcsRouterWorkerOfferAcceptedEventData"/> for deserialization. </summary>
        internal AcsRouterWorkerOfferAcceptedEventData()
        {
        }

        /// <summary> Gets the queue id. </summary>
        public string QueueId { get; }
        /// <summary> Gets the offer id. </summary>
        public string OfferId { get; }
        /// <summary> Gets the assignment id. </summary>
        public string AssignmentId { get; }
        /// <summary> Gets the job priority. </summary>
        public int? JobPriority { get; }
        /// <summary> Gets the worker labels. </summary>
        public IReadOnlyDictionary<string, string> WorkerLabels { get; }
        /// <summary> Gets the worker tags. </summary>
        public IReadOnlyDictionary<string, string> WorkerTags { get; }
        /// <summary> Gets the job labels. </summary>
        public IReadOnlyDictionary<string, string> JobLabels { get; }
        /// <summary> Gets the job tags. </summary>
        public IReadOnlyDictionary<string, string> JobTags { get; }
    }
}
