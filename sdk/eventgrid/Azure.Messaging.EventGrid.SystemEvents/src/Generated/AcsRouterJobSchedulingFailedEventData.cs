// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> The AcsRouterJobSchedulingFailedEventData. </summary>
    public partial class AcsRouterJobSchedulingFailedEventData : AcsRouterJobEventData
    {
        /// <summary> Initializes a new instance of <see cref="AcsRouterJobSchedulingFailedEventData"/>. </summary>
        /// <param name="labels"></param>
        /// <param name="tags"></param>
        /// <param name="expiredAttachedWorkerSelectors"></param>
        /// <param name="expiredRequestedWorkerSelectors"></param>
        /// <param name="scheduledOn"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="labels"/>, <paramref name="tags"/>, <paramref name="expiredAttachedWorkerSelectors"/> or <paramref name="expiredRequestedWorkerSelectors"/> is null. </exception>
        internal AcsRouterJobSchedulingFailedEventData(IReadOnlyDictionary<string, string> labels, IReadOnlyDictionary<string, string> tags, IEnumerable<AcsRouterWorkerSelector> expiredAttachedWorkerSelectors, IEnumerable<AcsRouterWorkerSelector> expiredRequestedWorkerSelectors, DateTimeOffset scheduledOn) : base(labels, tags)
        {
            Argument.AssertNotNull(labels, nameof(labels));
            Argument.AssertNotNull(tags, nameof(tags));
            Argument.AssertNotNull(expiredAttachedWorkerSelectors, nameof(expiredAttachedWorkerSelectors));
            Argument.AssertNotNull(expiredRequestedWorkerSelectors, nameof(expiredRequestedWorkerSelectors));

            ExpiredAttachedWorkerSelectors = expiredAttachedWorkerSelectors.ToList();
            ExpiredRequestedWorkerSelectors = expiredRequestedWorkerSelectors.ToList();
            ScheduledOn = scheduledOn;
        }

        /// <summary> Initializes a new instance of <see cref="AcsRouterJobSchedulingFailedEventData"/>. </summary>
        /// <param name="jobId"></param>
        /// <param name="channelReference"></param>
        /// <param name="channelId"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="queueId"></param>
        /// <param name="labels"></param>
        /// <param name="tags"></param>
        /// <param name="priority"></param>
        /// <param name="expiredAttachedWorkerSelectors"></param>
        /// <param name="expiredRequestedWorkerSelectors"></param>
        /// <param name="scheduledOn"></param>
        /// <param name="failureReason"></param>
        internal AcsRouterJobSchedulingFailedEventData(string jobId, string channelReference, string channelId, IDictionary<string, BinaryData> serializedAdditionalRawData, string queueId, IReadOnlyDictionary<string, string> labels, IReadOnlyDictionary<string, string> tags, int? priority, IReadOnlyList<AcsRouterWorkerSelector> expiredAttachedWorkerSelectors, IReadOnlyList<AcsRouterWorkerSelector> expiredRequestedWorkerSelectors, DateTimeOffset scheduledOn, string failureReason) : base(jobId, channelReference, channelId, serializedAdditionalRawData, queueId, labels, tags)
        {
            Priority = priority;
            ExpiredAttachedWorkerSelectors = expiredAttachedWorkerSelectors;
            ExpiredRequestedWorkerSelectors = expiredRequestedWorkerSelectors;
            ScheduledOn = scheduledOn;
            FailureReason = failureReason;
        }

        /// <summary> Initializes a new instance of <see cref="AcsRouterJobSchedulingFailedEventData"/> for deserialization. </summary>
        internal AcsRouterJobSchedulingFailedEventData()
        {
        }

        /// <summary> Gets the priority. </summary>
        public int? Priority { get; }
        /// <summary> Gets the expired attached worker selectors. </summary>
        public IReadOnlyList<AcsRouterWorkerSelector> ExpiredAttachedWorkerSelectors { get; }
        /// <summary> Gets the expired requested worker selectors. </summary>
        public IReadOnlyList<AcsRouterWorkerSelector> ExpiredRequestedWorkerSelectors { get; }
        /// <summary> Gets the scheduled on. </summary>
        public DateTimeOffset ScheduledOn { get; }
        /// <summary> Gets the failure reason. </summary>
        public string FailureReason { get; }
    }
}
