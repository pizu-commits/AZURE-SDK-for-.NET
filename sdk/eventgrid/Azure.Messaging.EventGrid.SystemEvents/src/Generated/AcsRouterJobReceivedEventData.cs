// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> The AcsRouterJobReceivedEventData. </summary>
    public partial class AcsRouterJobReceivedEventData : AcsRouterJobEventData
    {
        /// <summary> Initializes a new instance of <see cref="AcsRouterJobReceivedEventData"/>. </summary>
        /// <param name="labels"></param>
        /// <param name="tags"></param>
        /// <param name="jobStatus"></param>
        /// <param name="requestedWorkerSelectors"></param>
        /// <param name="scheduledOn"></param>
        /// <param name="unavailableForMatching"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="labels"/>, <paramref name="tags"/> or <paramref name="requestedWorkerSelectors"/> is null. </exception>
        internal AcsRouterJobReceivedEventData(IReadOnlyDictionary<string, string> labels, IReadOnlyDictionary<string, string> tags, AcsRouterJobStatus jobStatus, IEnumerable<AcsRouterWorkerSelector> requestedWorkerSelectors, DateTimeOffset scheduledOn, bool unavailableForMatching) : base(labels, tags)
        {
            Argument.AssertNotNull(labels, nameof(labels));
            Argument.AssertNotNull(tags, nameof(tags));
            Argument.AssertNotNull(requestedWorkerSelectors, nameof(requestedWorkerSelectors));

            JobStatus = jobStatus;
            RequestedWorkerSelectors = requestedWorkerSelectors.ToList();
            ScheduledOn = scheduledOn;
            UnavailableForMatching = unavailableForMatching;
        }

        /// <summary> Initializes a new instance of <see cref="AcsRouterJobReceivedEventData"/>. </summary>
        /// <param name="jobId"></param>
        /// <param name="channelReference"></param>
        /// <param name="channelId"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="queueId"></param>
        /// <param name="labels"></param>
        /// <param name="tags"></param>
        /// <param name="jobStatus"></param>
        /// <param name="classificationPolicyId"></param>
        /// <param name="priority"></param>
        /// <param name="requestedWorkerSelectors"></param>
        /// <param name="scheduledOn"></param>
        /// <param name="unavailableForMatching"></param>
        internal AcsRouterJobReceivedEventData(string jobId, string channelReference, string channelId, IDictionary<string, BinaryData> serializedAdditionalRawData, string queueId, IReadOnlyDictionary<string, string> labels, IReadOnlyDictionary<string, string> tags, AcsRouterJobStatus jobStatus, string classificationPolicyId, int? priority, IReadOnlyList<AcsRouterWorkerSelector> requestedWorkerSelectors, DateTimeOffset scheduledOn, bool unavailableForMatching) : base(jobId, channelReference, channelId, serializedAdditionalRawData, queueId, labels, tags)
        {
            JobStatus = jobStatus;
            ClassificationPolicyId = classificationPolicyId;
            Priority = priority;
            RequestedWorkerSelectors = requestedWorkerSelectors;
            ScheduledOn = scheduledOn;
            UnavailableForMatching = unavailableForMatching;
        }

        /// <summary> Initializes a new instance of <see cref="AcsRouterJobReceivedEventData"/> for deserialization. </summary>
        internal AcsRouterJobReceivedEventData()
        {
        }

        /// <summary> Gets the job status. </summary>
        public AcsRouterJobStatus JobStatus { get; }
        /// <summary> Gets the classification policy id. </summary>
        public string ClassificationPolicyId { get; }
        /// <summary> Gets the priority. </summary>
        public int? Priority { get; }
        /// <summary> Gets the requested worker selectors. </summary>
        public IReadOnlyList<AcsRouterWorkerSelector> RequestedWorkerSelectors { get; }
        /// <summary> Gets the scheduled on. </summary>
        public DateTimeOffset ScheduledOn { get; }
        /// <summary> Gets the unavailable for matching. </summary>
        public bool UnavailableForMatching { get; }
    }
}
