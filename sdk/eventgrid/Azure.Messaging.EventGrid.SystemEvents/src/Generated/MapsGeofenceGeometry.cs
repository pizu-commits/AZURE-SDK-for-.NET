// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> The MapsGeofenceGeometry. </summary>
    public partial class MapsGeofenceGeometry
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MapsGeofenceGeometry"/>. </summary>
        internal MapsGeofenceGeometry()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MapsGeofenceGeometry"/>. </summary>
        /// <param name="deviceId"></param>
        /// <param name="distance"></param>
        /// <param name="geometryId"></param>
        /// <param name="nearestLat"></param>
        /// <param name="nearestLon"></param>
        /// <param name="udId"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MapsGeofenceGeometry(string deviceId, float? distance, string geometryId, float? nearestLat, float? nearestLon, string udId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DeviceId = deviceId;
            Distance = distance;
            GeometryId = geometryId;
            NearestLat = nearestLat;
            NearestLon = nearestLon;
            UdId = udId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the device id. </summary>
        public string DeviceId { get; }
        /// <summary> Gets the distance. </summary>
        public float? Distance { get; }
        /// <summary> Gets the geometry id. </summary>
        public string GeometryId { get; }
        /// <summary> Gets the nearest lat. </summary>
        public float? NearestLat { get; }
        /// <summary> Gets the nearest lon. </summary>
        public float? NearestLon { get; }
        /// <summary> Gets the ud id. </summary>
        public string UdId { get; }
    }
}
