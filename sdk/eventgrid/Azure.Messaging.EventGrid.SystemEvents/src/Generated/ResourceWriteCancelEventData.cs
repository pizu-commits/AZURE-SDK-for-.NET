// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> The ResourceWriteCancelEventData. </summary>
    public partial class ResourceWriteCancelEventData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ResourceWriteCancelEventData"/>. </summary>
        /// <param name="authorization"></param>
        /// <param name="claims"></param>
        /// <param name="httpRequest"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="authorization"/>, <paramref name="claims"/> or <paramref name="httpRequest"/> is null. </exception>
        internal ResourceWriteCancelEventData(ResourceAuthorization authorization, IReadOnlyDictionary<string, string> claims, ResourceHttpRequest httpRequest)
        {
            Argument.AssertNotNull(authorization, nameof(authorization));
            Argument.AssertNotNull(claims, nameof(claims));
            Argument.AssertNotNull(httpRequest, nameof(httpRequest));

            Authorization = authorization;
            Claims = claims;
            HttpRequest = httpRequest;
        }

        /// <summary> Initializes a new instance of <see cref="ResourceWriteCancelEventData"/>. </summary>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="resourceGroup"></param>
        /// <param name="resourceProvider"></param>
        /// <param name="resourceUri"></param>
        /// <param name="operationName"></param>
        /// <param name="status"></param>
        /// <param name="authorization"></param>
        /// <param name="claims"></param>
        /// <param name="correlationId"></param>
        /// <param name="httpRequest"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ResourceWriteCancelEventData(string tenantId, string subscriptionId, string resourceGroup, string resourceProvider, string resourceUri, string operationName, string status, ResourceAuthorization authorization, IReadOnlyDictionary<string, string> claims, string correlationId, ResourceHttpRequest httpRequest, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TenantId = tenantId;
            SubscriptionId = subscriptionId;
            ResourceGroup = resourceGroup;
            ResourceProvider = resourceProvider;
            ResourceUri = resourceUri;
            OperationName = operationName;
            Status = status;
            Authorization = authorization;
            Claims = claims;
            CorrelationId = correlationId;
            HttpRequest = httpRequest;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ResourceWriteCancelEventData"/> for deserialization. </summary>
        internal ResourceWriteCancelEventData()
        {
        }

        /// <summary> Gets the tenant id. </summary>
        public string TenantId { get; }
        /// <summary> Gets the subscription id. </summary>
        public string SubscriptionId { get; }
        /// <summary> Gets the resource group. </summary>
        public string ResourceGroup { get; }
        /// <summary> Gets the resource provider. </summary>
        public string ResourceProvider { get; }
        /// <summary> Gets the resource uri. </summary>
        public string ResourceUri { get; }
        /// <summary> Gets the operation name. </summary>
        public string OperationName { get; }
        /// <summary> Gets the status. </summary>
        public string Status { get; }
        /// <summary> Gets the authorization. </summary>
        public ResourceAuthorization Authorization { get; }
        /// <summary> Gets the claims. </summary>
        public IReadOnlyDictionary<string, string> Claims { get; }
        /// <summary> Gets the correlation id. </summary>
        public string CorrelationId { get; }
        /// <summary> Gets the http request. </summary>
        public ResourceHttpRequest HttpRequest { get; }
    }
}
