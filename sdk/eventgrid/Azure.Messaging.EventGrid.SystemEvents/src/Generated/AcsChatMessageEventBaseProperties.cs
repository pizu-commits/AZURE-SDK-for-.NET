// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> The AcsChatMessageEventBaseProperties. </summary>
    public partial class AcsChatMessageEventBaseProperties : AcsChatEventBaseProperties
    {
        /// <summary> Initializes a new instance of <see cref="AcsChatMessageEventBaseProperties"/>. </summary>
        /// <param name="recipientCommunicationIdentifier"></param>
        /// <param name="senderCommunicationIdentifier"></param>
        /// <param name="composeTime"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="recipientCommunicationIdentifier"/> or <paramref name="senderCommunicationIdentifier"/> is null. </exception>
        internal AcsChatMessageEventBaseProperties(CommunicationIdentifierModel recipientCommunicationIdentifier, CommunicationIdentifierModel senderCommunicationIdentifier, DateTimeOffset composeTime) : base(recipientCommunicationIdentifier)
        {
            Argument.AssertNotNull(recipientCommunicationIdentifier, nameof(recipientCommunicationIdentifier));
            Argument.AssertNotNull(senderCommunicationIdentifier, nameof(senderCommunicationIdentifier));

            SenderCommunicationIdentifier = senderCommunicationIdentifier;
            ComposeTime = composeTime;
        }

        /// <summary> Initializes a new instance of <see cref="AcsChatMessageEventBaseProperties"/>. </summary>
        /// <param name="recipientCommunicationIdentifier"></param>
        /// <param name="transactionId"></param>
        /// <param name="threadId"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="messageId"></param>
        /// <param name="senderCommunicationIdentifier"></param>
        /// <param name="senderDisplayName"></param>
        /// <param name="composeTime"></param>
        /// <param name="type"></param>
        /// <param name="version"></param>
        internal AcsChatMessageEventBaseProperties(CommunicationIdentifierModel recipientCommunicationIdentifier, string transactionId, string threadId, IDictionary<string, BinaryData> serializedAdditionalRawData, string messageId, CommunicationIdentifierModel senderCommunicationIdentifier, string senderDisplayName, DateTimeOffset composeTime, string type, long? version) : base(recipientCommunicationIdentifier, transactionId, threadId, serializedAdditionalRawData)
        {
            MessageId = messageId;
            SenderCommunicationIdentifier = senderCommunicationIdentifier;
            SenderDisplayName = senderDisplayName;
            ComposeTime = composeTime;
            Type = type;
            Version = version;
        }

        /// <summary> Initializes a new instance of <see cref="AcsChatMessageEventBaseProperties"/> for deserialization. </summary>
        internal AcsChatMessageEventBaseProperties()
        {
        }

        /// <summary> Gets the message id. </summary>
        public string MessageId { get; }
        /// <summary> Gets the sender communication identifier. </summary>
        public CommunicationIdentifierModel SenderCommunicationIdentifier { get; }
        /// <summary> Gets the sender display name. </summary>
        public string SenderDisplayName { get; }
        /// <summary> Gets the compose time. </summary>
        public DateTimeOffset ComposeTime { get; }
        /// <summary> Gets the type. </summary>
        public string Type { get; }
        /// <summary> Gets the version. </summary>
        public long? Version { get; }
    }
}
