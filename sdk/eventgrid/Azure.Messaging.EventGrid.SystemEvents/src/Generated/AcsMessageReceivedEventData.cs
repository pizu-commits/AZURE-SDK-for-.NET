// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> The AcsMessageReceivedEventData. </summary>
    public partial class AcsMessageReceivedEventData : AcsMessageEventData
    {
        /// <summary> Initializes a new instance of <see cref="AcsMessageReceivedEventData"/>. </summary>
        /// <param name="receivedTimestamp"></param>
        /// <param name="error"></param>
        /// <param name="channelKind"></param>
        /// <param name="mediaContent"></param>
        /// <param name="context"></param>
        /// <param name="button"></param>
        /// <param name="interactiveContent"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="error"/>, <paramref name="mediaContent"/>, <paramref name="context"/>, <paramref name="button"/> or <paramref name="interactiveContent"/> is null. </exception>
        internal AcsMessageReceivedEventData(DateTimeOffset receivedTimestamp, AcsMessageChannelEventError error, AcsMessageChannelKind channelKind, AcsMessageMediaContent mediaContent, AcsMessageContext context, AcsMessageButtonContent button, AcsMessageInteractiveContent interactiveContent) : base(receivedTimestamp, error)
        {
            Argument.AssertNotNull(error, nameof(error));
            Argument.AssertNotNull(mediaContent, nameof(mediaContent));
            Argument.AssertNotNull(context, nameof(context));
            Argument.AssertNotNull(button, nameof(button));
            Argument.AssertNotNull(interactiveContent, nameof(interactiveContent));

            ChannelKind = channelKind;
            MediaContent = mediaContent;
            Context = context;
            Button = button;
            InteractiveContent = interactiveContent;
        }

        /// <summary> Initializes a new instance of <see cref="AcsMessageReceivedEventData"/>. </summary>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="receivedTimestamp"></param>
        /// <param name="error"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="content"></param>
        /// <param name="channelKind"></param>
        /// <param name="mediaContent"></param>
        /// <param name="context"></param>
        /// <param name="button"></param>
        /// <param name="interactiveContent"></param>
        internal AcsMessageReceivedEventData(string @from, string to, DateTimeOffset receivedTimestamp, AcsMessageChannelEventError error, IDictionary<string, BinaryData> serializedAdditionalRawData, string content, AcsMessageChannelKind channelKind, AcsMessageMediaContent mediaContent, AcsMessageContext context, AcsMessageButtonContent button, AcsMessageInteractiveContent interactiveContent) : base(@from, to, receivedTimestamp, error, serializedAdditionalRawData)
        {
            Content = content;
            ChannelKind = channelKind;
            MediaContent = mediaContent;
            Context = context;
            Button = button;
            InteractiveContent = interactiveContent;
        }

        /// <summary> Initializes a new instance of <see cref="AcsMessageReceivedEventData"/> for deserialization. </summary>
        internal AcsMessageReceivedEventData()
        {
        }

        /// <summary> Gets the content. </summary>
        public string Content { get; }
        /// <summary> Gets the channel kind. </summary>
        public AcsMessageChannelKind ChannelKind { get; }
        /// <summary> Gets the media content. </summary>
        public AcsMessageMediaContent MediaContent { get; }
        /// <summary> Gets the context. </summary>
        public AcsMessageContext Context { get; }
        /// <summary> Gets the button. </summary>
        public AcsMessageButtonContent Button { get; }
        /// <summary> Gets the interactive content. </summary>
        public AcsMessageInteractiveContent InteractiveContent { get; }
    }
}
