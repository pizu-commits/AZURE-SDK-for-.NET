// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> The MapsGeofenceResultEventData. </summary>
    public partial class MapsGeofenceResultEventData : MapsGeofenceEventProperties
    {
        /// <summary> Initializes a new instance of <see cref="MapsGeofenceResultEventData"/>. </summary>
        /// <param name="geometries"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="geometries"/> is null. </exception>
        internal MapsGeofenceResultEventData(IEnumerable<MapsGeofenceGeometry> geometries) : base(geometries)
        {
            Argument.AssertNotNull(geometries, nameof(geometries));
        }

        /// <summary> Initializes a new instance of <see cref="MapsGeofenceResultEventData"/>. </summary>
        /// <param name="expiredGeofenceGeometryId"></param>
        /// <param name="geometries"></param>
        /// <param name="invalidPeriodGeofenceGeometryId"></param>
        /// <param name="isEventPublished"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MapsGeofenceResultEventData(IReadOnlyList<string> expiredGeofenceGeometryId, IReadOnlyList<MapsGeofenceGeometry> geometries, IReadOnlyList<string> invalidPeriodGeofenceGeometryId, bool? isEventPublished, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(expiredGeofenceGeometryId, geometries, invalidPeriodGeofenceGeometryId, isEventPublished, serializedAdditionalRawData)
        {
        }

        /// <summary> Initializes a new instance of <see cref="MapsGeofenceResultEventData"/> for deserialization. </summary>
        internal MapsGeofenceResultEventData()
        {
        }
    }
}
