// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> The AcsChatParticipantRemovedFromThreadEventData. </summary>
    public partial class AcsChatParticipantRemovedFromThreadEventData : AcsChatEventInThreadBaseProperties
    {
        /// <summary> Initializes a new instance of <see cref="AcsChatParticipantRemovedFromThreadEventData"/>. </summary>
        /// <param name="time"></param>
        /// <param name="removedByCommunicationIdentifier"></param>
        /// <param name="participantRemoved"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="removedByCommunicationIdentifier"/> or <paramref name="participantRemoved"/> is null. </exception>
        internal AcsChatParticipantRemovedFromThreadEventData(DateTimeOffset time, CommunicationIdentifierModel removedByCommunicationIdentifier, AcsChatThreadParticipantProperties participantRemoved)
        {
            Argument.AssertNotNull(removedByCommunicationIdentifier, nameof(removedByCommunicationIdentifier));
            Argument.AssertNotNull(participantRemoved, nameof(participantRemoved));

            Time = time;
            RemovedByCommunicationIdentifier = removedByCommunicationIdentifier;
            ParticipantRemoved = participantRemoved;
        }

        /// <summary> Initializes a new instance of <see cref="AcsChatParticipantRemovedFromThreadEventData"/>. </summary>
        /// <param name="transactionId"></param>
        /// <param name="threadId"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="time"></param>
        /// <param name="removedByCommunicationIdentifier"></param>
        /// <param name="participantRemoved"></param>
        /// <param name="version"></param>
        internal AcsChatParticipantRemovedFromThreadEventData(string transactionId, string threadId, IDictionary<string, BinaryData> serializedAdditionalRawData, DateTimeOffset time, CommunicationIdentifierModel removedByCommunicationIdentifier, AcsChatThreadParticipantProperties participantRemoved, long? version) : base(transactionId, threadId, serializedAdditionalRawData)
        {
            Time = time;
            RemovedByCommunicationIdentifier = removedByCommunicationIdentifier;
            ParticipantRemoved = participantRemoved;
            Version = version;
        }

        /// <summary> Initializes a new instance of <see cref="AcsChatParticipantRemovedFromThreadEventData"/> for deserialization. </summary>
        internal AcsChatParticipantRemovedFromThreadEventData()
        {
        }

        /// <summary> Gets the time. </summary>
        public DateTimeOffset Time { get; }
        /// <summary> Gets the removed by communication identifier. </summary>
        public CommunicationIdentifierModel RemovedByCommunicationIdentifier { get; }
        /// <summary> Gets the participant removed. </summary>
        public AcsChatThreadParticipantProperties ParticipantRemoved { get; }
        /// <summary> Gets the version. </summary>
        public long? Version { get; }
    }
}
