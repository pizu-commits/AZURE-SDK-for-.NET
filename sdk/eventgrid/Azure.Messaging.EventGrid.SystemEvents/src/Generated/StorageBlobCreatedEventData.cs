// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> The StorageBlobCreatedEventData. </summary>
    public partial class StorageBlobCreatedEventData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="StorageBlobCreatedEventData"/>. </summary>
        /// <param name="storageDiagnostics"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageDiagnostics"/> is null. </exception>
        internal StorageBlobCreatedEventData(IReadOnlyDictionary<string, BinaryData> storageDiagnostics)
        {
            Argument.AssertNotNull(storageDiagnostics, nameof(storageDiagnostics));

            StorageDiagnostics = storageDiagnostics;
        }

        /// <summary> Initializes a new instance of <see cref="StorageBlobCreatedEventData"/>. </summary>
        /// <param name="api"></param>
        /// <param name="clientRequestId"></param>
        /// <param name="requestId"></param>
        /// <param name="eTag"></param>
        /// <param name="contentType"></param>
        /// <param name="contentLength"></param>
        /// <param name="contentOffset"></param>
        /// <param name="blobType"></param>
        /// <param name="url"></param>
        /// <param name="sequencer"></param>
        /// <param name="identity"></param>
        /// <param name="storageDiagnostics"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal StorageBlobCreatedEventData(string api, string clientRequestId, string requestId, string eTag, string contentType, long? contentLength, long? contentOffset, string blobType, string url, string sequencer, string identity, IReadOnlyDictionary<string, BinaryData> storageDiagnostics, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Api = api;
            ClientRequestId = clientRequestId;
            RequestId = requestId;
            ETag = eTag;
            ContentType = contentType;
            ContentLength = contentLength;
            ContentOffset = contentOffset;
            BlobType = blobType;
            Url = url;
            Sequencer = sequencer;
            Identity = identity;
            StorageDiagnostics = storageDiagnostics;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="StorageBlobCreatedEventData"/> for deserialization. </summary>
        internal StorageBlobCreatedEventData()
        {
        }

        /// <summary> Gets the api. </summary>
        public string Api { get; }
        /// <summary> Gets the client request id. </summary>
        public string ClientRequestId { get; }
        /// <summary> Gets the request id. </summary>
        public string RequestId { get; }
        /// <summary> Gets the e tag. </summary>
        public string ETag { get; }
        /// <summary> Gets the content type. </summary>
        public string ContentType { get; }
        /// <summary> Gets the content length. </summary>
        public long? ContentLength { get; }
        /// <summary> Gets the content offset. </summary>
        public long? ContentOffset { get; }
        /// <summary> Gets the blob type. </summary>
        public string BlobType { get; }
        /// <summary> Gets the url. </summary>
        public string Url { get; }
        /// <summary> Gets the sequencer. </summary>
        public string Sequencer { get; }
        /// <summary> Gets the identity. </summary>
        public string Identity { get; }
        /// <summary>
        /// Gets the storage diagnostics
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> StorageDiagnostics { get; }
    }
}
