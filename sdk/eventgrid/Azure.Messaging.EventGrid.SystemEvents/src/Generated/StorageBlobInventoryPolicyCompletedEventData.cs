// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> The StorageBlobInventoryPolicyCompletedEventData. </summary>
    public partial class StorageBlobInventoryPolicyCompletedEventData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="StorageBlobInventoryPolicyCompletedEventData"/>. </summary>
        /// <param name="scheduleDateTime"></param>
        internal StorageBlobInventoryPolicyCompletedEventData(DateTimeOffset scheduleDateTime)
        {
            ScheduleDateTime = scheduleDateTime;
        }

        /// <summary> Initializes a new instance of <see cref="StorageBlobInventoryPolicyCompletedEventData"/>. </summary>
        /// <param name="scheduleDateTime"></param>
        /// <param name="accountName"></param>
        /// <param name="ruleName"></param>
        /// <param name="policyRunStatus"></param>
        /// <param name="policyRunStatusMessage"></param>
        /// <param name="policyRunId"></param>
        /// <param name="manifestBlobUrl"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal StorageBlobInventoryPolicyCompletedEventData(DateTimeOffset scheduleDateTime, string accountName, string ruleName, string policyRunStatus, string policyRunStatusMessage, string policyRunId, string manifestBlobUrl, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ScheduleDateTime = scheduleDateTime;
            AccountName = accountName;
            RuleName = ruleName;
            PolicyRunStatus = policyRunStatus;
            PolicyRunStatusMessage = policyRunStatusMessage;
            PolicyRunId = policyRunId;
            ManifestBlobUrl = manifestBlobUrl;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="StorageBlobInventoryPolicyCompletedEventData"/> for deserialization. </summary>
        internal StorageBlobInventoryPolicyCompletedEventData()
        {
        }

        /// <summary> Gets the schedule date time. </summary>
        public DateTimeOffset ScheduleDateTime { get; }
        /// <summary> Gets the account name. </summary>
        public string AccountName { get; }
        /// <summary> Gets the rule name. </summary>
        public string RuleName { get; }
        /// <summary> Gets the policy run status. </summary>
        public string PolicyRunStatus { get; }
        /// <summary> Gets the policy run status message. </summary>
        public string PolicyRunStatusMessage { get; }
        /// <summary> Gets the policy run id. </summary>
        public string PolicyRunId { get; }
        /// <summary> Gets the manifest blob url. </summary>
        public string ManifestBlobUrl { get; }
    }
}
