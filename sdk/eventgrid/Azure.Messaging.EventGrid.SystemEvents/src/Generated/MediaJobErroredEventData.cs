// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> The MediaJobErroredEventData. </summary>
    public partial class MediaJobErroredEventData : MediaJobStateChangeEventData
    {
        /// <summary> Initializes a new instance of <see cref="MediaJobErroredEventData"/>. </summary>
        /// <param name="previousState"></param>
        /// <param name="state"></param>
        /// <param name="correlationData"></param>
        /// <param name="outputs">
        /// Please note <see cref="MediaJobOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MediaJobOutputAsset"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="correlationData"/> or <paramref name="outputs"/> is null. </exception>
        internal MediaJobErroredEventData(MediaJobState previousState, MediaJobState state, IReadOnlyDictionary<string, string> correlationData, IEnumerable<MediaJobOutput> outputs) : base(previousState, state, correlationData)
        {
            Argument.AssertNotNull(correlationData, nameof(correlationData));
            Argument.AssertNotNull(outputs, nameof(outputs));

            Outputs = outputs.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="MediaJobErroredEventData"/>. </summary>
        /// <param name="previousState"></param>
        /// <param name="state"></param>
        /// <param name="correlationData"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="outputs">
        /// Please note <see cref="MediaJobOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MediaJobOutputAsset"/>.
        /// </param>
        internal MediaJobErroredEventData(MediaJobState previousState, MediaJobState state, IReadOnlyDictionary<string, string> correlationData, IDictionary<string, BinaryData> serializedAdditionalRawData, IReadOnlyList<MediaJobOutput> outputs) : base(previousState, state, correlationData, serializedAdditionalRawData)
        {
            Outputs = outputs;
        }

        /// <summary> Initializes a new instance of <see cref="MediaJobErroredEventData"/> for deserialization. </summary>
        internal MediaJobErroredEventData()
        {
        }

        /// <summary>
        /// Gets the outputs
        /// Please note <see cref="MediaJobOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MediaJobOutputAsset"/>.
        /// </summary>
        public IReadOnlyList<MediaJobOutput> Outputs { get; }
    }
}
