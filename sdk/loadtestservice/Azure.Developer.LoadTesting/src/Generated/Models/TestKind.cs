// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.LoadTesting.Models
{
    /// <summary> Test kind. </summary>
    public readonly partial struct TestKind : IEquatable<TestKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TestKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TestKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string URLValue = "URL";
        private const string JMXValue = "JMX";
        private const string LocustValue = "Locust";

        /// <summary> URL Test. </summary>
        public static TestKind URL { get; } = new TestKind(URLValue);
        /// <summary> JMX Test. </summary>
        public static TestKind JMX { get; } = new TestKind(JMXValue);
        /// <summary> Locust Test. </summary>
        public static TestKind Locust { get; } = new TestKind(LocustValue);
        /// <summary> Determines if two <see cref="TestKind"/> values are the same. </summary>
        public static bool operator ==(TestKind left, TestKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TestKind"/> values are not the same. </summary>
        public static bool operator !=(TestKind left, TestKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TestKind"/>. </summary>
        public static implicit operator TestKind(string value) => new TestKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TestKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TestKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
