// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Communication.JobRouter
{
    /// <summary> The RouterWorker. </summary>
    public partial class RouterWorker
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RouterWorker"/>. </summary>
        internal RouterWorker()
        {
            Queues = new ChangeTrackingList<string>();
            _labels = new ChangeTrackingDictionary<string, BinaryData>();
            _tags = new ChangeTrackingDictionary<string, BinaryData>();
            Channels = new ChangeTrackingList<RouterChannel>();
            Offers = new ChangeTrackingList<RouterJobOffer>();
            AssignedJobs = new ChangeTrackingList<RouterWorkerAssignment>();
        }

        /// <summary> Initializes a new instance of <see cref="RouterWorker"/>. </summary>
        /// <param name="eTag"></param>
        /// <param name="id"></param>
        /// <param name="state"></param>
        /// <param name="queues"></param>
        /// <param name="capacity"></param>
        /// <param name="labels"></param>
        /// <param name="tags"></param>
        /// <param name="channels"></param>
        /// <param name="offers"></param>
        /// <param name="assignedJobs"></param>
        /// <param name="loadRatio"></param>
        /// <param name="availableForOffers"></param>
        /// <param name="maxConcurrentOffers"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RouterWorker(ETag eTag, string id, RouterWorkerState? state, IList<string> queues, int? capacity, IDictionary<string, BinaryData> labels, IDictionary<string, BinaryData> tags, IList<RouterChannel> channels, IReadOnlyList<RouterJobOffer> offers, IReadOnlyList<RouterWorkerAssignment> assignedJobs, double? loadRatio, bool? availableForOffers, int? maxConcurrentOffers, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ETag = eTag;
            Id = id;
            State = state;
            Queues = queues;
            Capacity = capacity;
            _labels = labels;
            _tags = tags;
            Channels = channels;
            Offers = offers;
            AssignedJobs = assignedJobs;
            LoadRatio = loadRatio;
            AvailableForOffers = availableForOffers;
            MaxConcurrentOffers = maxConcurrentOffers;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }
        /// <summary> Gets the id. </summary>
        public string Id { get; }
        /// <summary> Gets the state. </summary>
        public RouterWorkerState? State { get; }
        /// <summary> Gets the offers. </summary>
        public IReadOnlyList<RouterJobOffer> Offers { get; }
        /// <summary> Gets the assigned jobs. </summary>
        public IReadOnlyList<RouterWorkerAssignment> AssignedJobs { get; }
        /// <summary> Gets the load ratio. </summary>
        public double? LoadRatio { get; }
    }
}
