// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Communication.JobRouter
{
    /// <summary> The RouterJob. </summary>
    public partial class RouterJob
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RouterJob"/>. </summary>
        internal RouterJob()
        {
            RequestedWorkerSelectors = new ChangeTrackingList<RouterWorkerSelector>();
            AttachedWorkerSelectors = new ChangeTrackingList<RouterWorkerSelector>();
            _labels = new ChangeTrackingDictionary<string, BinaryData>();
            Assignments = new ChangeTrackingDictionary<string, RouterJobAssignment>();
            _tags = new ChangeTrackingDictionary<string, BinaryData>();
            Notes = new ChangeTrackingList<RouterJobNote>();
        }

        /// <summary> Initializes a new instance of <see cref="RouterJob"/>. </summary>
        /// <param name="eTag"></param>
        /// <param name="id"></param>
        /// <param name="channelReference"></param>
        /// <param name="status"></param>
        /// <param name="enqueuedAt"></param>
        /// <param name="channelId"></param>
        /// <param name="classificationPolicyId"></param>
        /// <param name="queueId"></param>
        /// <param name="priority"></param>
        /// <param name="dispositionCode"></param>
        /// <param name="requestedWorkerSelectors"></param>
        /// <param name="attachedWorkerSelectors"></param>
        /// <param name="labels"></param>
        /// <param name="assignments"></param>
        /// <param name="tags"></param>
        /// <param name="notes"></param>
        /// <param name="scheduledAt"></param>
        /// <param name="matchingMode">
        /// Please note <see cref="JobMatchingMode"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="QueueAndMatchMode"/>, <see cref="ScheduleAndSuspendMode"/> and <see cref="SuspendMode"/>.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RouterJob(ETag eTag, string id, string channelReference, RouterJobStatus? status, DateTimeOffset? enqueuedAt, string channelId, string classificationPolicyId, string queueId, int? priority, string dispositionCode, IList<RouterWorkerSelector> requestedWorkerSelectors, IReadOnlyList<RouterWorkerSelector> attachedWorkerSelectors, IDictionary<string, BinaryData> labels, IReadOnlyDictionary<string, RouterJobAssignment> assignments, IDictionary<string, BinaryData> tags, IList<RouterJobNote> notes, DateTimeOffset? scheduledAt, JobMatchingMode matchingMode, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ETag = eTag;
            Id = id;
            ChannelReference = channelReference;
            Status = status;
            EnqueuedAt = enqueuedAt;
            ChannelId = channelId;
            ClassificationPolicyId = classificationPolicyId;
            QueueId = queueId;
            Priority = priority;
            DispositionCode = dispositionCode;
            RequestedWorkerSelectors = requestedWorkerSelectors;
            AttachedWorkerSelectors = attachedWorkerSelectors;
            _labels = labels;
            Assignments = assignments;
            _tags = tags;
            Notes = notes;
            ScheduledAt = scheduledAt;
            MatchingMode = matchingMode;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }
        /// <summary> Gets the id. </summary>
        public string Id { get; }
        /// <summary> Gets the status. </summary>
        public RouterJobStatus? Status { get; }
        /// <summary> Gets the enqueued at. </summary>
        public DateTimeOffset? EnqueuedAt { get; }
        /// <summary> Gets the attached worker selectors. </summary>
        public IReadOnlyList<RouterWorkerSelector> AttachedWorkerSelectors { get; }
        /// <summary> Gets the assignments. </summary>
        public IReadOnlyDictionary<string, RouterJobAssignment> Assignments { get; }
        /// <summary> Gets the scheduled at. </summary>
        public DateTimeOffset? ScheduledAt { get; }
    }
}
