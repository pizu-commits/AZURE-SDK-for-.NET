// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.Purview.DataMap
{
    /// <summary> The SuggestResultValue. </summary>
    public partial class SuggestResultValue
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SuggestResultValue"/>. </summary>
        internal SuggestResultValue()
        {
            Classification = new ChangeTrackingList<string>();
            Label = new ChangeTrackingList<string>();
            Term = new ChangeTrackingList<TermSearchResultValue>();
            Contact = new ChangeTrackingList<ContactSearchResultValue>();
            AssetType = new ChangeTrackingList<string>();
            TermTemplate = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="SuggestResultValue"/>. </summary>
        /// <param name="searchScore"></param>
        /// <param name="searchText"></param>
        /// <param name="objectType"></param>
        /// <param name="createTime"></param>
        /// <param name="updateTime"></param>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="qualifiedName"></param>
        /// <param name="entityType"></param>
        /// <param name="description"></param>
        /// <param name="endorsement"></param>
        /// <param name="owner"></param>
        /// <param name="classification"></param>
        /// <param name="label"></param>
        /// <param name="term"></param>
        /// <param name="contact"></param>
        /// <param name="assetType"></param>
        /// <param name="glossaryType"></param>
        /// <param name="glossary"></param>
        /// <param name="termStatus"></param>
        /// <param name="termTemplate"></param>
        /// <param name="longDescription"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SuggestResultValue(float? searchScore, string searchText, string objectType, long? createTime, long? updateTime, string id, string name, string qualifiedName, string entityType, string description, string endorsement, string owner, IReadOnlyList<string> classification, IReadOnlyList<string> label, IReadOnlyList<TermSearchResultValue> term, IReadOnlyList<ContactSearchResultValue> contact, IReadOnlyList<string> assetType, string glossaryType, string glossary, string termStatus, IReadOnlyList<string> termTemplate, string longDescription, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SearchScore = searchScore;
            SearchText = searchText;
            ObjectType = objectType;
            CreateTime = createTime;
            UpdateTime = updateTime;
            Id = id;
            Name = name;
            QualifiedName = qualifiedName;
            EntityType = entityType;
            Description = description;
            Endorsement = endorsement;
            Owner = owner;
            Classification = classification;
            Label = label;
            Term = term;
            Contact = contact;
            AssetType = assetType;
            GlossaryType = glossaryType;
            Glossary = glossary;
            TermStatus = termStatus;
            TermTemplate = termTemplate;
            LongDescription = longDescription;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the search score. </summary>
        public float? SearchScore { get; }
        /// <summary> Gets the search text. </summary>
        public string SearchText { get; }
        /// <summary> Gets the object type. </summary>
        public string ObjectType { get; }
        /// <summary> Gets the create time. </summary>
        public long? CreateTime { get; }
        /// <summary> Gets the update time. </summary>
        public long? UpdateTime { get; }
        /// <summary> Gets the id. </summary>
        public string Id { get; }
        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets the qualified name. </summary>
        public string QualifiedName { get; }
        /// <summary> Gets the entity type. </summary>
        public string EntityType { get; }
        /// <summary> Gets the description. </summary>
        public string Description { get; }
        /// <summary> Gets the endorsement. </summary>
        public string Endorsement { get; }
        /// <summary> Gets the owner. </summary>
        public string Owner { get; }
        /// <summary> Gets the classification. </summary>
        public IReadOnlyList<string> Classification { get; }
        /// <summary> Gets the label. </summary>
        public IReadOnlyList<string> Label { get; }
        /// <summary> Gets the term. </summary>
        public IReadOnlyList<TermSearchResultValue> Term { get; }
        /// <summary> Gets the contact. </summary>
        public IReadOnlyList<ContactSearchResultValue> Contact { get; }
        /// <summary> Gets the asset type. </summary>
        public IReadOnlyList<string> AssetType { get; }
        /// <summary> Gets the glossary type. </summary>
        public string GlossaryType { get; }
        /// <summary> Gets the glossary. </summary>
        public string Glossary { get; }
        /// <summary> Gets the term status. </summary>
        public string TermStatus { get; }
        /// <summary> Gets the term template. </summary>
        public IReadOnlyList<string> TermTemplate { get; }
        /// <summary> Gets the long description. </summary>
        public string LongDescription { get; }
    }
}
