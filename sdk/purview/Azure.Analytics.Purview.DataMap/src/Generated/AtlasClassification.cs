// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.Purview.DataMap
{
    /// <summary> The AtlasClassification. </summary>
    public partial class AtlasClassification
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AtlasClassification"/>. </summary>
        public AtlasClassification()
        {
            Attributes = new ChangeTrackingDictionary<string, BinaryData>();
            ValidityPeriods = new ChangeTrackingList<TimeBoundary>();
        }

        /// <summary> Initializes a new instance of <see cref="AtlasClassification"/>. </summary>
        /// <param name="attributes"></param>
        /// <param name="typeName"></param>
        /// <param name="lastModifiedTS"></param>
        /// <param name="entityGuid"></param>
        /// <param name="entityStatus"></param>
        /// <param name="removePropagationsOnEntityDelete"></param>
        /// <param name="validityPeriods"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AtlasClassification(IDictionary<string, BinaryData> attributes, string typeName, string lastModifiedTS, string entityGuid, EntityStatus? entityStatus, bool? removePropagationsOnEntityDelete, IList<TimeBoundary> validityPeriods, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Attributes = attributes;
            TypeName = typeName;
            LastModifiedTS = lastModifiedTS;
            EntityGuid = entityGuid;
            EntityStatus = entityStatus;
            RemovePropagationsOnEntityDelete = removePropagationsOnEntityDelete;
            ValidityPeriods = validityPeriods;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// Gets the attributes
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Attributes { get; }
        /// <summary> Gets or sets the type name. </summary>
        public string TypeName { get; set; }
        /// <summary> Gets or sets the last modified ts. </summary>
        public string LastModifiedTS { get; set; }
        /// <summary> Gets or sets the entity guid. </summary>
        public string EntityGuid { get; set; }
        /// <summary> Gets or sets the entity status. </summary>
        public EntityStatus? EntityStatus { get; set; }
        /// <summary> Gets or sets the remove propagations on entity delete. </summary>
        public bool? RemovePropagationsOnEntityDelete { get; set; }
        /// <summary> Gets the validity periods. </summary>
        public IList<TimeBoundary> ValidityPeriods { get; }
    }
}
