// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.Purview.DataMap
{
    /// <summary> The QueryResult. </summary>
    public partial class QueryResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="QueryResult"/>. </summary>
        internal QueryResult()
        {
            Value = new ChangeTrackingList<SearchResultValue>();
        }

        /// <summary> Initializes a new instance of <see cref="QueryResult"/>. </summary>
        /// <param name="searchCount"></param>
        /// <param name="searchCountApproximate"></param>
        /// <param name="continuationToken"></param>
        /// <param name="searchFacets"></param>
        /// <param name="value"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal QueryResult(int? searchCount, bool? searchCountApproximate, string continuationToken, SearchFacetResultValue searchFacets, IReadOnlyList<SearchResultValue> value, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SearchCount = searchCount;
            SearchCountApproximate = searchCountApproximate;
            ContinuationToken = continuationToken;
            SearchFacets = searchFacets;
            Value = value;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the search count. </summary>
        public int? SearchCount { get; }
        /// <summary> Gets the search count approximate. </summary>
        public bool? SearchCountApproximate { get; }
        /// <summary> Gets the continuation token. </summary>
        public string ContinuationToken { get; }
        /// <summary> Gets the search facets. </summary>
        public SearchFacetResultValue SearchFacets { get; }
        /// <summary> Gets the value. </summary>
        public IReadOnlyList<SearchResultValue> Value { get; }
    }
}
