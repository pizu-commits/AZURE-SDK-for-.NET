// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.Purview.DataMap
{
    /// <summary> The AtlasGlossaryCategory. </summary>
    public partial class AtlasGlossaryCategory
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AtlasGlossaryCategory"/>. </summary>
        public AtlasGlossaryCategory()
        {
            Classifications = new ChangeTrackingList<AtlasClassification>();
            ChildrenCategories = new ChangeTrackingList<AtlasRelatedCategoryHeader>();
            Terms = new ChangeTrackingList<AtlasRelatedTermHeader>();
        }

        /// <summary> Initializes a new instance of <see cref="AtlasGlossaryCategory"/>. </summary>
        /// <param name="guid"></param>
        /// <param name="classifications"></param>
        /// <param name="longDescription"></param>
        /// <param name="name"></param>
        /// <param name="qualifiedName"></param>
        /// <param name="shortDescription"></param>
        /// <param name="lastModifiedTS"></param>
        /// <param name="createTime"></param>
        /// <param name="createdBy"></param>
        /// <param name="updateTime"></param>
        /// <param name="updatedBy"></param>
        /// <param name="anchor"></param>
        /// <param name="childrenCategories"></param>
        /// <param name="parentCategory"></param>
        /// <param name="terms"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AtlasGlossaryCategory(string guid, IList<AtlasClassification> classifications, string longDescription, string name, string qualifiedName, string shortDescription, string lastModifiedTS, long? createTime, string createdBy, long? updateTime, string updatedBy, AtlasGlossaryHeader anchor, IList<AtlasRelatedCategoryHeader> childrenCategories, AtlasRelatedCategoryHeader parentCategory, IList<AtlasRelatedTermHeader> terms, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Guid = guid;
            Classifications = classifications;
            LongDescription = longDescription;
            Name = name;
            QualifiedName = qualifiedName;
            ShortDescription = shortDescription;
            LastModifiedTS = lastModifiedTS;
            CreateTime = createTime;
            CreatedBy = createdBy;
            UpdateTime = updateTime;
            UpdatedBy = updatedBy;
            Anchor = anchor;
            ChildrenCategories = childrenCategories;
            ParentCategory = parentCategory;
            Terms = terms;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets the guid. </summary>
        public string Guid { get; set; }
        /// <summary> Gets the classifications. </summary>
        public IList<AtlasClassification> Classifications { get; }
        /// <summary> Gets or sets the long description. </summary>
        public string LongDescription { get; set; }
        /// <summary> Gets or sets the name. </summary>
        public string Name { get; set; }
        /// <summary> Gets or sets the qualified name. </summary>
        public string QualifiedName { get; set; }
        /// <summary> Gets or sets the short description. </summary>
        public string ShortDescription { get; set; }
        /// <summary> Gets or sets the last modified ts. </summary>
        public string LastModifiedTS { get; set; }
        /// <summary> Gets or sets the create time. </summary>
        public long? CreateTime { get; set; }
        /// <summary> Gets or sets the created by. </summary>
        public string CreatedBy { get; set; }
        /// <summary> Gets or sets the update time. </summary>
        public long? UpdateTime { get; set; }
        /// <summary> Gets or sets the updated by. </summary>
        public string UpdatedBy { get; set; }
        /// <summary> Gets or sets the anchor. </summary>
        public AtlasGlossaryHeader Anchor { get; set; }
        /// <summary> Gets the children categories. </summary>
        public IList<AtlasRelatedCategoryHeader> ChildrenCategories { get; }
        /// <summary> Gets or sets the parent category. </summary>
        public AtlasRelatedCategoryHeader ParentCategory { get; set; }
        /// <summary> Gets the terms. </summary>
        public IList<AtlasRelatedTermHeader> Terms { get; }
    }
}
