// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Analytics.Purview.DataMap
{
    /// <summary> Model factory for models. </summary>
    public static partial class AnalyticsPurviewDataMapModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="DataMap.AtlasTypeDef"/>. </summary>
        /// <param name="category"></param>
        /// <param name="createTime"></param>
        /// <param name="createdBy"></param>
        /// <param name="dateFormatter"></param>
        /// <param name="description"></param>
        /// <param name="guid"></param>
        /// <param name="name"></param>
        /// <param name="options"></param>
        /// <param name="serviceType"></param>
        /// <param name="typeVersion"></param>
        /// <param name="updateTime"></param>
        /// <param name="updatedBy"></param>
        /// <param name="version"></param>
        /// <param name="lastModifiedTS"></param>
        /// <param name="entityTypes"></param>
        /// <param name="subTypes"></param>
        /// <param name="superTypes"></param>
        /// <param name="relationshipAttributeDefs"></param>
        /// <param name="defaultValue"></param>
        /// <param name="elementDefs"></param>
        /// <param name="endDef1"></param>
        /// <param name="endDef2"></param>
        /// <param name="relationshipCategory"></param>
        /// <param name="relationshipLabel"></param>
        /// <param name="attributeDefs"></param>
        /// <returns> A new <see cref="DataMap.AtlasTypeDef"/> instance for mocking. </returns>
        public static AtlasTypeDef AtlasTypeDef(TypeCategory? category = null, long? createTime = null, string createdBy = null, AtlasDateFormat dateFormatter = null, string description = null, string guid = null, string name = null, IReadOnlyDictionary<string, string> options = null, string serviceType = null, string typeVersion = null, long? updateTime = null, string updatedBy = null, long? version = null, string lastModifiedTS = null, IEnumerable<string> entityTypes = null, IEnumerable<string> subTypes = null, IEnumerable<string> superTypes = null, IEnumerable<AtlasRelationshipAttributeDef> relationshipAttributeDefs = null, string defaultValue = null, IEnumerable<AtlasEnumElementDef> elementDefs = null, AtlasRelationshipEndDef endDef1 = null, AtlasRelationshipEndDef endDef2 = null, RelationshipCategory? relationshipCategory = null, string relationshipLabel = null, IEnumerable<AtlasAttributeDef> attributeDefs = null)
        {
            options ??= new Dictionary<string, string>();
            entityTypes ??= new List<string>();
            subTypes ??= new List<string>();
            superTypes ??= new List<string>();
            relationshipAttributeDefs ??= new List<AtlasRelationshipAttributeDef>();
            elementDefs ??= new List<AtlasEnumElementDef>();
            attributeDefs ??= new List<AtlasAttributeDef>();

            return new AtlasTypeDef(
                category,
                createTime,
                createdBy,
                dateFormatter,
                description,
                guid,
                name,
                options,
                serviceType,
                typeVersion,
                updateTime,
                updatedBy,
                version,
                lastModifiedTS,
                entityTypes?.ToList(),
                subTypes?.ToList(),
                superTypes?.ToList(),
                relationshipAttributeDefs?.ToList(),
                defaultValue,
                elementDefs?.ToList(),
                endDef1,
                endDef2,
                relationshipCategory,
                relationshipLabel,
                attributeDefs?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.AtlasTypeDefHeader"/>. </summary>
        /// <param name="category"></param>
        /// <param name="guid"></param>
        /// <param name="name"></param>
        /// <returns> A new <see cref="DataMap.AtlasTypeDefHeader"/> instance for mocking. </returns>
        public static AtlasTypeDefHeader AtlasTypeDefHeader(TypeCategory? category = null, string guid = null, string name = null)
        {
            return new AtlasTypeDefHeader(category, guid, name, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.AtlasRelationshipWithExtInfo"/>. </summary>
        /// <param name="referredEntities"></param>
        /// <param name="relationship"></param>
        /// <returns> A new <see cref="DataMap.AtlasRelationshipWithExtInfo"/> instance for mocking. </returns>
        public static AtlasRelationshipWithExtInfo AtlasRelationshipWithExtInfo(IReadOnlyDictionary<string, AtlasEntityHeader> referredEntities = null, AtlasRelationship relationship = null)
        {
            referredEntities ??= new Dictionary<string, AtlasEntityHeader>();

            return new AtlasRelationshipWithExtInfo(referredEntities, relationship, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.AtlasLineageInfo"/>. </summary>
        /// <param name="baseEntityGuid"></param>
        /// <param name="guidEntityMap"></param>
        /// <param name="widthCounts"></param>
        /// <param name="lineageDepth"></param>
        /// <param name="lineageWidth"></param>
        /// <param name="childrenCount"></param>
        /// <param name="lineageDirection"></param>
        /// <param name="parentRelations"></param>
        /// <param name="relations"></param>
        /// <returns> A new <see cref="DataMap.AtlasLineageInfo"/> instance for mocking. </returns>
        public static AtlasLineageInfo AtlasLineageInfo(string baseEntityGuid = null, IReadOnlyDictionary<string, AtlasEntityHeader> guidEntityMap = null, IReadOnlyDictionary<string, IDictionary<string, BinaryData>> widthCounts = null, int? lineageDepth = null, int? lineageWidth = null, int? childrenCount = null, LineageDirection? lineageDirection = null, IEnumerable<ParentRelation> parentRelations = null, IEnumerable<LineageRelation> relations = null)
        {
            guidEntityMap ??= new Dictionary<string, AtlasEntityHeader>();
            widthCounts ??= new Dictionary<string, IDictionary<string, BinaryData>>();
            parentRelations ??= new List<ParentRelation>();
            relations ??= new List<LineageRelation>();

            return new AtlasLineageInfo(
                baseEntityGuid,
                guidEntityMap,
                widthCounts,
                lineageDepth,
                lineageWidth,
                childrenCount,
                lineageDirection,
                parentRelations?.ToList(),
                relations?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.ParentRelation"/>. </summary>
        /// <param name="childEntityId"></param>
        /// <param name="relationshipId"></param>
        /// <param name="parentEntityId"></param>
        /// <returns> A new <see cref="DataMap.ParentRelation"/> instance for mocking. </returns>
        public static ParentRelation ParentRelation(string childEntityId = null, string relationshipId = null, string parentEntityId = null)
        {
            return new ParentRelation(childEntityId, relationshipId, parentEntityId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.LineageRelation"/>. </summary>
        /// <param name="fromEntityId"></param>
        /// <param name="relationshipId"></param>
        /// <param name="toEntityId"></param>
        /// <returns> A new <see cref="DataMap.LineageRelation"/> instance for mocking. </returns>
        public static LineageRelation LineageRelation(string fromEntityId = null, string relationshipId = null, string toEntityId = null)
        {
            return new LineageRelation(fromEntityId, relationshipId, toEntityId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.QueryResult"/>. </summary>
        /// <param name="searchCount"></param>
        /// <param name="searchCountApproximate"></param>
        /// <param name="continuationToken"></param>
        /// <param name="searchFacets"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="DataMap.QueryResult"/> instance for mocking. </returns>
        public static QueryResult QueryResult(int? searchCount = null, bool? searchCountApproximate = null, string continuationToken = null, SearchFacetResultValue searchFacets = null, IEnumerable<SearchResultValue> value = null)
        {
            value ??= new List<SearchResultValue>();

            return new QueryResult(
                searchCount,
                searchCountApproximate,
                continuationToken,
                searchFacets,
                value?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.SearchFacetResultValue"/>. </summary>
        /// <param name="entityType"></param>
        /// <param name="assetType"></param>
        /// <param name="classification"></param>
        /// <param name="term"></param>
        /// <param name="contactId"></param>
        /// <param name="contactType"></param>
        /// <param name="label"></param>
        /// <param name="glossaryType"></param>
        /// <param name="termStatus"></param>
        /// <param name="termTemplate"></param>
        /// <returns> A new <see cref="DataMap.SearchFacetResultValue"/> instance for mocking. </returns>
        public static SearchFacetResultValue SearchFacetResultValue(IEnumerable<SearchFacetItemValue> entityType = null, IEnumerable<SearchFacetItemValue> assetType = null, IEnumerable<SearchFacetItemValue> classification = null, IEnumerable<SearchFacetItemValue> term = null, IEnumerable<SearchFacetItemValue> contactId = null, IEnumerable<SearchFacetItemValue> contactType = null, IEnumerable<SearchFacetItemValue> label = null, IEnumerable<SearchFacetItemValue> glossaryType = null, IEnumerable<SearchFacetItemValue> termStatus = null, IEnumerable<SearchFacetItemValue> termTemplate = null)
        {
            entityType ??= new List<SearchFacetItemValue>();
            assetType ??= new List<SearchFacetItemValue>();
            classification ??= new List<SearchFacetItemValue>();
            term ??= new List<SearchFacetItemValue>();
            contactId ??= new List<SearchFacetItemValue>();
            contactType ??= new List<SearchFacetItemValue>();
            label ??= new List<SearchFacetItemValue>();
            glossaryType ??= new List<SearchFacetItemValue>();
            termStatus ??= new List<SearchFacetItemValue>();
            termTemplate ??= new List<SearchFacetItemValue>();

            return new SearchFacetResultValue(
                entityType?.ToList(),
                assetType?.ToList(),
                classification?.ToList(),
                term?.ToList(),
                contactId?.ToList(),
                contactType?.ToList(),
                label?.ToList(),
                glossaryType?.ToList(),
                termStatus?.ToList(),
                termTemplate?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.SearchFacetItemValue"/>. </summary>
        /// <param name="count"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="DataMap.SearchFacetItemValue"/> instance for mocking. </returns>
        public static SearchFacetItemValue SearchFacetItemValue(int? count = null, string value = null)
        {
            return new SearchFacetItemValue(count, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.SearchResultValue"/>. </summary>
        /// <param name="searchScore"></param>
        /// <param name="searchHighlights"></param>
        /// <param name="objectType"></param>
        /// <param name="createTime"></param>
        /// <param name="updateTime"></param>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="qualifiedName"></param>
        /// <param name="entityType"></param>
        /// <param name="description"></param>
        /// <param name="endorsement"></param>
        /// <param name="owner"></param>
        /// <param name="classification"></param>
        /// <param name="label"></param>
        /// <param name="term"></param>
        /// <param name="contact"></param>
        /// <param name="assetType"></param>
        /// <param name="glossaryType"></param>
        /// <param name="glossary"></param>
        /// <param name="termStatus"></param>
        /// <param name="termTemplate"></param>
        /// <param name="longDescription"></param>
        /// <returns> A new <see cref="DataMap.SearchResultValue"/> instance for mocking. </returns>
        public static SearchResultValue SearchResultValue(float? searchScore = null, SearchHighlights searchHighlights = null, string objectType = null, long? createTime = null, long? updateTime = null, string id = null, string name = null, string qualifiedName = null, string entityType = null, string description = null, string endorsement = null, string owner = null, IEnumerable<string> classification = null, IEnumerable<string> label = null, IEnumerable<TermSearchResultValue> term = null, IEnumerable<ContactSearchResultValue> contact = null, IEnumerable<string> assetType = null, string glossaryType = null, string glossary = null, string termStatus = null, IEnumerable<string> termTemplate = null, string longDescription = null)
        {
            classification ??= new List<string>();
            label ??= new List<string>();
            term ??= new List<TermSearchResultValue>();
            contact ??= new List<ContactSearchResultValue>();
            assetType ??= new List<string>();
            termTemplate ??= new List<string>();

            return new SearchResultValue(
                searchScore,
                searchHighlights,
                objectType,
                createTime,
                updateTime,
                id,
                name,
                qualifiedName,
                entityType,
                description,
                endorsement,
                owner,
                classification?.ToList(),
                label?.ToList(),
                term?.ToList(),
                contact?.ToList(),
                assetType?.ToList(),
                glossaryType,
                glossary,
                termStatus,
                termTemplate?.ToList(),
                longDescription,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.SearchHighlights"/>. </summary>
        /// <param name="id"></param>
        /// <param name="qualifiedName"></param>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <param name="entityType"></param>
        /// <returns> A new <see cref="DataMap.SearchHighlights"/> instance for mocking. </returns>
        public static SearchHighlights SearchHighlights(IEnumerable<string> id = null, IEnumerable<string> qualifiedName = null, IEnumerable<string> name = null, IEnumerable<string> description = null, IEnumerable<string> entityType = null)
        {
            id ??= new List<string>();
            qualifiedName ??= new List<string>();
            name ??= new List<string>();
            description ??= new List<string>();
            entityType ??= new List<string>();

            return new SearchHighlights(
                id?.ToList(),
                qualifiedName?.ToList(),
                name?.ToList(),
                description?.ToList(),
                entityType?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.TermSearchResultValue"/>. </summary>
        /// <param name="name"></param>
        /// <param name="glossaryName"></param>
        /// <param name="guid"></param>
        /// <returns> A new <see cref="DataMap.TermSearchResultValue"/> instance for mocking. </returns>
        public static TermSearchResultValue TermSearchResultValue(string name = null, string glossaryName = null, string guid = null)
        {
            return new TermSearchResultValue(name, glossaryName, guid, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.ContactSearchResultValue"/>. </summary>
        /// <param name="id"></param>
        /// <param name="info"></param>
        /// <param name="contactType"></param>
        /// <returns> A new <see cref="DataMap.ContactSearchResultValue"/> instance for mocking. </returns>
        public static ContactSearchResultValue ContactSearchResultValue(string id = null, string info = null, string contactType = null)
        {
            return new ContactSearchResultValue(id, info, contactType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.SuggestResult"/>. </summary>
        /// <param name="value"></param>
        /// <returns> A new <see cref="DataMap.SuggestResult"/> instance for mocking. </returns>
        public static SuggestResult SuggestResult(IEnumerable<SuggestResultValue> value = null)
        {
            value ??= new List<SuggestResultValue>();

            return new SuggestResult(value?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.SuggestResultValue"/>. </summary>
        /// <param name="searchScore"></param>
        /// <param name="searchText"></param>
        /// <param name="objectType"></param>
        /// <param name="createTime"></param>
        /// <param name="updateTime"></param>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="qualifiedName"></param>
        /// <param name="entityType"></param>
        /// <param name="description"></param>
        /// <param name="endorsement"></param>
        /// <param name="owner"></param>
        /// <param name="classification"></param>
        /// <param name="label"></param>
        /// <param name="term"></param>
        /// <param name="contact"></param>
        /// <param name="assetType"></param>
        /// <param name="glossaryType"></param>
        /// <param name="glossary"></param>
        /// <param name="termStatus"></param>
        /// <param name="termTemplate"></param>
        /// <param name="longDescription"></param>
        /// <returns> A new <see cref="DataMap.SuggestResultValue"/> instance for mocking. </returns>
        public static SuggestResultValue SuggestResultValue(float? searchScore = null, string searchText = null, string objectType = null, long? createTime = null, long? updateTime = null, string id = null, string name = null, string qualifiedName = null, string entityType = null, string description = null, string endorsement = null, string owner = null, IEnumerable<string> classification = null, IEnumerable<string> label = null, IEnumerable<TermSearchResultValue> term = null, IEnumerable<ContactSearchResultValue> contact = null, IEnumerable<string> assetType = null, string glossaryType = null, string glossary = null, string termStatus = null, IEnumerable<string> termTemplate = null, string longDescription = null)
        {
            classification ??= new List<string>();
            label ??= new List<string>();
            term ??= new List<TermSearchResultValue>();
            contact ??= new List<ContactSearchResultValue>();
            assetType ??= new List<string>();
            termTemplate ??= new List<string>();

            return new SuggestResultValue(
                searchScore,
                searchText,
                objectType,
                createTime,
                updateTime,
                id,
                name,
                qualifiedName,
                entityType,
                description,
                endorsement,
                owner,
                classification?.ToList(),
                label?.ToList(),
                term?.ToList(),
                contact?.ToList(),
                assetType?.ToList(),
                glossaryType,
                glossary,
                termStatus,
                termTemplate?.ToList(),
                longDescription,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.AutoCompleteResult"/>. </summary>
        /// <param name="value"></param>
        /// <returns> A new <see cref="DataMap.AutoCompleteResult"/> instance for mocking. </returns>
        public static AutoCompleteResult AutoCompleteResult(IEnumerable<AutoCompleteResultValue> value = null)
        {
            value ??= new List<AutoCompleteResultValue>();

            return new AutoCompleteResult(value?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.AutoCompleteResultValue"/>. </summary>
        /// <param name="text"></param>
        /// <param name="queryPlusText"></param>
        /// <returns> A new <see cref="DataMap.AutoCompleteResultValue"/> instance for mocking. </returns>
        public static AutoCompleteResultValue AutoCompleteResultValue(string text = null, string queryPlusText = null)
        {
            return new AutoCompleteResultValue(text, queryPlusText, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.AtlasGlossaryExtInfo"/>. </summary>
        /// <param name="guid"></param>
        /// <param name="classifications"></param>
        /// <param name="longDescription"></param>
        /// <param name="name"></param>
        /// <param name="qualifiedName"></param>
        /// <param name="shortDescription"></param>
        /// <param name="lastModifiedTS"></param>
        /// <param name="createTime"></param>
        /// <param name="createdBy"></param>
        /// <param name="updateTime"></param>
        /// <param name="updatedBy"></param>
        /// <param name="categories"></param>
        /// <param name="language"></param>
        /// <param name="terms"></param>
        /// <param name="usage"></param>
        /// <param name="categoryInfo"></param>
        /// <param name="termInfo"></param>
        /// <returns> A new <see cref="DataMap.AtlasGlossaryExtInfo"/> instance for mocking. </returns>
        public static AtlasGlossaryExtInfo AtlasGlossaryExtInfo(string guid = null, IEnumerable<AtlasClassification> classifications = null, string longDescription = null, string name = null, string qualifiedName = null, string shortDescription = null, string lastModifiedTS = null, long? createTime = null, string createdBy = null, long? updateTime = null, string updatedBy = null, IEnumerable<AtlasRelatedCategoryHeader> categories = null, string language = null, IEnumerable<AtlasRelatedTermHeader> terms = null, string usage = null, IReadOnlyDictionary<string, AtlasGlossaryCategory> categoryInfo = null, IReadOnlyDictionary<string, AtlasGlossaryTerm> termInfo = null)
        {
            classifications ??= new List<AtlasClassification>();
            categories ??= new List<AtlasRelatedCategoryHeader>();
            terms ??= new List<AtlasRelatedTermHeader>();
            categoryInfo ??= new Dictionary<string, AtlasGlossaryCategory>();
            termInfo ??= new Dictionary<string, AtlasGlossaryTerm>();

            return new AtlasGlossaryExtInfo(
                guid,
                classifications?.ToList(),
                longDescription,
                name,
                qualifiedName,
                shortDescription,
                lastModifiedTS,
                createTime,
                createdBy,
                updateTime,
                updatedBy,
                categories?.ToList(),
                language,
                terms?.ToList(),
                usage,
                categoryInfo,
                termInfo,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.AtlasEntity"/>. </summary>
        /// <param name="attributes"></param>
        /// <param name="typeName"></param>
        /// <param name="lastModifiedTS"></param>
        /// <param name="businessAttributes"></param>
        /// <param name="classifications"></param>
        /// <param name="createTime"></param>
        /// <param name="createdBy"></param>
        /// <param name="customAttributes"></param>
        /// <param name="guid"></param>
        /// <param name="homeId"></param>
        /// <param name="collectionId"></param>
        /// <param name="isIncomplete"></param>
        /// <param name="labels"></param>
        /// <param name="meanings"></param>
        /// <param name="provenanceType"></param>
        /// <param name="proxy"></param>
        /// <param name="relationshipAttributes"></param>
        /// <param name="status"></param>
        /// <param name="updateTime"></param>
        /// <param name="updatedBy"></param>
        /// <param name="version"></param>
        /// <param name="contacts"></param>
        /// <returns> A new <see cref="DataMap.AtlasEntity"/> instance for mocking. </returns>
        public static AtlasEntity AtlasEntity(IDictionary<string, BinaryData> attributes = null, string typeName = null, string lastModifiedTS = null, IDictionary<string, BinaryData> businessAttributes = null, IEnumerable<AtlasClassification> classifications = null, long? createTime = null, string createdBy = null, IDictionary<string, string> customAttributes = null, string guid = null, string homeId = null, string collectionId = null, bool? isIncomplete = null, IEnumerable<string> labels = null, IEnumerable<AtlasTermAssignmentHeader> meanings = null, int? provenanceType = null, bool? proxy = null, IDictionary<string, BinaryData> relationshipAttributes = null, EntityStatus? status = null, long? updateTime = null, string updatedBy = null, long? version = null, IDictionary<string, IList<ContactInfo>> contacts = null)
        {
            attributes ??= new Dictionary<string, BinaryData>();
            businessAttributes ??= new Dictionary<string, BinaryData>();
            classifications ??= new List<AtlasClassification>();
            customAttributes ??= new Dictionary<string, string>();
            labels ??= new List<string>();
            meanings ??= new List<AtlasTermAssignmentHeader>();
            relationshipAttributes ??= new Dictionary<string, BinaryData>();
            contacts ??= new Dictionary<string, IList<ContactInfo>>();

            return new AtlasEntity(
                attributes,
                typeName,
                lastModifiedTS,
                businessAttributes,
                classifications?.ToList(),
                createTime,
                createdBy,
                customAttributes,
                guid,
                homeId,
                collectionId,
                isIncomplete,
                labels?.ToList(),
                meanings?.ToList(),
                provenanceType,
                proxy,
                relationshipAttributes,
                status,
                updateTime,
                updatedBy,
                version,
                contacts,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.EntityMutationResult"/>. </summary>
        /// <param name="guidAssignments"></param>
        /// <param name="mutatedEntities"></param>
        /// <param name="partialUpdatedEntities"></param>
        /// <returns> A new <see cref="DataMap.EntityMutationResult"/> instance for mocking. </returns>
        public static EntityMutationResult EntityMutationResult(IReadOnlyDictionary<string, string> guidAssignments = null, IReadOnlyDictionary<string, IList<AtlasEntityHeader>> mutatedEntities = null, IEnumerable<AtlasEntityHeader> partialUpdatedEntities = null)
        {
            guidAssignments ??= new Dictionary<string, string>();
            mutatedEntities ??= new Dictionary<string, IList<AtlasEntityHeader>>();
            partialUpdatedEntities ??= new List<AtlasEntityHeader>();

            return new EntityMutationResult(guidAssignments, mutatedEntities, partialUpdatedEntities?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.AtlasClassifications"/>. </summary>
        /// <param name="list"></param>
        /// <param name="pageSize"></param>
        /// <param name="sortBy"></param>
        /// <param name="sortType"></param>
        /// <param name="startIndex"></param>
        /// <param name="totalCount"></param>
        /// <returns> A new <see cref="DataMap.AtlasClassifications"/> instance for mocking. </returns>
        public static AtlasClassifications AtlasClassifications(IEnumerable<BinaryData> list = null, int? pageSize = null, string sortBy = null, AtlasSortType? sortType = null, int? startIndex = null, int? totalCount = null)
        {
            list ??= new List<BinaryData>();

            return new AtlasClassifications(
                list?.ToList(),
                pageSize,
                sortBy,
                sortType,
                startIndex,
                totalCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.BulkImportResult"/>. </summary>
        /// <param name="failedImportInfoList"></param>
        /// <param name="successImportInfoList"></param>
        /// <returns> A new <see cref="DataMap.BulkImportResult"/> instance for mocking. </returns>
        public static BulkImportResult BulkImportResult(IEnumerable<ImportInfo> failedImportInfoList = null, IEnumerable<ImportInfo> successImportInfoList = null)
        {
            failedImportInfoList ??= new List<ImportInfo>();
            successImportInfoList ??= new List<ImportInfo>();

            return new BulkImportResult(failedImportInfoList?.ToList(), successImportInfoList?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DataMap.ImportInfo"/>. </summary>
        /// <param name="childObjectName"></param>
        /// <param name="importStatus"></param>
        /// <param name="parentObjectName"></param>
        /// <param name="remarks"></param>
        /// <returns> A new <see cref="DataMap.ImportInfo"/> instance for mocking. </returns>
        public static ImportInfo ImportInfo(string childObjectName = null, ImportStatus? importStatus = null, string parentObjectName = null, string remarks = null)
        {
            return new ImportInfo(childObjectName, importStatus, parentObjectName, remarks, serializedAdditionalRawData: null);
        }
    }
}
