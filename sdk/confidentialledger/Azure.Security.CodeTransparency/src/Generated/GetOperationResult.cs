// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Security.CodeTransparency
{
    /// <summary> The GetOperationResult. </summary>
    public partial class GetOperationResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="GetOperationResult"/>. </summary>
        /// <param name="operationId"></param>
        /// <param name="status"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        internal GetOperationResult(string operationId, OperationStatus status)
        {
            Argument.AssertNotNull(operationId, nameof(operationId));

            OperationId = operationId;
            Status = status;
        }

        /// <summary> Initializes a new instance of <see cref="GetOperationResult"/>. </summary>
        /// <param name="entryId"></param>
        /// <param name="error"></param>
        /// <param name="operationId"></param>
        /// <param name="status"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal GetOperationResult(string entryId, string error, string operationId, OperationStatus status, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            EntryId = entryId;
            Error = error;
            OperationId = operationId;
            Status = status;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="GetOperationResult"/> for deserialization. </summary>
        internal GetOperationResult()
        {
        }

        /// <summary> Gets the entry id. </summary>
        public string EntryId { get; }
        /// <summary> Gets the error. </summary>
        public string Error { get; }
        /// <summary> Gets the operation id. </summary>
        public string OperationId { get; }
        /// <summary> Gets the status. </summary>
        public OperationStatus Status { get; }
    }
}
