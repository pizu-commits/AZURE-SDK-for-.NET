// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Security.CodeTransparency
{
    /// <summary> The JsonWebKey. </summary>
    public partial class JsonWebKey
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="JsonWebKey"/>. </summary>
        /// <param name="kty"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="kty"/> is null. </exception>
        internal JsonWebKey(string kty)
        {
            Argument.AssertNotNull(kty, nameof(kty));

            Kty = kty;
            X5c = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="JsonWebKey"/>. </summary>
        /// <param name="alg"></param>
        /// <param name="crv"></param>
        /// <param name="d"></param>
        /// <param name="dp"></param>
        /// <param name="dq"></param>
        /// <param name="e"></param>
        /// <param name="k"></param>
        /// <param name="kid"></param>
        /// <param name="kty"></param>
        /// <param name="n"></param>
        /// <param name="p"></param>
        /// <param name="q"></param>
        /// <param name="qi"></param>
        /// <param name="use"></param>
        /// <param name="x"></param>
        /// <param name="x5c"></param>
        /// <param name="y"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal JsonWebKey(string alg, string crv, string d, string dp, string dq, string e, string k, string kid, string kty, string n, string p, string q, string qi, string use, string x, IReadOnlyList<string> x5c, string y, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Alg = alg;
            Crv = crv;
            D = d;
            Dp = dp;
            Dq = dq;
            E = e;
            K = k;
            Kid = kid;
            Kty = kty;
            N = n;
            P = p;
            Q = q;
            Qi = qi;
            Use = use;
            X = x;
            X5c = x5c;
            Y = y;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="JsonWebKey"/> for deserialization. </summary>
        internal JsonWebKey()
        {
        }

        /// <summary> Gets the alg. </summary>
        public string Alg { get; }
        /// <summary> Gets the crv. </summary>
        public string Crv { get; }
        /// <summary> Gets the d. </summary>
        public string D { get; }
        /// <summary> Gets the dp. </summary>
        public string Dp { get; }
        /// <summary> Gets the dq. </summary>
        public string Dq { get; }
        /// <summary> Gets the e. </summary>
        public string E { get; }
        /// <summary> Gets the k. </summary>
        public string K { get; }
        /// <summary> Gets the kid. </summary>
        public string Kid { get; }
        /// <summary> Gets the kty. </summary>
        public string Kty { get; }
        /// <summary> Gets the n. </summary>
        public string N { get; }
        /// <summary> Gets the p. </summary>
        public string P { get; }
        /// <summary> Gets the q. </summary>
        public string Q { get; }
        /// <summary> Gets the qi. </summary>
        public string Qi { get; }
        /// <summary> Gets the use. </summary>
        public string Use { get; }
        /// <summary> Gets the x. </summary>
        public string X { get; }
        /// <summary> Gets the x 5c. </summary>
        public IReadOnlyList<string> X5c { get; }
        /// <summary> Gets the y. </summary>
        public string Y { get; }
    }
}
