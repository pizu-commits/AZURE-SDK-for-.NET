// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> The DiscoveryGroup. </summary>
    public partial class DiscoveryGroup
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DiscoveryGroup"/>. </summary>
        internal DiscoveryGroup()
        {
            Seeds = new ChangeTrackingList<DiscoverySource>();
            Names = new ChangeTrackingList<string>();
            Excludes = new ChangeTrackingList<DiscoverySource>();
        }

        /// <summary> Initializes a new instance of <see cref="DiscoveryGroup"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="displayName"></param>
        /// <param name="description"></param>
        /// <param name="tier"></param>
        /// <param name="frequencyMilliseconds"></param>
        /// <param name="seeds"></param>
        /// <param name="names"></param>
        /// <param name="excludes"></param>
        /// <param name="latestRun"></param>
        /// <param name="createdDate"></param>
        /// <param name="templateId"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DiscoveryGroup(string id, string name, string displayName, string description, string tier, long? frequencyMilliseconds, IReadOnlyList<DiscoverySource> seeds, IReadOnlyList<string> names, IReadOnlyList<DiscoverySource> excludes, DiscoveryRunResult latestRun, DateTimeOffset? createdDate, string templateId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Name = name;
            DisplayName = displayName;
            Description = description;
            Tier = tier;
            FrequencyMilliseconds = frequencyMilliseconds;
            Seeds = seeds;
            Names = names;
            Excludes = excludes;
            LatestRun = latestRun;
            CreatedDate = createdDate;
            TemplateId = templateId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the id. </summary>
        public string Id { get; }
        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets the display name. </summary>
        public string DisplayName { get; }
        /// <summary> Gets the description. </summary>
        public string Description { get; }
        /// <summary> Gets the tier. </summary>
        public string Tier { get; }
        /// <summary> Gets the frequency milliseconds. </summary>
        public long? FrequencyMilliseconds { get; }
        /// <summary> Gets the seeds. </summary>
        public IReadOnlyList<DiscoverySource> Seeds { get; }
        /// <summary> Gets the names. </summary>
        public IReadOnlyList<string> Names { get; }
        /// <summary> Gets the excludes. </summary>
        public IReadOnlyList<DiscoverySource> Excludes { get; }
        /// <summary> Gets the latest run. </summary>
        public DiscoveryRunResult LatestRun { get; }
        /// <summary> Gets the created date. </summary>
        public DateTimeOffset? CreatedDate { get; }
        /// <summary> Gets the template id. </summary>
        public string TemplateId { get; }
    }
}
