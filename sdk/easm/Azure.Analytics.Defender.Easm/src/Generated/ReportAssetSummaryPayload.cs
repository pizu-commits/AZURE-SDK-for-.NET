// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> The ReportAssetSummaryPayload. </summary>
    public partial class ReportAssetSummaryPayload
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ReportAssetSummaryPayload"/>. </summary>
        public ReportAssetSummaryPayload()
        {
            MetricCategories = new ChangeTrackingList<string>();
            Metrics = new ChangeTrackingList<string>();
            Filters = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="ReportAssetSummaryPayload"/>. </summary>
        /// <param name="metricCategories"></param>
        /// <param name="metrics"></param>
        /// <param name="filters"></param>
        /// <param name="groupBy"></param>
        /// <param name="segmentBy"></param>
        /// <param name="labelName"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ReportAssetSummaryPayload(IList<string> metricCategories, IList<string> metrics, IList<string> filters, string groupBy, string segmentBy, string labelName, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            MetricCategories = metricCategories;
            Metrics = metrics;
            Filters = filters;
            GroupBy = groupBy;
            SegmentBy = segmentBy;
            LabelName = labelName;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the metric categories. </summary>
        public IList<string> MetricCategories { get; }
        /// <summary> Gets the metrics. </summary>
        public IList<string> Metrics { get; }
        /// <summary> Gets the filters. </summary>
        public IList<string> Filters { get; }
        /// <summary> Gets or sets the group by. </summary>
        public string GroupBy { get; set; }
        /// <summary> Gets or sets the segment by. </summary>
        public string SegmentBy { get; set; }
        /// <summary> Gets or sets the label name. </summary>
        public string LabelName { get; set; }
    }
}
