// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> The DiscoveryRunResult. </summary>
    public partial class DiscoveryRunResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DiscoveryRunResult"/>. </summary>
        internal DiscoveryRunResult()
        {
            Seeds = new ChangeTrackingList<DiscoverySource>();
            Excludes = new ChangeTrackingList<DiscoverySource>();
            Names = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="DiscoveryRunResult"/>. </summary>
        /// <param name="submittedDate"></param>
        /// <param name="startedDate"></param>
        /// <param name="completedDate"></param>
        /// <param name="tier"></param>
        /// <param name="state"></param>
        /// <param name="totalAssetsFoundCount"></param>
        /// <param name="seeds"></param>
        /// <param name="excludes"></param>
        /// <param name="names"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DiscoveryRunResult(DateTimeOffset? submittedDate, DateTimeOffset? startedDate, DateTimeOffset? completedDate, string tier, DiscoRunState? state, long? totalAssetsFoundCount, IReadOnlyList<DiscoverySource> seeds, IReadOnlyList<DiscoverySource> excludes, IReadOnlyList<string> names, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SubmittedDate = submittedDate;
            StartedDate = startedDate;
            CompletedDate = completedDate;
            Tier = tier;
            State = state;
            TotalAssetsFoundCount = totalAssetsFoundCount;
            Seeds = seeds;
            Excludes = excludes;
            Names = names;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the submitted date. </summary>
        public DateTimeOffset? SubmittedDate { get; }
        /// <summary> Gets the started date. </summary>
        public DateTimeOffset? StartedDate { get; }
        /// <summary> Gets the completed date. </summary>
        public DateTimeOffset? CompletedDate { get; }
        /// <summary> Gets the tier. </summary>
        public string Tier { get; }
        /// <summary> Gets the state. </summary>
        public DiscoRunState? State { get; }
        /// <summary> Gets the total assets found count. </summary>
        public long? TotalAssetsFoundCount { get; }
        /// <summary> Gets the seeds. </summary>
        public IReadOnlyList<DiscoverySource> Seeds { get; }
        /// <summary> Gets the excludes. </summary>
        public IReadOnlyList<DiscoverySource> Excludes { get; }
        /// <summary> Gets the names. </summary>
        public IReadOnlyList<string> Names { get; }
    }
}
