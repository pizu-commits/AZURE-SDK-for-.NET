// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.DocumentIntelligence
{
    /// <summary> Model factory for models. </summary>
    public static partial class DocumentIntelligenceModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentIntelligenceError"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <param name="target"></param>
        /// <param name="details"></param>
        /// <param name="innererror"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentIntelligenceError"/> instance for mocking. </returns>
        public static DocumentIntelligenceError DocumentIntelligenceError(string code = null, string message = null, string target = null, IEnumerable<DocumentIntelligenceError> details = null, InnerError innererror = null)
        {
            details ??= new List<DocumentIntelligenceError>();

            return new DocumentIntelligenceError(
                code,
                message,
                target,
                details?.ToList(),
                innererror,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.InnerError"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <param name="innerErrorObject"></param>
        /// <returns> A new <see cref="DocumentIntelligence.InnerError"/> instance for mocking. </returns>
        public static InnerError InnerError(string code = null, string message = null, InnerError innerErrorObject = null)
        {
            return new InnerError(code, message, innerErrorObject, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.AnalyzeResult"/>. </summary>
        /// <param name="apiVersion"></param>
        /// <param name="modelId"></param>
        /// <param name="stringIndexType"></param>
        /// <param name="contentFormat"></param>
        /// <param name="content"></param>
        /// <param name="pages"></param>
        /// <param name="paragraphs"></param>
        /// <param name="tables"></param>
        /// <param name="figures"></param>
        /// <param name="sections"></param>
        /// <param name="keyValuePairs"></param>
        /// <param name="styles"></param>
        /// <param name="languages"></param>
        /// <param name="documents"></param>
        /// <param name="warnings"></param>
        /// <returns> A new <see cref="DocumentIntelligence.AnalyzeResult"/> instance for mocking. </returns>
        public static AnalyzeResult AnalyzeResult(string apiVersion = null, string modelId = null, StringIndexType stringIndexType = default, ContentFormat? contentFormat = null, string content = null, IEnumerable<DocumentPage> pages = null, IEnumerable<DocumentParagraph> paragraphs = null, IEnumerable<DocumentTable> tables = null, IEnumerable<DocumentFigure> figures = null, IEnumerable<DocumentSection> sections = null, IEnumerable<DocumentKeyValuePair> keyValuePairs = null, IEnumerable<DocumentStyle> styles = null, IEnumerable<DocumentLanguage> languages = null, IEnumerable<AnalyzedDocument> documents = null, IEnumerable<DocumentIntelligenceWarning> warnings = null)
        {
            pages ??= new List<DocumentPage>();
            paragraphs ??= new List<DocumentParagraph>();
            tables ??= new List<DocumentTable>();
            figures ??= new List<DocumentFigure>();
            sections ??= new List<DocumentSection>();
            keyValuePairs ??= new List<DocumentKeyValuePair>();
            styles ??= new List<DocumentStyle>();
            languages ??= new List<DocumentLanguage>();
            documents ??= new List<AnalyzedDocument>();
            warnings ??= new List<DocumentIntelligenceWarning>();

            return new AnalyzeResult(
                apiVersion,
                modelId,
                stringIndexType,
                contentFormat,
                content,
                pages?.ToList(),
                paragraphs?.ToList(),
                tables?.ToList(),
                figures?.ToList(),
                sections?.ToList(),
                keyValuePairs?.ToList(),
                styles?.ToList(),
                languages?.ToList(),
                documents?.ToList(),
                warnings?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentPage"/>. </summary>
        /// <param name="pageNumber"></param>
        /// <param name="angle"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="unit"></param>
        /// <param name="spans"></param>
        /// <param name="words"></param>
        /// <param name="selectionMarks"></param>
        /// <param name="lines"></param>
        /// <param name="barcodes"></param>
        /// <param name="formulas"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentPage"/> instance for mocking. </returns>
        public static DocumentPage DocumentPage(int pageNumber = default, float? angle = null, float? width = null, float? height = null, LengthUnit? unit = null, IEnumerable<DocumentSpan> spans = null, IEnumerable<DocumentWord> words = null, IEnumerable<DocumentSelectionMark> selectionMarks = null, IEnumerable<DocumentLine> lines = null, IEnumerable<DocumentBarcode> barcodes = null, IEnumerable<DocumentFormula> formulas = null)
        {
            spans ??= new List<DocumentSpan>();
            words ??= new List<DocumentWord>();
            selectionMarks ??= new List<DocumentSelectionMark>();
            lines ??= new List<DocumentLine>();
            barcodes ??= new List<DocumentBarcode>();
            formulas ??= new List<DocumentFormula>();

            return new DocumentPage(
                pageNumber,
                angle,
                width,
                height,
                unit,
                spans?.ToList(),
                words?.ToList(),
                selectionMarks?.ToList(),
                lines?.ToList(),
                barcodes?.ToList(),
                formulas?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentSpan"/>. </summary>
        /// <param name="offset"></param>
        /// <param name="length"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentSpan"/> instance for mocking. </returns>
        public static DocumentSpan DocumentSpan(int offset = default, int length = default)
        {
            return new DocumentSpan(offset, length, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentWord"/>. </summary>
        /// <param name="content"></param>
        /// <param name="polygon"></param>
        /// <param name="span"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentWord"/> instance for mocking. </returns>
        public static DocumentWord DocumentWord(string content = null, IEnumerable<float> polygon = null, DocumentSpan span = null, float confidence = default)
        {
            polygon ??= new List<float>();

            return new DocumentWord(content, polygon?.ToList(), span, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentSelectionMark"/>. </summary>
        /// <param name="state"></param>
        /// <param name="polygon"></param>
        /// <param name="span"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentSelectionMark"/> instance for mocking. </returns>
        public static DocumentSelectionMark DocumentSelectionMark(DocumentSelectionMarkState state = default, IEnumerable<float> polygon = null, DocumentSpan span = null, float confidence = default)
        {
            polygon ??= new List<float>();

            return new DocumentSelectionMark(state, polygon?.ToList(), span, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentLine"/>. </summary>
        /// <param name="content"></param>
        /// <param name="polygon"></param>
        /// <param name="spans"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentLine"/> instance for mocking. </returns>
        public static DocumentLine DocumentLine(string content = null, IEnumerable<float> polygon = null, IEnumerable<DocumentSpan> spans = null)
        {
            polygon ??= new List<float>();
            spans ??= new List<DocumentSpan>();

            return new DocumentLine(content, polygon?.ToList(), spans?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentBarcode"/>. </summary>
        /// <param name="kind"></param>
        /// <param name="value"></param>
        /// <param name="polygon"></param>
        /// <param name="span"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentBarcode"/> instance for mocking. </returns>
        public static DocumentBarcode DocumentBarcode(DocumentBarcodeKind kind = default, string value = null, IEnumerable<float> polygon = null, DocumentSpan span = null, float confidence = default)
        {
            polygon ??= new List<float>();

            return new DocumentBarcode(
                kind,
                value,
                polygon?.ToList(),
                span,
                confidence,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentFormula"/>. </summary>
        /// <param name="kind"></param>
        /// <param name="value"></param>
        /// <param name="polygon"></param>
        /// <param name="span"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentFormula"/> instance for mocking. </returns>
        public static DocumentFormula DocumentFormula(DocumentFormulaKind kind = default, string value = null, IEnumerable<float> polygon = null, DocumentSpan span = null, float confidence = default)
        {
            polygon ??= new List<float>();

            return new DocumentFormula(
                kind,
                value,
                polygon?.ToList(),
                span,
                confidence,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentParagraph"/>. </summary>
        /// <param name="role"></param>
        /// <param name="content"></param>
        /// <param name="boundingRegions"></param>
        /// <param name="spans"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentParagraph"/> instance for mocking. </returns>
        public static DocumentParagraph DocumentParagraph(ParagraphRole? role = null, string content = null, IEnumerable<BoundingRegion> boundingRegions = null, IEnumerable<DocumentSpan> spans = null)
        {
            boundingRegions ??= new List<BoundingRegion>();
            spans ??= new List<DocumentSpan>();

            return new DocumentParagraph(role, content, boundingRegions?.ToList(), spans?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.BoundingRegion"/>. </summary>
        /// <param name="pageNumber"></param>
        /// <param name="polygon"></param>
        /// <returns> A new <see cref="DocumentIntelligence.BoundingRegion"/> instance for mocking. </returns>
        public static BoundingRegion BoundingRegion(int pageNumber = default, IEnumerable<float> polygon = null)
        {
            polygon ??= new List<float>();

            return new BoundingRegion(pageNumber, polygon?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentTable"/>. </summary>
        /// <param name="rowCount"></param>
        /// <param name="columnCount"></param>
        /// <param name="cells"></param>
        /// <param name="boundingRegions"></param>
        /// <param name="spans"></param>
        /// <param name="caption"></param>
        /// <param name="footnotes"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentTable"/> instance for mocking. </returns>
        public static DocumentTable DocumentTable(int rowCount = default, int columnCount = default, IEnumerable<DocumentTableCell> cells = null, IEnumerable<BoundingRegion> boundingRegions = null, IEnumerable<DocumentSpan> spans = null, DocumentCaption caption = null, IEnumerable<DocumentFootnote> footnotes = null)
        {
            cells ??= new List<DocumentTableCell>();
            boundingRegions ??= new List<BoundingRegion>();
            spans ??= new List<DocumentSpan>();
            footnotes ??= new List<DocumentFootnote>();

            return new DocumentTable(
                rowCount,
                columnCount,
                cells?.ToList(),
                boundingRegions?.ToList(),
                spans?.ToList(),
                caption,
                footnotes?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentTableCell"/>. </summary>
        /// <param name="kind"></param>
        /// <param name="rowIndex"></param>
        /// <param name="columnIndex"></param>
        /// <param name="rowSpan"></param>
        /// <param name="columnSpan"></param>
        /// <param name="content"></param>
        /// <param name="boundingRegions"></param>
        /// <param name="spans"></param>
        /// <param name="elements"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentTableCell"/> instance for mocking. </returns>
        public static DocumentTableCell DocumentTableCell(DocumentTableCellKind? kind = null, int rowIndex = default, int columnIndex = default, int? rowSpan = null, int? columnSpan = null, string content = null, IEnumerable<BoundingRegion> boundingRegions = null, IEnumerable<DocumentSpan> spans = null, IEnumerable<string> elements = null)
        {
            boundingRegions ??= new List<BoundingRegion>();
            spans ??= new List<DocumentSpan>();
            elements ??= new List<string>();

            return new DocumentTableCell(
                kind,
                rowIndex,
                columnIndex,
                rowSpan,
                columnSpan,
                content,
                boundingRegions?.ToList(),
                spans?.ToList(),
                elements?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentCaption"/>. </summary>
        /// <param name="content"></param>
        /// <param name="boundingRegions"></param>
        /// <param name="spans"></param>
        /// <param name="elements"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentCaption"/> instance for mocking. </returns>
        public static DocumentCaption DocumentCaption(string content = null, IEnumerable<BoundingRegion> boundingRegions = null, IEnumerable<DocumentSpan> spans = null, IEnumerable<string> elements = null)
        {
            boundingRegions ??= new List<BoundingRegion>();
            spans ??= new List<DocumentSpan>();
            elements ??= new List<string>();

            return new DocumentCaption(content, boundingRegions?.ToList(), spans?.ToList(), elements?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentFootnote"/>. </summary>
        /// <param name="content"></param>
        /// <param name="boundingRegions"></param>
        /// <param name="spans"></param>
        /// <param name="elements"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentFootnote"/> instance for mocking. </returns>
        public static DocumentFootnote DocumentFootnote(string content = null, IEnumerable<BoundingRegion> boundingRegions = null, IEnumerable<DocumentSpan> spans = null, IEnumerable<string> elements = null)
        {
            boundingRegions ??= new List<BoundingRegion>();
            spans ??= new List<DocumentSpan>();
            elements ??= new List<string>();

            return new DocumentFootnote(content, boundingRegions?.ToList(), spans?.ToList(), elements?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentFigure"/>. </summary>
        /// <param name="boundingRegions"></param>
        /// <param name="spans"></param>
        /// <param name="elements"></param>
        /// <param name="caption"></param>
        /// <param name="footnotes"></param>
        /// <param name="id"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentFigure"/> instance for mocking. </returns>
        public static DocumentFigure DocumentFigure(IEnumerable<BoundingRegion> boundingRegions = null, IEnumerable<DocumentSpan> spans = null, IEnumerable<string> elements = null, DocumentCaption caption = null, IEnumerable<DocumentFootnote> footnotes = null, string id = null)
        {
            boundingRegions ??= new List<BoundingRegion>();
            spans ??= new List<DocumentSpan>();
            elements ??= new List<string>();
            footnotes ??= new List<DocumentFootnote>();

            return new DocumentFigure(
                boundingRegions?.ToList(),
                spans?.ToList(),
                elements?.ToList(),
                caption,
                footnotes?.ToList(),
                id,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentSection"/>. </summary>
        /// <param name="spans"></param>
        /// <param name="elements"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentSection"/> instance for mocking. </returns>
        public static DocumentSection DocumentSection(IEnumerable<DocumentSpan> spans = null, IEnumerable<string> elements = null)
        {
            spans ??= new List<DocumentSpan>();
            elements ??= new List<string>();

            return new DocumentSection(spans?.ToList(), elements?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentKeyValuePair"/>. </summary>
        /// <param name="key"></param>
        /// <param name="value"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentKeyValuePair"/> instance for mocking. </returns>
        public static DocumentKeyValuePair DocumentKeyValuePair(DocumentKeyValueElement key = null, DocumentKeyValueElement value = null, float confidence = default)
        {
            return new DocumentKeyValuePair(key, value, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentKeyValueElement"/>. </summary>
        /// <param name="content"></param>
        /// <param name="boundingRegions"></param>
        /// <param name="spans"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentKeyValueElement"/> instance for mocking. </returns>
        public static DocumentKeyValueElement DocumentKeyValueElement(string content = null, IEnumerable<BoundingRegion> boundingRegions = null, IEnumerable<DocumentSpan> spans = null)
        {
            boundingRegions ??= new List<BoundingRegion>();
            spans ??= new List<DocumentSpan>();

            return new DocumentKeyValueElement(content, boundingRegions?.ToList(), spans?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentStyle"/>. </summary>
        /// <param name="isHandwritten"></param>
        /// <param name="similarFontFamily"></param>
        /// <param name="fontStyle"></param>
        /// <param name="fontWeight"></param>
        /// <param name="color"></param>
        /// <param name="backgroundColor"></param>
        /// <param name="spans"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentStyle"/> instance for mocking. </returns>
        public static DocumentStyle DocumentStyle(bool? isHandwritten = null, string similarFontFamily = null, DocumentFontStyle? fontStyle = null, DocumentFontWeight? fontWeight = null, string color = null, string backgroundColor = null, IEnumerable<DocumentSpan> spans = null, float confidence = default)
        {
            spans ??= new List<DocumentSpan>();

            return new DocumentStyle(
                isHandwritten,
                similarFontFamily,
                fontStyle,
                fontWeight,
                color,
                backgroundColor,
                spans?.ToList(),
                confidence,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentLanguage"/>. </summary>
        /// <param name="locale"></param>
        /// <param name="spans"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentLanguage"/> instance for mocking. </returns>
        public static DocumentLanguage DocumentLanguage(string locale = null, IEnumerable<DocumentSpan> spans = null, float confidence = default)
        {
            spans ??= new List<DocumentSpan>();

            return new DocumentLanguage(locale, spans?.ToList(), confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.AnalyzedDocument"/>. </summary>
        /// <param name="docType"></param>
        /// <param name="boundingRegions"></param>
        /// <param name="spans"></param>
        /// <param name="fields"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="DocumentIntelligence.AnalyzedDocument"/> instance for mocking. </returns>
        public static AnalyzedDocument AnalyzedDocument(string docType = null, IEnumerable<BoundingRegion> boundingRegions = null, IEnumerable<DocumentSpan> spans = null, IReadOnlyDictionary<string, DocumentField> fields = null, float confidence = default)
        {
            boundingRegions ??= new List<BoundingRegion>();
            spans ??= new List<DocumentSpan>();
            fields ??= new Dictionary<string, DocumentField>();

            return new AnalyzedDocument(
                docType,
                boundingRegions?.ToList(),
                spans?.ToList(),
                fields,
                confidence,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentField"/>. </summary>
        /// <param name="type"></param>
        /// <param name="valueString"></param>
        /// <param name="valueDate"></param>
        /// <param name="valueTime"></param>
        /// <param name="valuePhoneNumber"></param>
        /// <param name="valueDouble"></param>
        /// <param name="valueLong"></param>
        /// <param name="valueSelectionMark"></param>
        /// <param name="valueSignature"></param>
        /// <param name="valueCountryRegion"></param>
        /// <param name="valueList"></param>
        /// <param name="valueDictionary"></param>
        /// <param name="valueCurrency"></param>
        /// <param name="valueAddress"></param>
        /// <param name="valueBoolean"></param>
        /// <param name="valueSelectionGroup"></param>
        /// <param name="content"></param>
        /// <param name="boundingRegions"></param>
        /// <param name="spans"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentField"/> instance for mocking. </returns>
        public static DocumentField DocumentField(DocumentFieldType type = default, string valueString = null, DateTimeOffset? valueDate = null, TimeSpan? valueTime = null, string valuePhoneNumber = null, double? valueDouble = null, long? valueLong = null, DocumentSelectionMarkState? valueSelectionMark = null, DocumentSignatureType? valueSignature = null, string valueCountryRegion = null, IEnumerable<DocumentField> valueList = null, IReadOnlyDictionary<string, DocumentField> valueDictionary = null, CurrencyValue valueCurrency = null, AddressValue valueAddress = null, bool? valueBoolean = null, IEnumerable<string> valueSelectionGroup = null, string content = null, IEnumerable<BoundingRegion> boundingRegions = null, IEnumerable<DocumentSpan> spans = null, float? confidence = null)
        {
            valueList ??= new List<DocumentField>();
            valueDictionary ??= new Dictionary<string, DocumentField>();
            valueSelectionGroup ??= new List<string>();
            boundingRegions ??= new List<BoundingRegion>();
            spans ??= new List<DocumentSpan>();

            return new DocumentField(
                type,
                valueString,
                valueDate,
                valueTime,
                valuePhoneNumber,
                valueDouble,
                valueLong,
                valueSelectionMark,
                valueSignature,
                valueCountryRegion,
                valueList?.ToList(),
                valueDictionary,
                valueCurrency,
                valueAddress,
                valueBoolean,
                valueSelectionGroup?.ToList(),
                content,
                boundingRegions?.ToList(),
                spans?.ToList(),
                confidence,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.CurrencyValue"/>. </summary>
        /// <param name="amount"></param>
        /// <param name="currencySymbol"></param>
        /// <param name="currencyCode"></param>
        /// <returns> A new <see cref="DocumentIntelligence.CurrencyValue"/> instance for mocking. </returns>
        public static CurrencyValue CurrencyValue(double amount = default, string currencySymbol = null, string currencyCode = null)
        {
            return new CurrencyValue(amount, currencySymbol, currencyCode, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.AddressValue"/>. </summary>
        /// <param name="houseNumber"></param>
        /// <param name="poBox"></param>
        /// <param name="road"></param>
        /// <param name="city"></param>
        /// <param name="state"></param>
        /// <param name="postalCode"></param>
        /// <param name="countryRegion"></param>
        /// <param name="streetAddress"></param>
        /// <param name="unit"></param>
        /// <param name="cityDistrict"></param>
        /// <param name="stateDistrict"></param>
        /// <param name="suburb"></param>
        /// <param name="house"></param>
        /// <param name="level"></param>
        /// <returns> A new <see cref="DocumentIntelligence.AddressValue"/> instance for mocking. </returns>
        public static AddressValue AddressValue(string houseNumber = null, string poBox = null, string road = null, string city = null, string state = null, string postalCode = null, string countryRegion = null, string streetAddress = null, string unit = null, string cityDistrict = null, string stateDistrict = null, string suburb = null, string house = null, string level = null)
        {
            return new AddressValue(
                houseNumber,
                poBox,
                road,
                city,
                state,
                postalCode,
                countryRegion,
                streetAddress,
                unit,
                cityDistrict,
                stateDistrict,
                suburb,
                house,
                level,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentIntelligenceWarning"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <param name="target"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentIntelligenceWarning"/> instance for mocking. </returns>
        public static DocumentIntelligenceWarning DocumentIntelligenceWarning(string code = null, string message = null, string target = null)
        {
            return new DocumentIntelligenceWarning(code, message, target, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.AnalyzeBatchDocumentsContent"/>. </summary>
        /// <param name="azureBlobSource"></param>
        /// <param name="azureBlobFileListSource"></param>
        /// <param name="resultContainerUrl"></param>
        /// <param name="resultPrefix"></param>
        /// <param name="overwriteExisting"></param>
        /// <returns> A new <see cref="DocumentIntelligence.AnalyzeBatchDocumentsContent"/> instance for mocking. </returns>
        public static AnalyzeBatchDocumentsContent AnalyzeBatchDocumentsContent(AzureBlobContentSource azureBlobSource = null, AzureBlobFileListContentSource azureBlobFileListSource = null, Uri resultContainerUrl = null, string resultPrefix = null, bool? overwriteExisting = null)
        {
            return new AnalyzeBatchDocumentsContent(
                azureBlobSource,
                azureBlobFileListSource,
                resultContainerUrl,
                resultPrefix,
                overwriteExisting,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.AnalyzeBatchResult"/>. </summary>
        /// <param name="succeededCount"></param>
        /// <param name="failedCount"></param>
        /// <param name="skippedCount"></param>
        /// <param name="details"></param>
        /// <returns> A new <see cref="DocumentIntelligence.AnalyzeBatchResult"/> instance for mocking. </returns>
        public static AnalyzeBatchResult AnalyzeBatchResult(int succeededCount = default, int failedCount = default, int skippedCount = default, IEnumerable<AnalyzeBatchOperationDetail> details = null)
        {
            details ??= new List<AnalyzeBatchOperationDetail>();

            return new AnalyzeBatchResult(succeededCount, failedCount, skippedCount, details?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.AnalyzeBatchOperationDetail"/>. </summary>
        /// <param name="status"></param>
        /// <param name="sourceUrl"></param>
        /// <param name="resultUrl"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="DocumentIntelligence.AnalyzeBatchOperationDetail"/> instance for mocking. </returns>
        public static AnalyzeBatchOperationDetail AnalyzeBatchOperationDetail(OperationStatus status = default, Uri sourceUrl = null, Uri resultUrl = null, DocumentIntelligenceError error = null)
        {
            return new AnalyzeBatchOperationDetail(status, sourceUrl, resultUrl, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.BuildDocumentModelContent"/>. </summary>
        /// <param name="modelId"></param>
        /// <param name="description"></param>
        /// <param name="buildMode"></param>
        /// <param name="azureBlobSource"></param>
        /// <param name="azureBlobFileListSource"></param>
        /// <param name="tags"></param>
        /// <param name="maxTrainingHours"></param>
        /// <param name="allowOverwrite"></param>
        /// <returns> A new <see cref="DocumentIntelligence.BuildDocumentModelContent"/> instance for mocking. </returns>
        public static BuildDocumentModelContent BuildDocumentModelContent(string modelId = null, string description = null, DocumentBuildMode buildMode = default, AzureBlobContentSource azureBlobSource = null, AzureBlobFileListContentSource azureBlobFileListSource = null, IDictionary<string, string> tags = null, float? maxTrainingHours = null, bool? allowOverwrite = null)
        {
            tags ??= new Dictionary<string, string>();

            return new BuildDocumentModelContent(
                modelId,
                description,
                buildMode,
                azureBlobSource,
                azureBlobFileListSource,
                tags,
                maxTrainingHours,
                allowOverwrite,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentModelDetails"/>. </summary>
        /// <param name="modelId"></param>
        /// <param name="description"></param>
        /// <param name="createdOn"></param>
        /// <param name="expiresOn"></param>
        /// <param name="apiVersion"></param>
        /// <param name="tags"></param>
        /// <param name="buildMode"></param>
        /// <param name="azureBlobSource"></param>
        /// <param name="azureBlobFileListSource"></param>
        /// <param name="classifierId"></param>
        /// <param name="split"></param>
        /// <param name="docTypes"></param>
        /// <param name="warnings"></param>
        /// <param name="trainingHours"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentModelDetails"/> instance for mocking. </returns>
        public static DocumentModelDetails DocumentModelDetails(string modelId = null, string description = null, DateTimeOffset createdOn = default, DateTimeOffset? expiresOn = null, string apiVersion = null, IReadOnlyDictionary<string, string> tags = null, DocumentBuildMode? buildMode = null, AzureBlobContentSource azureBlobSource = null, AzureBlobFileListContentSource azureBlobFileListSource = null, string classifierId = null, SplitMode? split = null, IReadOnlyDictionary<string, DocumentTypeDetails> docTypes = null, IEnumerable<DocumentIntelligenceWarning> warnings = null, float? trainingHours = null)
        {
            tags ??= new Dictionary<string, string>();
            docTypes ??= new Dictionary<string, DocumentTypeDetails>();
            warnings ??= new List<DocumentIntelligenceWarning>();

            return new DocumentModelDetails(
                modelId,
                description,
                createdOn,
                expiresOn,
                apiVersion,
                tags,
                buildMode,
                azureBlobSource,
                azureBlobFileListSource,
                classifierId,
                split,
                docTypes,
                warnings?.ToList(),
                trainingHours,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentModelBuildOperationDetails"/>. </summary>
        /// <param name="operationId"></param>
        /// <param name="status"></param>
        /// <param name="percentCompleted"></param>
        /// <param name="createdOn"></param>
        /// <param name="lastUpdatedOn"></param>
        /// <param name="resourceLocation"></param>
        /// <param name="apiVersion"></param>
        /// <param name="tags"></param>
        /// <param name="error"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentModelBuildOperationDetails"/> instance for mocking. </returns>
        public static DocumentModelBuildOperationDetails DocumentModelBuildOperationDetails(string operationId = null, OperationStatus status = default, int? percentCompleted = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, Uri resourceLocation = null, string apiVersion = null, IReadOnlyDictionary<string, string> tags = null, DocumentIntelligenceError error = null, DocumentModelDetails result = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DocumentModelBuildOperationDetails(
                operationId,
                status,
                percentCompleted,
                createdOn,
                lastUpdatedOn,
                OperationKind.DocumentModelBuild,
                resourceLocation,
                apiVersion,
                tags,
                error,
                serializedAdditionalRawData: null,
                result);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.OperationDetails"/>. </summary>
        /// <param name="operationId"></param>
        /// <param name="status"></param>
        /// <param name="percentCompleted"></param>
        /// <param name="createdOn"></param>
        /// <param name="lastUpdatedOn"></param>
        /// <param name="kind"></param>
        /// <param name="resourceLocation"></param>
        /// <param name="apiVersion"></param>
        /// <param name="tags"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="DocumentIntelligence.OperationDetails"/> instance for mocking. </returns>
        public static OperationDetails OperationDetails(string operationId = null, OperationStatus status = default, int? percentCompleted = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, string kind = null, Uri resourceLocation = null, string apiVersion = null, IReadOnlyDictionary<string, string> tags = null, DocumentIntelligenceError error = null)
        {
            tags ??= new Dictionary<string, string>();

            return new UnknownOperationDetails(
                operationId,
                status,
                percentCompleted,
                createdOn,
                lastUpdatedOn,
                kind == null ? default : new OperationKind(kind),
                resourceLocation,
                apiVersion,
                tags,
                error,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentModelComposeOperationDetails"/>. </summary>
        /// <param name="operationId"></param>
        /// <param name="status"></param>
        /// <param name="percentCompleted"></param>
        /// <param name="createdOn"></param>
        /// <param name="lastUpdatedOn"></param>
        /// <param name="resourceLocation"></param>
        /// <param name="apiVersion"></param>
        /// <param name="tags"></param>
        /// <param name="error"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentModelComposeOperationDetails"/> instance for mocking. </returns>
        public static DocumentModelComposeOperationDetails DocumentModelComposeOperationDetails(string operationId = null, OperationStatus status = default, int? percentCompleted = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, Uri resourceLocation = null, string apiVersion = null, IReadOnlyDictionary<string, string> tags = null, DocumentIntelligenceError error = null, DocumentModelDetails result = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DocumentModelComposeOperationDetails(
                operationId,
                status,
                percentCompleted,
                createdOn,
                lastUpdatedOn,
                OperationKind.DocumentModelCompose,
                resourceLocation,
                apiVersion,
                tags,
                error,
                serializedAdditionalRawData: null,
                result);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentModelCopyToOperationDetails"/>. </summary>
        /// <param name="operationId"></param>
        /// <param name="status"></param>
        /// <param name="percentCompleted"></param>
        /// <param name="createdOn"></param>
        /// <param name="lastUpdatedOn"></param>
        /// <param name="resourceLocation"></param>
        /// <param name="apiVersion"></param>
        /// <param name="tags"></param>
        /// <param name="error"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentModelCopyToOperationDetails"/> instance for mocking. </returns>
        public static DocumentModelCopyToOperationDetails DocumentModelCopyToOperationDetails(string operationId = null, OperationStatus status = default, int? percentCompleted = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, Uri resourceLocation = null, string apiVersion = null, IReadOnlyDictionary<string, string> tags = null, DocumentIntelligenceError error = null, DocumentModelDetails result = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DocumentModelCopyToOperationDetails(
                operationId,
                status,
                percentCompleted,
                createdOn,
                lastUpdatedOn,
                OperationKind.DocumentModelCopyTo,
                resourceLocation,
                apiVersion,
                tags,
                error,
                serializedAdditionalRawData: null,
                result);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentClassifierCopyToOperationDetails"/>. </summary>
        /// <param name="operationId"></param>
        /// <param name="status"></param>
        /// <param name="percentCompleted"></param>
        /// <param name="createdOn"></param>
        /// <param name="lastUpdatedOn"></param>
        /// <param name="resourceLocation"></param>
        /// <param name="apiVersion"></param>
        /// <param name="tags"></param>
        /// <param name="error"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentClassifierCopyToOperationDetails"/> instance for mocking. </returns>
        public static DocumentClassifierCopyToOperationDetails DocumentClassifierCopyToOperationDetails(string operationId = null, OperationStatus status = default, int? percentCompleted = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, Uri resourceLocation = null, string apiVersion = null, IReadOnlyDictionary<string, string> tags = null, DocumentIntelligenceError error = null, DocumentClassifierDetails result = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DocumentClassifierCopyToOperationDetails(
                operationId,
                status,
                percentCompleted,
                createdOn,
                lastUpdatedOn,
                OperationKind.DocumentClassifierCopyTo,
                resourceLocation,
                apiVersion,
                tags,
                error,
                serializedAdditionalRawData: null,
                result);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentClassifierDetails"/>. </summary>
        /// <param name="classifierId"></param>
        /// <param name="description"></param>
        /// <param name="createdOn"></param>
        /// <param name="expiresOn"></param>
        /// <param name="apiVersion"></param>
        /// <param name="baseClassifierId"></param>
        /// <param name="docTypes"></param>
        /// <param name="warnings"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentClassifierDetails"/> instance for mocking. </returns>
        public static DocumentClassifierDetails DocumentClassifierDetails(string classifierId = null, string description = null, DateTimeOffset createdOn = default, DateTimeOffset? expiresOn = null, string apiVersion = null, string baseClassifierId = null, IReadOnlyDictionary<string, ClassifierDocumentTypeDetails> docTypes = null, IEnumerable<DocumentIntelligenceWarning> warnings = null)
        {
            docTypes ??= new Dictionary<string, ClassifierDocumentTypeDetails>();
            warnings ??= new List<DocumentIntelligenceWarning>();

            return new DocumentClassifierDetails(
                classifierId,
                description,
                createdOn,
                expiresOn,
                apiVersion,
                baseClassifierId,
                docTypes,
                warnings?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.DocumentClassifierBuildOperationDetails"/>. </summary>
        /// <param name="operationId"></param>
        /// <param name="status"></param>
        /// <param name="percentCompleted"></param>
        /// <param name="createdOn"></param>
        /// <param name="lastUpdatedOn"></param>
        /// <param name="resourceLocation"></param>
        /// <param name="apiVersion"></param>
        /// <param name="tags"></param>
        /// <param name="error"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="DocumentIntelligence.DocumentClassifierBuildOperationDetails"/> instance for mocking. </returns>
        public static DocumentClassifierBuildOperationDetails DocumentClassifierBuildOperationDetails(string operationId = null, OperationStatus status = default, int? percentCompleted = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, Uri resourceLocation = null, string apiVersion = null, IReadOnlyDictionary<string, string> tags = null, DocumentIntelligenceError error = null, DocumentClassifierDetails result = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DocumentClassifierBuildOperationDetails(
                operationId,
                status,
                percentCompleted,
                createdOn,
                lastUpdatedOn,
                OperationKind.DocumentClassifierBuild,
                resourceLocation,
                apiVersion,
                tags,
                error,
                serializedAdditionalRawData: null,
                result);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.ComposeDocumentModelContent"/>. </summary>
        /// <param name="modelId"></param>
        /// <param name="description"></param>
        /// <param name="classifierId"></param>
        /// <param name="split"></param>
        /// <param name="docTypes"></param>
        /// <param name="tags"></param>
        /// <returns> A new <see cref="DocumentIntelligence.ComposeDocumentModelContent"/> instance for mocking. </returns>
        public static ComposeDocumentModelContent ComposeDocumentModelContent(string modelId = null, string description = null, string classifierId = null, SplitMode? split = null, IDictionary<string, DocumentTypeDetails> docTypes = null, IDictionary<string, string> tags = null)
        {
            docTypes ??= new Dictionary<string, DocumentTypeDetails>();
            tags ??= new Dictionary<string, string>();

            return new ComposeDocumentModelContent(
                modelId,
                description,
                classifierId,
                split,
                docTypes,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.AuthorizeCopyContent"/>. </summary>
        /// <param name="modelId"></param>
        /// <param name="description"></param>
        /// <param name="tags"></param>
        /// <returns> A new <see cref="DocumentIntelligence.AuthorizeCopyContent"/> instance for mocking. </returns>
        public static AuthorizeCopyContent AuthorizeCopyContent(string modelId = null, string description = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new AuthorizeCopyContent(modelId, description, tags, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.ResourceDetails"/>. </summary>
        /// <param name="customDocumentModels"></param>
        /// <returns> A new <see cref="DocumentIntelligence.ResourceDetails"/> instance for mocking. </returns>
        public static ResourceDetails ResourceDetails(CustomDocumentModelsDetails customDocumentModels = null)
        {
            return new ResourceDetails(customDocumentModels, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.CustomDocumentModelsDetails"/>. </summary>
        /// <param name="count"></param>
        /// <param name="limit"></param>
        /// <returns> A new <see cref="DocumentIntelligence.CustomDocumentModelsDetails"/> instance for mocking. </returns>
        public static CustomDocumentModelsDetails CustomDocumentModelsDetails(int count = default, int limit = default)
        {
            return new CustomDocumentModelsDetails(count, limit, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.BuildDocumentClassifierContent"/>. </summary>
        /// <param name="classifierId"></param>
        /// <param name="description"></param>
        /// <param name="baseClassifierId"></param>
        /// <param name="docTypes"></param>
        /// <param name="allowOverwrite"></param>
        /// <returns> A new <see cref="DocumentIntelligence.BuildDocumentClassifierContent"/> instance for mocking. </returns>
        public static BuildDocumentClassifierContent BuildDocumentClassifierContent(string classifierId = null, string description = null, string baseClassifierId = null, IDictionary<string, ClassifierDocumentTypeDetails> docTypes = null, bool? allowOverwrite = null)
        {
            docTypes ??= new Dictionary<string, ClassifierDocumentTypeDetails>();

            return new BuildDocumentClassifierContent(
                classifierId,
                description,
                baseClassifierId,
                docTypes,
                allowOverwrite,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligence.AuthorizeClassifierCopyContent"/>. </summary>
        /// <param name="classifierId"></param>
        /// <param name="description"></param>
        /// <param name="tags"></param>
        /// <returns> A new <see cref="DocumentIntelligence.AuthorizeClassifierCopyContent"/> instance for mocking. </returns>
        public static AuthorizeClassifierCopyContent AuthorizeClassifierCopyContent(string classifierId = null, string description = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new AuthorizeClassifierCopyContent(classifierId, description, tags, serializedAdditionalRawData: null);
        }
    }
}
