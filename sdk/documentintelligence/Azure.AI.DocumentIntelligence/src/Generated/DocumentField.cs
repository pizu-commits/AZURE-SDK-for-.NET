// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.DocumentIntelligence
{
    /// <summary> The DocumentField. </summary>
    public partial class DocumentField
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DocumentField"/>. </summary>
        /// <param name="type"></param>
        internal DocumentField(DocumentFieldType type)
        {
            Type = type;
            ValueList = new ChangeTrackingList<DocumentField>();
            ValueDictionary = new ChangeTrackingDictionary<string, DocumentField>();
            ValueSelectionGroup = new ChangeTrackingList<string>();
            BoundingRegions = new ChangeTrackingList<BoundingRegion>();
            Spans = new ChangeTrackingList<DocumentSpan>();
        }

        /// <summary> Initializes a new instance of <see cref="DocumentField"/>. </summary>
        /// <param name="type"></param>
        /// <param name="valueString"></param>
        /// <param name="valueDate"></param>
        /// <param name="valueTime"></param>
        /// <param name="valuePhoneNumber"></param>
        /// <param name="valueDouble"></param>
        /// <param name="valueLong"></param>
        /// <param name="valueSelectionMark"></param>
        /// <param name="valueSignature"></param>
        /// <param name="valueCountryRegion"></param>
        /// <param name="valueList"></param>
        /// <param name="valueDictionary"></param>
        /// <param name="valueCurrency"></param>
        /// <param name="valueAddress"></param>
        /// <param name="valueBoolean"></param>
        /// <param name="valueSelectionGroup"></param>
        /// <param name="content"></param>
        /// <param name="boundingRegions"></param>
        /// <param name="spans"></param>
        /// <param name="confidence"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DocumentField(DocumentFieldType type, string valueString, DateTimeOffset? valueDate, TimeSpan? valueTime, string valuePhoneNumber, double? valueDouble, long? valueLong, DocumentSelectionMarkState? valueSelectionMark, DocumentSignatureType? valueSignature, string valueCountryRegion, IReadOnlyList<DocumentField> valueList, IReadOnlyDictionary<string, DocumentField> valueDictionary, CurrencyValue valueCurrency, AddressValue valueAddress, bool? valueBoolean, IReadOnlyList<string> valueSelectionGroup, string content, IReadOnlyList<BoundingRegion> boundingRegions, IReadOnlyList<DocumentSpan> spans, float? confidence, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            ValueString = valueString;
            ValueDate = valueDate;
            ValueTime = valueTime;
            ValuePhoneNumber = valuePhoneNumber;
            ValueDouble = valueDouble;
            ValueLong = valueLong;
            ValueSelectionMark = valueSelectionMark;
            ValueSignature = valueSignature;
            ValueCountryRegion = valueCountryRegion;
            ValueList = valueList;
            ValueDictionary = valueDictionary;
            ValueCurrency = valueCurrency;
            ValueAddress = valueAddress;
            ValueBoolean = valueBoolean;
            ValueSelectionGroup = valueSelectionGroup;
            Content = content;
            BoundingRegions = boundingRegions;
            Spans = spans;
            Confidence = confidence;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DocumentField"/> for deserialization. </summary>
        internal DocumentField()
        {
        }

        /// <summary> Gets the type. </summary>
        public DocumentFieldType Type { get; }
        /// <summary> Gets the value string. </summary>
        public string ValueString { get; }
        /// <summary> Gets the value date. </summary>
        public DateTimeOffset? ValueDate { get; }
        /// <summary> Gets the value time. </summary>
        public TimeSpan? ValueTime { get; }
        /// <summary> Gets the value phone number. </summary>
        public string ValuePhoneNumber { get; }
        /// <summary> Gets the value double. </summary>
        public double? ValueDouble { get; }
        /// <summary> Gets the value long. </summary>
        public long? ValueLong { get; }
        /// <summary> Gets the value selection mark. </summary>
        public DocumentSelectionMarkState? ValueSelectionMark { get; }
        /// <summary> Gets the value signature. </summary>
        public DocumentSignatureType? ValueSignature { get; }
        /// <summary> Gets the value country region. </summary>
        public string ValueCountryRegion { get; }
        /// <summary> Gets the value list. </summary>
        public IReadOnlyList<DocumentField> ValueList { get; }
        /// <summary> Gets the value dictionary. </summary>
        public IReadOnlyDictionary<string, DocumentField> ValueDictionary { get; }
        /// <summary> Gets the value currency. </summary>
        public CurrencyValue ValueCurrency { get; }
        /// <summary> Gets the value address. </summary>
        public AddressValue ValueAddress { get; }
        /// <summary> Gets the value boolean. </summary>
        public bool? ValueBoolean { get; }
        /// <summary> Gets the value selection group. </summary>
        public IReadOnlyList<string> ValueSelectionGroup { get; }
        /// <summary> Gets the content. </summary>
        public string Content { get; }
        /// <summary> Gets the bounding regions. </summary>
        public IReadOnlyList<BoundingRegion> BoundingRegions { get; }
        /// <summary> Gets the spans. </summary>
        public IReadOnlyList<DocumentSpan> Spans { get; }
        /// <summary> Gets the confidence. </summary>
        public float? Confidence { get; }
    }
}
