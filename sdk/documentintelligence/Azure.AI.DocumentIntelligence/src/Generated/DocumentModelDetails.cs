// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.DocumentIntelligence
{
    /// <summary> The DocumentModelDetails. </summary>
    public partial class DocumentModelDetails
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DocumentModelDetails"/>. </summary>
        /// <param name="modelId"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="modelId"/> is null. </exception>
        internal DocumentModelDetails(string modelId)
        {
            Argument.AssertNotNull(modelId, nameof(modelId));

            ModelId = modelId;
            Tags = new ChangeTrackingDictionary<string, string>();
            DocTypes = new ChangeTrackingDictionary<string, DocumentTypeDetails>();
            Warnings = new ChangeTrackingList<DocumentIntelligenceWarning>();
        }

        /// <summary> Initializes a new instance of <see cref="DocumentModelDetails"/>. </summary>
        /// <param name="modelId"></param>
        /// <param name="description"></param>
        /// <param name="createdOn"></param>
        /// <param name="expiresOn"></param>
        /// <param name="apiVersion"></param>
        /// <param name="tags"></param>
        /// <param name="buildMode"></param>
        /// <param name="azureBlobSource"></param>
        /// <param name="azureBlobFileListSource"></param>
        /// <param name="classifierId"></param>
        /// <param name="split"></param>
        /// <param name="docTypes"></param>
        /// <param name="warnings"></param>
        /// <param name="trainingHours"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DocumentModelDetails(string modelId, string description, DateTimeOffset createdOn, DateTimeOffset? expiresOn, string apiVersion, IReadOnlyDictionary<string, string> tags, DocumentBuildMode? buildMode, AzureBlobContentSource azureBlobSource, AzureBlobFileListContentSource azureBlobFileListSource, string classifierId, SplitMode? split, IReadOnlyDictionary<string, DocumentTypeDetails> docTypes, IReadOnlyList<DocumentIntelligenceWarning> warnings, float? trainingHours, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ModelId = modelId;
            Description = description;
            CreatedOn = createdOn;
            ExpiresOn = expiresOn;
            ApiVersion = apiVersion;
            Tags = tags;
            BuildMode = buildMode;
            AzureBlobSource = azureBlobSource;
            AzureBlobFileListSource = azureBlobFileListSource;
            ClassifierId = classifierId;
            Split = split;
            DocTypes = docTypes;
            Warnings = warnings;
            TrainingHours = trainingHours;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DocumentModelDetails"/> for deserialization. </summary>
        internal DocumentModelDetails()
        {
        }

        /// <summary> Gets the model id. </summary>
        public string ModelId { get; }
        /// <summary> Gets the description. </summary>
        public string Description { get; }
        /// <summary> Gets the created on. </summary>
        public DateTimeOffset CreatedOn { get; }
        /// <summary> Gets the expires on. </summary>
        public DateTimeOffset? ExpiresOn { get; }
        /// <summary> Gets the api version. </summary>
        public string ApiVersion { get; }
        /// <summary> Gets the tags. </summary>
        public IReadOnlyDictionary<string, string> Tags { get; }
        /// <summary> Gets the build mode. </summary>
        public DocumentBuildMode? BuildMode { get; }
        /// <summary> Gets the azure blob source. </summary>
        public AzureBlobContentSource AzureBlobSource { get; }
        /// <summary> Gets the azure blob file list source. </summary>
        public AzureBlobFileListContentSource AzureBlobFileListSource { get; }
        /// <summary> Gets the classifier id. </summary>
        public string ClassifierId { get; }
        /// <summary> Gets the split. </summary>
        public SplitMode? Split { get; }
        /// <summary> Gets the doc types. </summary>
        public IReadOnlyDictionary<string, DocumentTypeDetails> DocTypes { get; }
        /// <summary> Gets the warnings. </summary>
        public IReadOnlyList<DocumentIntelligenceWarning> Warnings { get; }
        /// <summary> Gets the training hours. </summary>
        public float? TrainingHours { get; }
    }
}
