// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.DocumentIntelligence
{
    /// <summary> The DocumentTypeDetails. </summary>
    public partial class DocumentTypeDetails
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DocumentTypeDetails"/>. </summary>
        public DocumentTypeDetails()
        {
            FieldSchema = new ChangeTrackingDictionary<string, DocumentFieldSchema>();
            FieldConfidence = new ChangeTrackingDictionary<string, float>();
            Features = new ChangeTrackingList<DocumentAnalysisFeature>();
            QueryFields = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="DocumentTypeDetails"/>. </summary>
        /// <param name="description"></param>
        /// <param name="buildMode"></param>
        /// <param name="fieldSchema"></param>
        /// <param name="fieldConfidence"></param>
        /// <param name="modelId"></param>
        /// <param name="confidenceThreshold"></param>
        /// <param name="features"></param>
        /// <param name="queryFields"></param>
        /// <param name="maxDocumentsToAnalyze"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DocumentTypeDetails(string description, DocumentBuildMode? buildMode, IDictionary<string, DocumentFieldSchema> fieldSchema, IDictionary<string, float> fieldConfidence, string modelId, float? confidenceThreshold, IList<DocumentAnalysisFeature> features, IList<string> queryFields, int? maxDocumentsToAnalyze, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Description = description;
            BuildMode = buildMode;
            FieldSchema = fieldSchema;
            FieldConfidence = fieldConfidence;
            ModelId = modelId;
            ConfidenceThreshold = confidenceThreshold;
            Features = features;
            QueryFields = queryFields;
            MaxDocumentsToAnalyze = maxDocumentsToAnalyze;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets the description. </summary>
        public string Description { get; set; }
        /// <summary> Gets or sets the build mode. </summary>
        public DocumentBuildMode? BuildMode { get; set; }
        /// <summary> Gets the field schema. </summary>
        public IDictionary<string, DocumentFieldSchema> FieldSchema { get; }
        /// <summary> Gets the field confidence. </summary>
        public IDictionary<string, float> FieldConfidence { get; }
        /// <summary> Gets or sets the model id. </summary>
        public string ModelId { get; set; }
        /// <summary> Gets or sets the confidence threshold. </summary>
        public float? ConfidenceThreshold { get; set; }
        /// <summary> Gets the features. </summary>
        public IList<DocumentAnalysisFeature> Features { get; }
        /// <summary> Gets the query fields. </summary>
        public IList<string> QueryFields { get; }
        /// <summary> Gets or sets the max documents to analyze. </summary>
        public int? MaxDocumentsToAnalyze { get; set; }
    }
}
