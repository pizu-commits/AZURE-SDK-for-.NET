// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.DocumentIntelligence
{
    /// <summary> The DocumentFieldType. </summary>
    public readonly partial struct DocumentFieldType : IEquatable<DocumentFieldType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DocumentFieldType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DocumentFieldType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StringValue = "string";
        private const string DateValue = "date";
        private const string TimeValue = "time";
        private const string PhoneNumberValue = "phoneNumber";
        private const string DoubleValue = "number";
        private const string LongValue = "integer";
        private const string SelectionMarkValue = "selectionMark";
        private const string CountryRegionValue = "countryRegion";
        private const string SignatureValue = "signature";
        private const string ListValue = "array";
        private const string DictionaryValue = "object";
        private const string CurrencyValue = "currency";
        private const string AddressValue = "address";
        private const string BooleanValue = "boolean";
        private const string SelectionGroupValue = "selectionGroup";

        /// <summary> string. </summary>
        public static DocumentFieldType String { get; } = new DocumentFieldType(StringValue);
        /// <summary> date. </summary>
        public static DocumentFieldType Date { get; } = new DocumentFieldType(DateValue);
        /// <summary> time. </summary>
        public static DocumentFieldType Time { get; } = new DocumentFieldType(TimeValue);
        /// <summary> phoneNumber. </summary>
        public static DocumentFieldType PhoneNumber { get; } = new DocumentFieldType(PhoneNumberValue);
        /// <summary> number. </summary>
        public static DocumentFieldType Double { get; } = new DocumentFieldType(DoubleValue);
        /// <summary> integer. </summary>
        public static DocumentFieldType Long { get; } = new DocumentFieldType(LongValue);
        /// <summary> selectionMark. </summary>
        public static DocumentFieldType SelectionMark { get; } = new DocumentFieldType(SelectionMarkValue);
        /// <summary> countryRegion. </summary>
        public static DocumentFieldType CountryRegion { get; } = new DocumentFieldType(CountryRegionValue);
        /// <summary> signature. </summary>
        public static DocumentFieldType Signature { get; } = new DocumentFieldType(SignatureValue);
        /// <summary> array. </summary>
        public static DocumentFieldType List { get; } = new DocumentFieldType(ListValue);
        /// <summary> object. </summary>
        public static DocumentFieldType Dictionary { get; } = new DocumentFieldType(DictionaryValue);
        /// <summary> currency. </summary>
        public static DocumentFieldType Currency { get; } = new DocumentFieldType(CurrencyValue);
        /// <summary> address. </summary>
        public static DocumentFieldType Address { get; } = new DocumentFieldType(AddressValue);
        /// <summary> boolean. </summary>
        public static DocumentFieldType Boolean { get; } = new DocumentFieldType(BooleanValue);
        /// <summary> selectionGroup. </summary>
        public static DocumentFieldType SelectionGroup { get; } = new DocumentFieldType(SelectionGroupValue);
        /// <summary> Determines if two <see cref="DocumentFieldType"/> values are the same. </summary>
        public static bool operator ==(DocumentFieldType left, DocumentFieldType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DocumentFieldType"/> values are not the same. </summary>
        public static bool operator !=(DocumentFieldType left, DocumentFieldType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DocumentFieldType"/>. </summary>
        public static implicit operator DocumentFieldType(string value) => new DocumentFieldType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DocumentFieldType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DocumentFieldType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
