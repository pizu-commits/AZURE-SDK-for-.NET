// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.DocumentIntelligence
{
    /// <summary> The DocumentBarcodeKind. </summary>
    public readonly partial struct DocumentBarcodeKind : IEquatable<DocumentBarcodeKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DocumentBarcodeKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DocumentBarcodeKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string QrCodeValue = "QRCode";
        private const string Pdf417Value = "PDF417";
        private const string UpcaValue = "UPCA";
        private const string UpceValue = "UPCE";
        private const string Code39Value = "Code39";
        private const string Code128Value = "Code128";
        private const string Ean8Value = "EAN8";
        private const string Ean13Value = "EAN13";
        private const string DataBarValue = "DataBar";
        private const string Code93Value = "Code93";
        private const string CodabarValue = "Codabar";
        private const string DataBarExpandedValue = "DataBarExpanded";
        private const string ItfValue = "ITF";
        private const string MicroQrCodeValue = "MicroQRCode";
        private const string AztecValue = "Aztec";
        private const string DataMatrixValue = "DataMatrix";
        private const string MaxiCodeValue = "MaxiCode";

        /// <summary> QRCode. </summary>
        public static DocumentBarcodeKind QrCode { get; } = new DocumentBarcodeKind(QrCodeValue);
        /// <summary> PDF417. </summary>
        public static DocumentBarcodeKind Pdf417 { get; } = new DocumentBarcodeKind(Pdf417Value);
        /// <summary> UPCA. </summary>
        public static DocumentBarcodeKind Upca { get; } = new DocumentBarcodeKind(UpcaValue);
        /// <summary> UPCE. </summary>
        public static DocumentBarcodeKind Upce { get; } = new DocumentBarcodeKind(UpceValue);
        /// <summary> Code39. </summary>
        public static DocumentBarcodeKind Code39 { get; } = new DocumentBarcodeKind(Code39Value);
        /// <summary> Code128. </summary>
        public static DocumentBarcodeKind Code128 { get; } = new DocumentBarcodeKind(Code128Value);
        /// <summary> EAN8. </summary>
        public static DocumentBarcodeKind Ean8 { get; } = new DocumentBarcodeKind(Ean8Value);
        /// <summary> EAN13. </summary>
        public static DocumentBarcodeKind Ean13 { get; } = new DocumentBarcodeKind(Ean13Value);
        /// <summary> DataBar. </summary>
        public static DocumentBarcodeKind DataBar { get; } = new DocumentBarcodeKind(DataBarValue);
        /// <summary> Code93. </summary>
        public static DocumentBarcodeKind Code93 { get; } = new DocumentBarcodeKind(Code93Value);
        /// <summary> Codabar. </summary>
        public static DocumentBarcodeKind Codabar { get; } = new DocumentBarcodeKind(CodabarValue);
        /// <summary> DataBarExpanded. </summary>
        public static DocumentBarcodeKind DataBarExpanded { get; } = new DocumentBarcodeKind(DataBarExpandedValue);
        /// <summary> ITF. </summary>
        public static DocumentBarcodeKind Itf { get; } = new DocumentBarcodeKind(ItfValue);
        /// <summary> MicroQRCode. </summary>
        public static DocumentBarcodeKind MicroQrCode { get; } = new DocumentBarcodeKind(MicroQrCodeValue);
        /// <summary> Aztec. </summary>
        public static DocumentBarcodeKind Aztec { get; } = new DocumentBarcodeKind(AztecValue);
        /// <summary> DataMatrix. </summary>
        public static DocumentBarcodeKind DataMatrix { get; } = new DocumentBarcodeKind(DataMatrixValue);
        /// <summary> MaxiCode. </summary>
        public static DocumentBarcodeKind MaxiCode { get; } = new DocumentBarcodeKind(MaxiCodeValue);
        /// <summary> Determines if two <see cref="DocumentBarcodeKind"/> values are the same. </summary>
        public static bool operator ==(DocumentBarcodeKind left, DocumentBarcodeKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DocumentBarcodeKind"/> values are not the same. </summary>
        public static bool operator !=(DocumentBarcodeKind left, DocumentBarcodeKind right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DocumentBarcodeKind"/>. </summary>
        public static implicit operator DocumentBarcodeKind(string value) => new DocumentBarcodeKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DocumentBarcodeKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DocumentBarcodeKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
