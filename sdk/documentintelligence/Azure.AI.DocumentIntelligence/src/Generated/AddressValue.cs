// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.DocumentIntelligence
{
    /// <summary> The AddressValue. </summary>
    public partial class AddressValue
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AddressValue"/>. </summary>
        internal AddressValue()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AddressValue"/>. </summary>
        /// <param name="houseNumber"></param>
        /// <param name="poBox"></param>
        /// <param name="road"></param>
        /// <param name="city"></param>
        /// <param name="state"></param>
        /// <param name="postalCode"></param>
        /// <param name="countryRegion"></param>
        /// <param name="streetAddress"></param>
        /// <param name="unit"></param>
        /// <param name="cityDistrict"></param>
        /// <param name="stateDistrict"></param>
        /// <param name="suburb"></param>
        /// <param name="house"></param>
        /// <param name="level"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AddressValue(string houseNumber, string poBox, string road, string city, string state, string postalCode, string countryRegion, string streetAddress, string unit, string cityDistrict, string stateDistrict, string suburb, string house, string level, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            HouseNumber = houseNumber;
            PoBox = poBox;
            Road = road;
            City = city;
            State = state;
            PostalCode = postalCode;
            CountryRegion = countryRegion;
            StreetAddress = streetAddress;
            Unit = unit;
            CityDistrict = cityDistrict;
            StateDistrict = stateDistrict;
            Suburb = suburb;
            House = house;
            Level = level;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the house number. </summary>
        public string HouseNumber { get; }
        /// <summary> Gets the po box. </summary>
        public string PoBox { get; }
        /// <summary> Gets the road. </summary>
        public string Road { get; }
        /// <summary> Gets the city. </summary>
        public string City { get; }
        /// <summary> Gets the state. </summary>
        public string State { get; }
        /// <summary> Gets the postal code. </summary>
        public string PostalCode { get; }
        /// <summary> Gets the country region. </summary>
        public string CountryRegion { get; }
        /// <summary> Gets the street address. </summary>
        public string StreetAddress { get; }
        /// <summary> Gets the unit. </summary>
        public string Unit { get; }
        /// <summary> Gets the city district. </summary>
        public string CityDistrict { get; }
        /// <summary> Gets the state district. </summary>
        public string StateDistrict { get; }
        /// <summary> Gets the suburb. </summary>
        public string Suburb { get; }
        /// <summary> Gets the house. </summary>
        public string House { get; }
        /// <summary> Gets the level. </summary>
        public string Level { get; }
    }
}
