// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Health.Insights.ClinicalMatching
{
    /// <summary> Model factory for models. </summary>
    public static partial class HealthInsightsClinicalMatchingModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.PatientRecord"/>. </summary>
        /// <param name="id"></param>
        /// <param name="info"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="ClinicalMatching.PatientRecord"/> instance for mocking. </returns>
        public static PatientRecord PatientRecord(string id = null, PatientInfo info = null, IEnumerable<PatientDocument> data = null)
        {
            data ??= new List<PatientDocument>();

            return new PatientRecord(id, info, data?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.PatientDocument"/>. </summary>
        /// <param name="type"></param>
        /// <param name="clinicalType"></param>
        /// <param name="id"></param>
        /// <param name="language"></param>
        /// <param name="createdDateTime"></param>
        /// <param name="content"></param>
        /// <returns> A new <see cref="ClinicalMatching.PatientDocument"/> instance for mocking. </returns>
        public static PatientDocument PatientDocument(DocumentType type = default, ClinicalDocumentType? clinicalType = null, string id = null, string language = null, DateTimeOffset? createdDateTime = null, DocumentContent content = null)
        {
            return new PatientDocument(
                type,
                clinicalType,
                id,
                language,
                createdDateTime,
                content,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.TrialMatcherModelConfiguration"/>. </summary>
        /// <param name="verbose"></param>
        /// <param name="includeEvidence"></param>
        /// <param name="clinicalTrials"></param>
        /// <returns> A new <see cref="ClinicalMatching.TrialMatcherModelConfiguration"/> instance for mocking. </returns>
        public static TrialMatcherModelConfiguration TrialMatcherModelConfiguration(bool? verbose = null, bool? includeEvidence = null, ClinicalTrials clinicalTrials = null)
        {
            return new TrialMatcherModelConfiguration(verbose, includeEvidence, clinicalTrials, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.ClinicalTrialDetails"/>. </summary>
        /// <param name="id"></param>
        /// <param name="eligibilityCriteriaText"></param>
        /// <param name="demographics"></param>
        /// <param name="metadata"></param>
        /// <returns> A new <see cref="ClinicalMatching.ClinicalTrialDetails"/> instance for mocking. </returns>
        public static ClinicalTrialDetails ClinicalTrialDetails(string id = null, string eligibilityCriteriaText = null, ClinicalTrialDemographics demographics = null, ClinicalTrialMetadata metadata = null)
        {
            return new ClinicalTrialDetails(id, eligibilityCriteriaText, demographics, metadata, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.GeographicLocation"/>. </summary>
        /// <param name="city"></param>
        /// <param name="state"></param>
        /// <param name="countryOrRegion"></param>
        /// <returns> A new <see cref="ClinicalMatching.GeographicLocation"/> instance for mocking. </returns>
        public static GeographicLocation GeographicLocation(string city = null, string state = null, string countryOrRegion = null)
        {
            return new GeographicLocation(city, state, countryOrRegion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.TrialMatcherResults"/>. </summary>
        /// <param name="patients"></param>
        /// <param name="modelVersion"></param>
        /// <param name="knowledgeGraphLastUpdateDate"></param>
        /// <returns> A new <see cref="ClinicalMatching.TrialMatcherResults"/> instance for mocking. </returns>
        public static TrialMatcherResults TrialMatcherResults(IEnumerable<TrialMatcherPatientResult> patients = null, string modelVersion = null, DateTimeOffset? knowledgeGraphLastUpdateDate = null)
        {
            patients ??= new List<TrialMatcherPatientResult>();

            return new TrialMatcherResults(patients?.ToList(), modelVersion, knowledgeGraphLastUpdateDate, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.TrialMatcherPatientResult"/>. </summary>
        /// <param name="id"></param>
        /// <param name="inferences"></param>
        /// <param name="neededClinicalInfo"></param>
        /// <returns> A new <see cref="ClinicalMatching.TrialMatcherPatientResult"/> instance for mocking. </returns>
        public static TrialMatcherPatientResult TrialMatcherPatientResult(string id = null, IEnumerable<TrialMatcherInference> inferences = null, IEnumerable<ExtendedClinicalCodedElement> neededClinicalInfo = null)
        {
            inferences ??= new List<TrialMatcherInference>();
            neededClinicalInfo ??= new List<ExtendedClinicalCodedElement>();

            return new TrialMatcherPatientResult(id, inferences?.ToList(), neededClinicalInfo?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.TrialMatcherInference"/>. </summary>
        /// <param name="type"></param>
        /// <param name="value"></param>
        /// <param name="description"></param>
        /// <param name="confidenceScore"></param>
        /// <param name="evidence"></param>
        /// <param name="id"></param>
        /// <param name="source"></param>
        /// <param name="metadata"></param>
        /// <returns> A new <see cref="ClinicalMatching.TrialMatcherInference"/> instance for mocking. </returns>
        public static TrialMatcherInference TrialMatcherInference(TrialMatcherInferenceType type = default, string value = null, string description = null, float? confidenceScore = null, IEnumerable<TrialMatcherInferenceEvidence> evidence = null, string id = null, ClinicalTrialSource? source = null, ClinicalTrialMetadata metadata = null)
        {
            evidence ??= new List<TrialMatcherInferenceEvidence>();

            return new TrialMatcherInference(
                type,
                value,
                description,
                confidenceScore,
                evidence?.ToList(),
                id,
                source,
                metadata,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.TrialMatcherInferenceEvidence"/>. </summary>
        /// <param name="eligibilityCriteriaEvidence"></param>
        /// <param name="patientDataEvidence"></param>
        /// <param name="patientInfoEvidence"></param>
        /// <param name="importance"></param>
        /// <returns> A new <see cref="ClinicalMatching.TrialMatcherInferenceEvidence"/> instance for mocking. </returns>
        public static TrialMatcherInferenceEvidence TrialMatcherInferenceEvidence(string eligibilityCriteriaEvidence = null, ClinicalNoteEvidence patientDataEvidence = null, ClinicalCodedElement patientInfoEvidence = null, float? importance = null)
        {
            return new TrialMatcherInferenceEvidence(eligibilityCriteriaEvidence, patientDataEvidence, patientInfoEvidence, importance, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.ClinicalNoteEvidence"/>. </summary>
        /// <param name="id"></param>
        /// <param name="text"></param>
        /// <param name="offset"></param>
        /// <param name="length"></param>
        /// <returns> A new <see cref="ClinicalMatching.ClinicalNoteEvidence"/> instance for mocking. </returns>
        public static ClinicalNoteEvidence ClinicalNoteEvidence(string id = null, string text = null, int offset = default, int length = default)
        {
            return new ClinicalNoteEvidence(id, text, offset, length, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.ExtendedClinicalCodedElement"/>. </summary>
        /// <param name="system"></param>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <param name="semanticType"></param>
        /// <param name="category"></param>
        /// <returns> A new <see cref="ClinicalMatching.ExtendedClinicalCodedElement"/> instance for mocking. </returns>
        public static ExtendedClinicalCodedElement ExtendedClinicalCodedElement(string system = null, string code = null, string name = null, string value = null, string semanticType = null, string category = null)
        {
            return new ExtendedClinicalCodedElement(
                system,
                code,
                name,
                value,
                semanticType,
                category,
                serializedAdditionalRawData: null);
        }
    }
}
