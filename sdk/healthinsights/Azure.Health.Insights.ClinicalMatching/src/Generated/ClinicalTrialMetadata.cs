// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Health.Insights.ClinicalMatching
{
    /// <summary> The ClinicalTrialMetadata. </summary>
    public partial class ClinicalTrialMetadata
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ClinicalTrialMetadata"/>. </summary>
        /// <param name="conditions"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="conditions"/> is null. </exception>
        public ClinicalTrialMetadata(IEnumerable<string> conditions)
        {
            Argument.AssertNotNull(conditions, nameof(conditions));

            Phases = new ChangeTrackingList<ClinicalTrialPhase>();
            Conditions = conditions.ToList();
            Sponsors = new ChangeTrackingList<string>();
            Contacts = new ChangeTrackingList<ContactDetails>();
            Facilities = new ChangeTrackingList<ClinicalTrialResearchFacility>();
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalTrialMetadata"/>. </summary>
        /// <param name="phases"></param>
        /// <param name="studyType"></param>
        /// <param name="recruitmentStatus"></param>
        /// <param name="conditions"></param>
        /// <param name="sponsors"></param>
        /// <param name="contacts"></param>
        /// <param name="facilities"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ClinicalTrialMetadata(IList<ClinicalTrialPhase> phases, ClinicalTrialStudyType? studyType, ClinicalTrialRecruitmentStatus? recruitmentStatus, IList<string> conditions, IList<string> sponsors, IList<ContactDetails> contacts, IList<ClinicalTrialResearchFacility> facilities, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Phases = phases;
            StudyType = studyType;
            RecruitmentStatus = recruitmentStatus;
            Conditions = conditions;
            Sponsors = sponsors;
            Contacts = contacts;
            Facilities = facilities;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalTrialMetadata"/> for deserialization. </summary>
        internal ClinicalTrialMetadata()
        {
        }

        /// <summary> Gets the phases. </summary>
        public IList<ClinicalTrialPhase> Phases { get; }
        /// <summary> Gets or sets the study type. </summary>
        public ClinicalTrialStudyType? StudyType { get; set; }
        /// <summary> Gets or sets the recruitment status. </summary>
        public ClinicalTrialRecruitmentStatus? RecruitmentStatus { get; set; }
        /// <summary> Gets the conditions. </summary>
        public IList<string> Conditions { get; }
        /// <summary> Gets the sponsors. </summary>
        public IList<string> Sponsors { get; }
        /// <summary> Gets the contacts. </summary>
        public IList<ContactDetails> Contacts { get; }
        /// <summary> Gets the facilities. </summary>
        public IList<ClinicalTrialResearchFacility> Facilities { get; }
    }
}
