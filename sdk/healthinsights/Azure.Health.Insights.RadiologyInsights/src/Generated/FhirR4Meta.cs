// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> The Fhir_R4_Meta. </summary>
    public partial class FhirR4Meta
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FhirR4Meta"/>. </summary>
        public FhirR4Meta()
        {
            Profile = new ChangeTrackingList<string>();
            Security = new ChangeTrackingList<FhirR4Coding>();
            Tag = new ChangeTrackingList<FhirR4Coding>();
        }

        /// <summary> Initializes a new instance of <see cref="FhirR4Meta"/>. </summary>
        /// <param name="versionId"></param>
        /// <param name="lastUpdated"></param>
        /// <param name="source"></param>
        /// <param name="profile"></param>
        /// <param name="security"></param>
        /// <param name="tag"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FhirR4Meta(string versionId, string lastUpdated, string source, IList<string> profile, IList<FhirR4Coding> security, IList<FhirR4Coding> tag, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            VersionId = versionId;
            LastUpdated = lastUpdated;
            Source = source;
            Profile = profile;
            Security = security;
            Tag = tag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets the version id. </summary>
        public string VersionId { get; set; }
        /// <summary> Gets or sets the last updated. </summary>
        public string LastUpdated { get; set; }
        /// <summary> Gets or sets the source. </summary>
        public string Source { get; set; }
        /// <summary> Gets the profile. </summary>
        public IList<string> Profile { get; }
        /// <summary> Gets the security. </summary>
        public IList<FhirR4Coding> Security { get; }
        /// <summary> Gets the tag. </summary>
        public IList<FhirR4Coding> Tag { get; }
    }
}
