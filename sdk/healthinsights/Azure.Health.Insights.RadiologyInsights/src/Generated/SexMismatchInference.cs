// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> The SexMismatchInference. </summary>
    public partial class SexMismatchInference : RadiologyInsightsInference
    {
        /// <summary> Initializes a new instance of <see cref="SexMismatchInference"/>. </summary>
        /// <param name="sexIndication"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="sexIndication"/> is null. </exception>
        internal SexMismatchInference(FhirR4CodeableConcept sexIndication)
        {
            Argument.AssertNotNull(sexIndication, nameof(sexIndication));

            Kind = RadiologyInsightsInferenceType.SexMismatch;
            SexIndication = sexIndication;
        }

        /// <summary> Initializes a new instance of <see cref="SexMismatchInference"/>. </summary>
        /// <param name="kind"></param>
        /// <param name="extension"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="sexIndication"></param>
        internal SexMismatchInference(RadiologyInsightsInferenceType kind, IReadOnlyList<FhirR4Extension> extension, IDictionary<string, BinaryData> serializedAdditionalRawData, FhirR4CodeableConcept sexIndication) : base(kind, extension, serializedAdditionalRawData)
        {
            SexIndication = sexIndication;
        }

        /// <summary> Initializes a new instance of <see cref="SexMismatchInference"/> for deserialization. </summary>
        internal SexMismatchInference()
        {
        }

        /// <summary> Gets the sex indication. </summary>
        public FhirR4CodeableConcept SexIndication { get; }
    }
}
