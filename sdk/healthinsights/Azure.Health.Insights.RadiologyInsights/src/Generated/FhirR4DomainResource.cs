// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary>
    /// The Fhir_R4_DomainResource.
    /// Please note <see cref="FhirR4DomainResource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="FhirR4Condition"/>, <see cref="FhirR4Observation"/> and <see cref="FhirR4ResearchStudy"/>.
    /// </summary>
    public abstract partial class FhirR4DomainResource : FhirR4Resource
    {
        /// <summary> Initializes a new instance of <see cref="FhirR4DomainResource"/>. </summary>
        /// <param name="resourceType"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceType"/> is null. </exception>
        protected FhirR4DomainResource(string resourceType) : base(resourceType)
        {
            Argument.AssertNotNull(resourceType, nameof(resourceType));

            Contained = new ChangeTrackingList<FhirR4Resource>();
            Extension = new ChangeTrackingList<FhirR4Extension>();
            ModifierExtension = new ChangeTrackingList<FhirR4Extension>();
        }

        /// <summary> Initializes a new instance of <see cref="FhirR4DomainResource"/>. </summary>
        /// <param name="resourceType"></param>
        /// <param name="id"></param>
        /// <param name="meta"></param>
        /// <param name="implicitRules"></param>
        /// <param name="language"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="text"></param>
        /// <param name="contained"></param>
        /// <param name="extension"></param>
        /// <param name="modifierExtension"></param>
        internal FhirR4DomainResource(string resourceType, string id, FhirR4Meta meta, string implicitRules, string language, IDictionary<string, BinaryData> additionalProperties, FhirR4Narrative text, IReadOnlyList<FhirR4Resource> contained, IReadOnlyList<FhirR4Extension> extension, IReadOnlyList<FhirR4Extension> modifierExtension) : base(resourceType, id, meta, implicitRules, language, additionalProperties)
        {
            Text = text;
            Contained = contained;
            Extension = extension;
            ModifierExtension = modifierExtension;
        }

        /// <summary> Initializes a new instance of <see cref="FhirR4DomainResource"/> for deserialization. </summary>
        internal FhirR4DomainResource()
        {
        }

        /// <summary> Gets the text. </summary>
        public FhirR4Narrative Text { get; }
        /// <summary> Gets the contained. </summary>
        public IReadOnlyList<FhirR4Resource> Contained { get; }
        /// <summary> Gets the extension. </summary>
        public IReadOnlyList<FhirR4Extension> Extension { get; }
        /// <summary> Gets the modifier extension. </summary>
        public IReadOnlyList<FhirR4Extension> ModifierExtension { get; }
    }
}
