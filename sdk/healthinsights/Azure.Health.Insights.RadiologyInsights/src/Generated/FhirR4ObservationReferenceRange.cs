// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> The Fhir_R4_ObservationReferenceRange. </summary>
    public partial class FhirR4ObservationReferenceRange
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FhirR4ObservationReferenceRange"/>. </summary>
        internal FhirR4ObservationReferenceRange()
        {
            AppliesTo = new ChangeTrackingList<FhirR4CodeableConcept>();
        }

        /// <summary> Initializes a new instance of <see cref="FhirR4ObservationReferenceRange"/>. </summary>
        /// <param name="low"></param>
        /// <param name="high"></param>
        /// <param name="type"></param>
        /// <param name="appliesTo"></param>
        /// <param name="age"></param>
        /// <param name="text"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FhirR4ObservationReferenceRange(FhirR4Quantity low, FhirR4Quantity high, FhirR4CodeableConcept type, IReadOnlyList<FhirR4CodeableConcept> appliesTo, FhirR4Range age, string text, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Low = low;
            High = high;
            Type = type;
            AppliesTo = appliesTo;
            Age = age;
            Text = text;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the low. </summary>
        public FhirR4Quantity Low { get; }
        /// <summary> Gets the high. </summary>
        public FhirR4Quantity High { get; }
        /// <summary> Gets the type. </summary>
        public FhirR4CodeableConcept Type { get; }
        /// <summary> Gets the applies to. </summary>
        public IReadOnlyList<FhirR4CodeableConcept> AppliesTo { get; }
        /// <summary> Gets the age. </summary>
        public FhirR4Range Age { get; }
        /// <summary> Gets the text. </summary>
        public string Text { get; }
    }
}
