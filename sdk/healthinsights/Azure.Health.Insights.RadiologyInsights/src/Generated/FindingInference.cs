// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> The FindingInference. </summary>
    public partial class FindingInference : RadiologyInsightsInference
    {
        /// <summary> Initializes a new instance of <see cref="FindingInference"/>. </summary>
        /// <param name="finding"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="finding"/> is null. </exception>
        internal FindingInference(FhirR4Observation finding)
        {
            Argument.AssertNotNull(finding, nameof(finding));

            Kind = RadiologyInsightsInferenceType.Finding;
            Finding = finding;
        }

        /// <summary> Initializes a new instance of <see cref="FindingInference"/>. </summary>
        /// <param name="kind"></param>
        /// <param name="extension"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="finding"></param>
        internal FindingInference(RadiologyInsightsInferenceType kind, IReadOnlyList<FhirR4Extension> extension, IDictionary<string, BinaryData> serializedAdditionalRawData, FhirR4Observation finding) : base(kind, extension, serializedAdditionalRawData)
        {
            Finding = finding;
        }

        /// <summary> Initializes a new instance of <see cref="FindingInference"/> for deserialization. </summary>
        internal FindingInference()
        {
        }

        /// <summary> Gets the finding. </summary>
        public FhirR4Observation Finding { get; }
    }
}
