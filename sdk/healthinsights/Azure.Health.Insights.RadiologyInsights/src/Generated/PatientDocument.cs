// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> The PatientDocument. </summary>
    public partial class PatientDocument
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PatientDocument"/>. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="content"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="content"/> is null. </exception>
        public PatientDocument(ClinicalDocumentContentType type, string id, ClinicalDocumentContent content)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(content, nameof(content));

            Type = type;
            Id = id;
            Authors = new ChangeTrackingList<ClinicalDocumentAuthor>();
            Content = content;
        }

        /// <summary> Initializes a new instance of <see cref="PatientDocument"/>. </summary>
        /// <param name="type"></param>
        /// <param name="clinicalType"></param>
        /// <param name="id"></param>
        /// <param name="language"></param>
        /// <param name="createdAt"></param>
        /// <param name="authors"></param>
        /// <param name="specialtyType"></param>
        /// <param name="administrativeMetadata"></param>
        /// <param name="content"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PatientDocument(ClinicalDocumentContentType type, ClinicalDocumentType? clinicalType, string id, string language, DateTimeOffset? createdAt, IList<ClinicalDocumentAuthor> authors, SpecialtyType? specialtyType, DocumentAdministrativeMetadata administrativeMetadata, ClinicalDocumentContent content, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            ClinicalType = clinicalType;
            Id = id;
            Language = language;
            CreatedAt = createdAt;
            Authors = authors;
            SpecialtyType = specialtyType;
            AdministrativeMetadata = administrativeMetadata;
            Content = content;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PatientDocument"/> for deserialization. </summary>
        internal PatientDocument()
        {
        }

        /// <summary> Gets or sets the type. </summary>
        public ClinicalDocumentContentType Type { get; set; }
        /// <summary> Gets or sets the clinical type. </summary>
        public ClinicalDocumentType? ClinicalType { get; set; }
        /// <summary> Gets or sets the id. </summary>
        public string Id { get; set; }
        /// <summary> Gets or sets the language. </summary>
        public string Language { get; set; }
        /// <summary> Gets or sets the created at. </summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary> Gets the authors. </summary>
        public IList<ClinicalDocumentAuthor> Authors { get; }
        /// <summary> Gets or sets the specialty type. </summary>
        public SpecialtyType? SpecialtyType { get; set; }
        /// <summary> Gets or sets the administrative metadata. </summary>
        public DocumentAdministrativeMetadata AdministrativeMetadata { get; set; }
        /// <summary> Gets or sets the content. </summary>
        public ClinicalDocumentContent Content { get; set; }
    }
}
