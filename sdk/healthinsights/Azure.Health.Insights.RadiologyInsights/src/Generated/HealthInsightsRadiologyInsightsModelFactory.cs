// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> Model factory for models. </summary>
    public static partial class HealthInsightsRadiologyInsightsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.RadiologyInsightsJob"/>. </summary>
        /// <param name="jobData"></param>
        /// <param name="result"></param>
        /// <param name="id"></param>
        /// <param name="status"></param>
        /// <param name="createdAt"></param>
        /// <param name="expiresAt"></param>
        /// <param name="updatedAt"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="RadiologyInsights.RadiologyInsightsJob"/> instance for mocking. </returns>
        public static RadiologyInsightsJob RadiologyInsightsJob(RadiologyInsightsData jobData = null, RadiologyInsightsInferenceResult result = null, string id = null, JobStatus status = default, DateTimeOffset? createdAt = null, DateTimeOffset? expiresAt = null, DateTimeOffset? updatedAt = null, ResponseError error = null)
        {
            return new RadiologyInsightsJob(
                jobData,
                result,
                id,
                status,
                createdAt,
                expiresAt,
                updatedAt,
                error,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.RadiologyInsightsInferenceResult"/>. </summary>
        /// <param name="patientResults"></param>
        /// <param name="modelVersion"></param>
        /// <returns> A new <see cref="RadiologyInsights.RadiologyInsightsInferenceResult"/> instance for mocking. </returns>
        public static RadiologyInsightsInferenceResult RadiologyInsightsInferenceResult(IEnumerable<RadiologyInsightsPatientResult> patientResults = null, string modelVersion = null)
        {
            patientResults ??= new List<RadiologyInsightsPatientResult>();

            return new RadiologyInsightsInferenceResult(patientResults?.ToList(), modelVersion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.RadiologyInsightsPatientResult"/>. </summary>
        /// <param name="patientId"></param>
        /// <param name="inferences">
        /// Please note <see cref="RadiologyInsights.RadiologyInsightsInference"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="RadiologyInsights.AgeMismatchInference"/>, <see cref="RadiologyInsights.CompleteOrderDiscrepancyInference"/>, <see cref="RadiologyInsights.CriticalResultInference"/>, <see cref="RadiologyInsights.FindingInference"/>, <see cref="RadiologyInsights.FollowupCommunicationInference"/>, <see cref="RadiologyInsights.FollowupRecommendationInference"/>, <see cref="RadiologyInsights.LateralityDiscrepancyInference"/>, <see cref="RadiologyInsights.LimitedOrderDiscrepancyInference"/>, <see cref="RadiologyInsights.RadiologyProcedureInference"/> and <see cref="RadiologyInsights.SexMismatchInference"/>.
        /// </param>
        /// <returns> A new <see cref="RadiologyInsights.RadiologyInsightsPatientResult"/> instance for mocking. </returns>
        public static RadiologyInsightsPatientResult RadiologyInsightsPatientResult(string patientId = null, IEnumerable<RadiologyInsightsInference> inferences = null)
        {
            inferences ??= new List<RadiologyInsightsInference>();

            return new RadiologyInsightsPatientResult(patientId, inferences?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.RadiologyInsightsInference"/>. </summary>
        /// <param name="kind"></param>
        /// <param name="extension"></param>
        /// <returns> A new <see cref="RadiologyInsights.RadiologyInsightsInference"/> instance for mocking. </returns>
        public static RadiologyInsightsInference RadiologyInsightsInference(string kind = null, IEnumerable<FhirR4Extension> extension = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new UnknownRadiologyInsightsInference(kind == null ? default : new RadiologyInsightsInferenceType(kind), extension?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.AgeMismatchInference"/>. </summary>
        /// <param name="extension"></param>
        /// <returns> A new <see cref="RadiologyInsights.AgeMismatchInference"/> instance for mocking. </returns>
        public static AgeMismatchInference AgeMismatchInference(IEnumerable<FhirR4Extension> extension = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new AgeMismatchInference(RadiologyInsightsInferenceType.AgeMismatch, extension?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.SexMismatchInference"/>. </summary>
        /// <param name="extension"></param>
        /// <param name="sexIndication"></param>
        /// <returns> A new <see cref="RadiologyInsights.SexMismatchInference"/> instance for mocking. </returns>
        public static SexMismatchInference SexMismatchInference(IEnumerable<FhirR4Extension> extension = null, FhirR4CodeableConcept sexIndication = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new SexMismatchInference(RadiologyInsightsInferenceType.SexMismatch, extension?.ToList(), serializedAdditionalRawData: null, sexIndication);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.LateralityDiscrepancyInference"/>. </summary>
        /// <param name="extension"></param>
        /// <param name="lateralityIndication"></param>
        /// <param name="discrepancyType"></param>
        /// <returns> A new <see cref="RadiologyInsights.LateralityDiscrepancyInference"/> instance for mocking. </returns>
        public static LateralityDiscrepancyInference LateralityDiscrepancyInference(IEnumerable<FhirR4Extension> extension = null, FhirR4CodeableConcept lateralityIndication = null, LateralityDiscrepancyType discrepancyType = default)
        {
            extension ??= new List<FhirR4Extension>();

            return new LateralityDiscrepancyInference(RadiologyInsightsInferenceType.LateralityDiscrepancy, extension?.ToList(), serializedAdditionalRawData: null, lateralityIndication, discrepancyType);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.CompleteOrderDiscrepancyInference"/>. </summary>
        /// <param name="extension"></param>
        /// <param name="orderType"></param>
        /// <param name="missingBodyParts"></param>
        /// <param name="missingBodyPartMeasurements"></param>
        /// <returns> A new <see cref="RadiologyInsights.CompleteOrderDiscrepancyInference"/> instance for mocking. </returns>
        public static CompleteOrderDiscrepancyInference CompleteOrderDiscrepancyInference(IEnumerable<FhirR4Extension> extension = null, FhirR4CodeableConcept orderType = null, IEnumerable<FhirR4CodeableConcept> missingBodyParts = null, IEnumerable<FhirR4CodeableConcept> missingBodyPartMeasurements = null)
        {
            extension ??= new List<FhirR4Extension>();
            missingBodyParts ??= new List<FhirR4CodeableConcept>();
            missingBodyPartMeasurements ??= new List<FhirR4CodeableConcept>();

            return new CompleteOrderDiscrepancyInference(
                RadiologyInsightsInferenceType.CompleteOrderDiscrepancy,
                extension?.ToList(),
                serializedAdditionalRawData: null,
                orderType,
                missingBodyParts?.ToList(),
                missingBodyPartMeasurements?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.LimitedOrderDiscrepancyInference"/>. </summary>
        /// <param name="extension"></param>
        /// <param name="orderType"></param>
        /// <param name="presentBodyParts"></param>
        /// <param name="presentBodyPartMeasurements"></param>
        /// <returns> A new <see cref="RadiologyInsights.LimitedOrderDiscrepancyInference"/> instance for mocking. </returns>
        public static LimitedOrderDiscrepancyInference LimitedOrderDiscrepancyInference(IEnumerable<FhirR4Extension> extension = null, FhirR4CodeableConcept orderType = null, IEnumerable<FhirR4CodeableConcept> presentBodyParts = null, IEnumerable<FhirR4CodeableConcept> presentBodyPartMeasurements = null)
        {
            extension ??= new List<FhirR4Extension>();
            presentBodyParts ??= new List<FhirR4CodeableConcept>();
            presentBodyPartMeasurements ??= new List<FhirR4CodeableConcept>();

            return new LimitedOrderDiscrepancyInference(
                RadiologyInsightsInferenceType.LimitedOrderDiscrepancy,
                extension?.ToList(),
                serializedAdditionalRawData: null,
                orderType,
                presentBodyParts?.ToList(),
                presentBodyPartMeasurements?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FindingInference"/>. </summary>
        /// <param name="extension"></param>
        /// <param name="finding"></param>
        /// <returns> A new <see cref="RadiologyInsights.FindingInference"/> instance for mocking. </returns>
        public static FindingInference FindingInference(IEnumerable<FhirR4Extension> extension = null, FhirR4Observation finding = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FindingInference(RadiologyInsightsInferenceType.Finding, extension?.ToList(), serializedAdditionalRawData: null, finding);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Observation"/>. </summary>
        /// <param name="id"></param>
        /// <param name="meta"></param>
        /// <param name="implicitRules"></param>
        /// <param name="language"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="text"></param>
        /// <param name="contained"></param>
        /// <param name="extension"></param>
        /// <param name="modifierExtension"></param>
        /// <param name="identifier"></param>
        /// <param name="status"></param>
        /// <param name="category"></param>
        /// <param name="code"></param>
        /// <param name="subject"></param>
        /// <param name="encounter"></param>
        /// <param name="effectiveDateTime"></param>
        /// <param name="effectivePeriod"></param>
        /// <param name="effectiveInstant"></param>
        /// <param name="issued"></param>
        /// <param name="valueQuantity"></param>
        /// <param name="valueCodeableConcept"></param>
        /// <param name="valueString"></param>
        /// <param name="valueBoolean"></param>
        /// <param name="valueInteger"></param>
        /// <param name="valueRange"></param>
        /// <param name="valueRatio"></param>
        /// <param name="valueSampledData"></param>
        /// <param name="valueTime"></param>
        /// <param name="valueDateTime"></param>
        /// <param name="valuePeriod"></param>
        /// <param name="dataAbsentReason"></param>
        /// <param name="interpretation"></param>
        /// <param name="note"></param>
        /// <param name="bodySite"></param>
        /// <param name="method"></param>
        /// <param name="referenceRange"></param>
        /// <param name="hasMember"></param>
        /// <param name="derivedFrom"></param>
        /// <param name="component"></param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Observation"/> instance for mocking. </returns>
        public static FhirR4Observation FhirR4Observation(string id = null, FhirR4Meta meta = null, string implicitRules = null, string language = null, IDictionary<string, BinaryData> additionalProperties = null, FhirR4Narrative text = null, IEnumerable<FhirR4Resource> contained = null, IEnumerable<FhirR4Extension> extension = null, IEnumerable<FhirR4Extension> modifierExtension = null, IEnumerable<FhirR4Identifier> identifier = null, ObservationStatusCodeType status = default, IEnumerable<FhirR4CodeableConcept> category = null, FhirR4CodeableConcept code = null, FhirR4Reference subject = null, FhirR4Reference encounter = null, string effectiveDateTime = null, FhirR4Period effectivePeriod = null, string effectiveInstant = null, string issued = null, FhirR4Quantity valueQuantity = null, FhirR4CodeableConcept valueCodeableConcept = null, string valueString = null, bool? valueBoolean = null, int? valueInteger = null, FhirR4Range valueRange = null, FhirR4Ratio valueRatio = null, FhirR4SampledData valueSampledData = null, TimeSpan? valueTime = null, string valueDateTime = null, FhirR4Period valuePeriod = null, FhirR4CodeableConcept dataAbsentReason = null, IEnumerable<FhirR4CodeableConcept> interpretation = null, IEnumerable<FhirR4Annotation> note = null, FhirR4CodeableConcept bodySite = null, FhirR4CodeableConcept method = null, IEnumerable<FhirR4ObservationReferenceRange> referenceRange = null, IEnumerable<FhirR4Reference> hasMember = null, IEnumerable<FhirR4Reference> derivedFrom = null, IEnumerable<FhirR4ObservationComponent> component = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            contained ??= new List<FhirR4Resource>();
            extension ??= new List<FhirR4Extension>();
            modifierExtension ??= new List<FhirR4Extension>();
            identifier ??= new List<FhirR4Identifier>();
            category ??= new List<FhirR4CodeableConcept>();
            interpretation ??= new List<FhirR4CodeableConcept>();
            note ??= new List<FhirR4Annotation>();
            referenceRange ??= new List<FhirR4ObservationReferenceRange>();
            hasMember ??= new List<FhirR4Reference>();
            derivedFrom ??= new List<FhirR4Reference>();
            component ??= new List<FhirR4ObservationComponent>();

            return new FhirR4Observation(
                "Observation",
                id,
                meta,
                implicitRules,
                language,
                additionalProperties,
                text,
                contained?.ToList(),
                extension?.ToList(),
                modifierExtension?.ToList(),
                identifier?.ToList(),
                status,
                category?.ToList(),
                code,
                subject,
                encounter,
                effectiveDateTime,
                effectivePeriod,
                effectiveInstant,
                issued,
                valueQuantity,
                valueCodeableConcept,
                valueString,
                valueBoolean,
                valueInteger,
                valueRange,
                valueRatio,
                valueSampledData,
                valueTime,
                valueDateTime,
                valuePeriod,
                dataAbsentReason,
                interpretation?.ToList(),
                note?.ToList(),
                bodySite,
                method,
                referenceRange?.ToList(),
                hasMember?.ToList(),
                derivedFrom?.ToList(),
                component?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Annotation"/>. </summary>
        /// <param name="id"></param>
        /// <param name="extension"></param>
        /// <param name="authorString"></param>
        /// <param name="time"></param>
        /// <param name="text"></param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Annotation"/> instance for mocking. </returns>
        public static FhirR4Annotation FhirR4Annotation(string id = null, IEnumerable<FhirR4Extension> extension = null, string authorString = null, string time = null, string text = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Annotation(
                id,
                extension?.ToList(),
                serializedAdditionalRawData: null,
                authorString,
                time,
                text);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4ObservationReferenceRange"/>. </summary>
        /// <param name="low"></param>
        /// <param name="high"></param>
        /// <param name="type"></param>
        /// <param name="appliesTo"></param>
        /// <param name="age"></param>
        /// <param name="text"></param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4ObservationReferenceRange"/> instance for mocking. </returns>
        public static FhirR4ObservationReferenceRange FhirR4ObservationReferenceRange(FhirR4Quantity low = null, FhirR4Quantity high = null, FhirR4CodeableConcept type = null, IEnumerable<FhirR4CodeableConcept> appliesTo = null, FhirR4Range age = null, string text = null)
        {
            appliesTo ??= new List<FhirR4CodeableConcept>();

            return new FhirR4ObservationReferenceRange(
                low,
                high,
                type,
                appliesTo?.ToList(),
                age,
                text,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4ObservationComponent"/>. </summary>
        /// <param name="id"></param>
        /// <param name="extension"></param>
        /// <param name="code"></param>
        /// <param name="valueQuantity"></param>
        /// <param name="valueCodeableConcept"></param>
        /// <param name="valueString"></param>
        /// <param name="valueBoolean"></param>
        /// <param name="valueInteger"></param>
        /// <param name="valueRange"></param>
        /// <param name="valueRatio"></param>
        /// <param name="valueSampledData"></param>
        /// <param name="valueTime"></param>
        /// <param name="valueDateTime"></param>
        /// <param name="valuePeriod"></param>
        /// <param name="valueReference"></param>
        /// <param name="dataAbsentReason"></param>
        /// <param name="interpretation"></param>
        /// <param name="referenceRange"></param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4ObservationComponent"/> instance for mocking. </returns>
        public static FhirR4ObservationComponent FhirR4ObservationComponent(string id = null, IEnumerable<FhirR4Extension> extension = null, FhirR4CodeableConcept code = null, FhirR4Quantity valueQuantity = null, FhirR4CodeableConcept valueCodeableConcept = null, string valueString = null, bool? valueBoolean = null, int? valueInteger = null, FhirR4Range valueRange = null, FhirR4Ratio valueRatio = null, FhirR4SampledData valueSampledData = null, TimeSpan? valueTime = null, string valueDateTime = null, FhirR4Period valuePeriod = null, FhirR4Reference valueReference = null, FhirR4CodeableConcept dataAbsentReason = null, IEnumerable<FhirR4CodeableConcept> interpretation = null, IEnumerable<FhirR4ObservationReferenceRange> referenceRange = null)
        {
            extension ??= new List<FhirR4Extension>();
            interpretation ??= new List<FhirR4CodeableConcept>();
            referenceRange ??= new List<FhirR4ObservationReferenceRange>();

            return new FhirR4ObservationComponent(
                id,
                extension?.ToList(),
                serializedAdditionalRawData: null,
                code,
                valueQuantity,
                valueCodeableConcept,
                valueString,
                valueBoolean,
                valueInteger,
                valueRange,
                valueRatio,
                valueSampledData,
                valueTime,
                valueDateTime,
                valuePeriod,
                valueReference,
                dataAbsentReason,
                interpretation?.ToList(),
                referenceRange?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4DomainResource"/>. </summary>
        /// <param name="resourceType"></param>
        /// <param name="id"></param>
        /// <param name="meta"></param>
        /// <param name="implicitRules"></param>
        /// <param name="language"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="text"></param>
        /// <param name="contained"></param>
        /// <param name="extension"></param>
        /// <param name="modifierExtension"></param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4DomainResource"/> instance for mocking. </returns>
        public static FhirR4DomainResource FhirR4DomainResource(string resourceType = null, string id = null, FhirR4Meta meta = null, string implicitRules = null, string language = null, IDictionary<string, BinaryData> additionalProperties = null, FhirR4Narrative text = null, IEnumerable<FhirR4Resource> contained = null, IEnumerable<FhirR4Extension> extension = null, IEnumerable<FhirR4Extension> modifierExtension = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            contained ??= new List<FhirR4Resource>();
            extension ??= new List<FhirR4Extension>();
            modifierExtension ??= new List<FhirR4Extension>();

            return new UnknownFhirR4DomainResource(
                resourceType,
                id,
                meta,
                implicitRules,
                language,
                additionalProperties,
                text,
                contained?.ToList(),
                extension?.ToList(),
                modifierExtension?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Narrative"/>. </summary>
        /// <param name="id"></param>
        /// <param name="extension"></param>
        /// <param name="status"></param>
        /// <param name="div"></param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Narrative"/> instance for mocking. </returns>
        public static FhirR4Narrative FhirR4Narrative(string id = null, IEnumerable<FhirR4Extension> extension = null, string status = null, string div = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Narrative(id, extension?.ToList(), serializedAdditionalRawData: null, status, div);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Condition"/>. </summary>
        /// <param name="id"></param>
        /// <param name="meta"></param>
        /// <param name="implicitRules"></param>
        /// <param name="language"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="text"></param>
        /// <param name="contained"></param>
        /// <param name="extension"></param>
        /// <param name="modifierExtension"></param>
        /// <param name="identifier"></param>
        /// <param name="clinicalStatus"></param>
        /// <param name="verificationStatus"></param>
        /// <param name="category"></param>
        /// <param name="severity"></param>
        /// <param name="code"></param>
        /// <param name="bodySite"></param>
        /// <param name="encounter"></param>
        /// <param name="onsetDateTime"></param>
        /// <param name="onsetAge"></param>
        /// <param name="onsetPeriod"></param>
        /// <param name="onsetRange"></param>
        /// <param name="onsetString"></param>
        /// <param name="abatementDateTime"></param>
        /// <param name="abatementAge"></param>
        /// <param name="abatementPeriod"></param>
        /// <param name="abatementRange"></param>
        /// <param name="abatementString"></param>
        /// <param name="recordedDate"></param>
        /// <param name="stage"></param>
        /// <param name="note"></param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Condition"/> instance for mocking. </returns>
        public static FhirR4Condition FhirR4Condition(string id = null, FhirR4Meta meta = null, string implicitRules = null, string language = null, IDictionary<string, BinaryData> additionalProperties = null, FhirR4Narrative text = null, IEnumerable<FhirR4Resource> contained = null, IEnumerable<FhirR4Extension> extension = null, IEnumerable<FhirR4Extension> modifierExtension = null, IEnumerable<FhirR4Identifier> identifier = null, FhirR4CodeableConcept clinicalStatus = null, FhirR4CodeableConcept verificationStatus = null, IEnumerable<FhirR4CodeableConcept> category = null, FhirR4CodeableConcept severity = null, FhirR4CodeableConcept code = null, IEnumerable<FhirR4CodeableConcept> bodySite = null, FhirR4Reference encounter = null, string onsetDateTime = null, FhirR4Quantity onsetAge = null, FhirR4Period onsetPeriod = null, FhirR4Range onsetRange = null, string onsetString = null, string abatementDateTime = null, FhirR4Quantity abatementAge = null, FhirR4Period abatementPeriod = null, FhirR4Range abatementRange = null, string abatementString = null, string recordedDate = null, IEnumerable<FhirR4ConditionStage> stage = null, IEnumerable<FhirR4Annotation> note = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            contained ??= new List<FhirR4Resource>();
            extension ??= new List<FhirR4Extension>();
            modifierExtension ??= new List<FhirR4Extension>();
            identifier ??= new List<FhirR4Identifier>();
            category ??= new List<FhirR4CodeableConcept>();
            bodySite ??= new List<FhirR4CodeableConcept>();
            stage ??= new List<FhirR4ConditionStage>();
            note ??= new List<FhirR4Annotation>();

            return new FhirR4Condition(
                "Condition",
                id,
                meta,
                implicitRules,
                language,
                additionalProperties,
                text,
                contained?.ToList(),
                extension?.ToList(),
                modifierExtension?.ToList(),
                identifier?.ToList(),
                clinicalStatus,
                verificationStatus,
                category?.ToList(),
                severity,
                code,
                bodySite?.ToList(),
                encounter,
                onsetDateTime,
                onsetAge,
                onsetPeriod,
                onsetRange,
                onsetString,
                abatementDateTime,
                abatementAge,
                abatementPeriod,
                abatementRange,
                abatementString,
                recordedDate,
                stage?.ToList(),
                note?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4ConditionStage"/>. </summary>
        /// <param name="summary"></param>
        /// <param name="type"></param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4ConditionStage"/> instance for mocking. </returns>
        public static FhirR4ConditionStage FhirR4ConditionStage(FhirR4CodeableConcept summary = null, FhirR4CodeableConcept type = null)
        {
            return new FhirR4ConditionStage(summary, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4ResearchStudy"/>. </summary>
        /// <param name="id"></param>
        /// <param name="meta"></param>
        /// <param name="implicitRules"></param>
        /// <param name="language"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="text"></param>
        /// <param name="contained"></param>
        /// <param name="extension"></param>
        /// <param name="modifierExtension"></param>
        /// <param name="identifier"></param>
        /// <param name="title"></param>
        /// <param name="protocol"></param>
        /// <param name="partOf"></param>
        /// <param name="status"></param>
        /// <param name="primaryPurposeType"></param>
        /// <param name="phase"></param>
        /// <param name="category"></param>
        /// <param name="focus"></param>
        /// <param name="condition"></param>
        /// <param name="contact"></param>
        /// <param name="keyword"></param>
        /// <param name="location"></param>
        /// <param name="description"></param>
        /// <param name="enrollment"></param>
        /// <param name="period"></param>
        /// <param name="sponsor"></param>
        /// <param name="principalInvestigator"></param>
        /// <param name="site"></param>
        /// <param name="reasonStopped"></param>
        /// <param name="note"></param>
        /// <param name="arm"></param>
        /// <param name="objective"></param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4ResearchStudy"/> instance for mocking. </returns>
        public static FhirR4ResearchStudy FhirR4ResearchStudy(string id = null, FhirR4Meta meta = null, string implicitRules = null, string language = null, IDictionary<string, BinaryData> additionalProperties = null, FhirR4Narrative text = null, IEnumerable<FhirR4Resource> contained = null, IEnumerable<FhirR4Extension> extension = null, IEnumerable<FhirR4Extension> modifierExtension = null, IEnumerable<FhirR4Identifier> identifier = null, string title = null, IEnumerable<FhirR4Reference> protocol = null, IEnumerable<FhirR4Reference> partOf = null, ResearchStudyStatusCodeType status = default, FhirR4CodeableConcept primaryPurposeType = null, FhirR4CodeableConcept phase = null, IEnumerable<FhirR4CodeableConcept> category = null, IEnumerable<FhirR4CodeableConcept> focus = null, IEnumerable<FhirR4CodeableConcept> condition = null, IEnumerable<FhirR4ContactDetail> contact = null, IEnumerable<FhirR4CodeableConcept> keyword = null, IEnumerable<FhirR4CodeableConcept> location = null, string description = null, IEnumerable<FhirR4Reference> enrollment = null, FhirR4Period period = null, FhirR4Reference sponsor = null, FhirR4Reference principalInvestigator = null, IEnumerable<FhirR4Reference> site = null, FhirR4CodeableConcept reasonStopped = null, IEnumerable<FhirR4Annotation> note = null, IEnumerable<ResearchStudyArm> arm = null, IEnumerable<ResearchStudyObjective> objective = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            contained ??= new List<FhirR4Resource>();
            extension ??= new List<FhirR4Extension>();
            modifierExtension ??= new List<FhirR4Extension>();
            identifier ??= new List<FhirR4Identifier>();
            protocol ??= new List<FhirR4Reference>();
            partOf ??= new List<FhirR4Reference>();
            category ??= new List<FhirR4CodeableConcept>();
            focus ??= new List<FhirR4CodeableConcept>();
            condition ??= new List<FhirR4CodeableConcept>();
            contact ??= new List<FhirR4ContactDetail>();
            keyword ??= new List<FhirR4CodeableConcept>();
            location ??= new List<FhirR4CodeableConcept>();
            enrollment ??= new List<FhirR4Reference>();
            site ??= new List<FhirR4Reference>();
            note ??= new List<FhirR4Annotation>();
            arm ??= new List<ResearchStudyArm>();
            objective ??= new List<ResearchStudyObjective>();

            return new FhirR4ResearchStudy(
                "ResearchStudy",
                id,
                meta,
                implicitRules,
                language,
                additionalProperties,
                text,
                contained?.ToList(),
                extension?.ToList(),
                modifierExtension?.ToList(),
                identifier?.ToList(),
                title,
                protocol?.ToList(),
                partOf?.ToList(),
                status,
                primaryPurposeType,
                phase,
                category?.ToList(),
                focus?.ToList(),
                condition?.ToList(),
                contact?.ToList(),
                keyword?.ToList(),
                location?.ToList(),
                description,
                enrollment?.ToList(),
                period,
                sponsor,
                principalInvestigator,
                site?.ToList(),
                reasonStopped,
                note?.ToList(),
                arm?.ToList(),
                objective?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4ContactDetail"/>. </summary>
        /// <param name="id"></param>
        /// <param name="extension"></param>
        /// <param name="name"></param>
        /// <param name="telecom"></param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4ContactDetail"/> instance for mocking. </returns>
        public static FhirR4ContactDetail FhirR4ContactDetail(string id = null, IEnumerable<FhirR4Extension> extension = null, string name = null, IEnumerable<FhirR4ContactPoint> telecom = null)
        {
            extension ??= new List<FhirR4Extension>();
            telecom ??= new List<FhirR4ContactPoint>();

            return new FhirR4ContactDetail(id, extension?.ToList(), serializedAdditionalRawData: null, name, telecom?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4ContactPoint"/>. </summary>
        /// <param name="system"></param>
        /// <param name="value"></param>
        /// <param name="use"></param>
        /// <param name="rank"></param>
        /// <param name="period"></param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4ContactPoint"/> instance for mocking. </returns>
        public static FhirR4ContactPoint FhirR4ContactPoint(ContactPointSystem? system = null, string value = null, ContactPointUse? use = null, int? rank = null, FhirR4Period period = null)
        {
            return new FhirR4ContactPoint(
                system,
                value,
                use,
                rank,
                period,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.ResearchStudyArm"/>. </summary>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <param name="description"></param>
        /// <returns> A new <see cref="RadiologyInsights.ResearchStudyArm"/> instance for mocking. </returns>
        public static ResearchStudyArm ResearchStudyArm(string name = null, FhirR4CodeableConcept type = null, string description = null)
        {
            return new ResearchStudyArm(name, type, description, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.ResearchStudyObjective"/>. </summary>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <returns> A new <see cref="RadiologyInsights.ResearchStudyObjective"/> instance for mocking. </returns>
        public static ResearchStudyObjective ResearchStudyObjective(string name = null, FhirR4CodeableConcept type = null)
        {
            return new ResearchStudyObjective(name, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.CriticalResultInference"/>. </summary>
        /// <param name="extension"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="RadiologyInsights.CriticalResultInference"/> instance for mocking. </returns>
        public static CriticalResultInference CriticalResultInference(IEnumerable<FhirR4Extension> extension = null, CriticalResult result = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new CriticalResultInference(RadiologyInsightsInferenceType.CriticalResult, extension?.ToList(), serializedAdditionalRawData: null, result);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.CriticalResult"/>. </summary>
        /// <param name="description"></param>
        /// <param name="finding"></param>
        /// <returns> A new <see cref="RadiologyInsights.CriticalResult"/> instance for mocking. </returns>
        public static CriticalResult CriticalResult(string description = null, FhirR4Observation finding = null)
        {
            return new CriticalResult(description, finding, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.RadiologyProcedureInference"/>. </summary>
        /// <param name="extension"></param>
        /// <param name="procedureCodes"></param>
        /// <param name="imagingProcedures"></param>
        /// <param name="orderedProcedure"></param>
        /// <returns> A new <see cref="RadiologyInsights.RadiologyProcedureInference"/> instance for mocking. </returns>
        public static RadiologyProcedureInference RadiologyProcedureInference(IEnumerable<FhirR4Extension> extension = null, IEnumerable<FhirR4CodeableConcept> procedureCodes = null, IEnumerable<ImagingProcedure> imagingProcedures = null, OrderedProcedure orderedProcedure = null)
        {
            extension ??= new List<FhirR4Extension>();
            procedureCodes ??= new List<FhirR4CodeableConcept>();
            imagingProcedures ??= new List<ImagingProcedure>();

            return new RadiologyProcedureInference(
                RadiologyInsightsInferenceType.RadiologyProcedure,
                extension?.ToList(),
                serializedAdditionalRawData: null,
                procedureCodes?.ToList(),
                imagingProcedures?.ToList(),
                orderedProcedure);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.ImagingProcedure"/>. </summary>
        /// <param name="modality"></param>
        /// <param name="anatomy"></param>
        /// <param name="laterality"></param>
        /// <param name="contrast"></param>
        /// <param name="view"></param>
        /// <returns> A new <see cref="RadiologyInsights.ImagingProcedure"/> instance for mocking. </returns>
        public static ImagingProcedure ImagingProcedure(FhirR4CodeableConcept modality = null, FhirR4CodeableConcept anatomy = null, FhirR4CodeableConcept laterality = null, RadiologyCodeWithTypes contrast = null, RadiologyCodeWithTypes view = null)
        {
            return new ImagingProcedure(
                modality,
                anatomy,
                laterality,
                contrast,
                view,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.RadiologyCodeWithTypes"/>. </summary>
        /// <param name="code"></param>
        /// <param name="types"></param>
        /// <returns> A new <see cref="RadiologyInsights.RadiologyCodeWithTypes"/> instance for mocking. </returns>
        public static RadiologyCodeWithTypes RadiologyCodeWithTypes(FhirR4CodeableConcept code = null, IEnumerable<FhirR4CodeableConcept> types = null)
        {
            types ??= new List<FhirR4CodeableConcept>();

            return new RadiologyCodeWithTypes(code, types?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FollowupRecommendationInference"/>. </summary>
        /// <param name="extension"></param>
        /// <param name="effectiveAt"></param>
        /// <param name="effectivePeriod"></param>
        /// <param name="findings"></param>
        /// <param name="isConditional"></param>
        /// <param name="isOption"></param>
        /// <param name="isGuideline"></param>
        /// <param name="isHedging"></param>
        /// <param name="recommendedProcedure">
        /// Please note <see cref="RadiologyInsights.ProcedureRecommendation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="RadiologyInsights.GenericProcedureRecommendation"/> and <see cref="RadiologyInsights.ImagingProcedureRecommendation"/>.
        /// </param>
        /// <returns> A new <see cref="RadiologyInsights.FollowupRecommendationInference"/> instance for mocking. </returns>
        public static FollowupRecommendationInference FollowupRecommendationInference(IEnumerable<FhirR4Extension> extension = null, string effectiveAt = null, FhirR4Period effectivePeriod = null, IEnumerable<RecommendationFinding> findings = null, bool isConditional = default, bool isOption = default, bool isGuideline = default, bool isHedging = default, ProcedureRecommendation recommendedProcedure = null)
        {
            extension ??= new List<FhirR4Extension>();
            findings ??= new List<RecommendationFinding>();

            return new FollowupRecommendationInference(
                RadiologyInsightsInferenceType.FollowupRecommendation,
                extension?.ToList(),
                serializedAdditionalRawData: null,
                effectiveAt,
                effectivePeriod,
                findings?.ToList(),
                isConditional,
                isOption,
                isGuideline,
                isHedging,
                recommendedProcedure);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.RecommendationFinding"/>. </summary>
        /// <param name="finding"></param>
        /// <param name="criticalFinding"></param>
        /// <param name="recommendationFindingStatus"></param>
        /// <param name="extension"></param>
        /// <returns> A new <see cref="RadiologyInsights.RecommendationFinding"/> instance for mocking. </returns>
        public static RecommendationFinding RecommendationFinding(FhirR4Observation finding = null, CriticalResult criticalFinding = null, RecommendationFindingStatusType recommendationFindingStatus = default, IEnumerable<FhirR4Extension> extension = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new RecommendationFinding(finding, criticalFinding, recommendationFindingStatus, extension?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.ProcedureRecommendation"/>. </summary>
        /// <param name="kind"></param>
        /// <param name="extension"></param>
        /// <returns> A new <see cref="RadiologyInsights.ProcedureRecommendation"/> instance for mocking. </returns>
        public static ProcedureRecommendation ProcedureRecommendation(string kind = null, IEnumerable<FhirR4Extension> extension = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new UnknownProcedureRecommendation(kind, extension?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.GenericProcedureRecommendation"/>. </summary>
        /// <param name="extension"></param>
        /// <param name="code"></param>
        /// <param name="description"></param>
        /// <returns> A new <see cref="RadiologyInsights.GenericProcedureRecommendation"/> instance for mocking. </returns>
        public static GenericProcedureRecommendation GenericProcedureRecommendation(IEnumerable<FhirR4Extension> extension = null, FhirR4CodeableConcept code = null, string description = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new GenericProcedureRecommendation("genericProcedureRecommendation", extension?.ToList(), serializedAdditionalRawData: null, code, description);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.ImagingProcedureRecommendation"/>. </summary>
        /// <param name="extension"></param>
        /// <param name="procedureCodes"></param>
        /// <param name="imagingProcedures"></param>
        /// <returns> A new <see cref="RadiologyInsights.ImagingProcedureRecommendation"/> instance for mocking. </returns>
        public static ImagingProcedureRecommendation ImagingProcedureRecommendation(IEnumerable<FhirR4Extension> extension = null, IEnumerable<FhirR4CodeableConcept> procedureCodes = null, IEnumerable<ImagingProcedure> imagingProcedures = null)
        {
            extension ??= new List<FhirR4Extension>();
            procedureCodes ??= new List<FhirR4CodeableConcept>();
            imagingProcedures ??= new List<ImagingProcedure>();

            return new ImagingProcedureRecommendation("imagingProcedureRecommendation", extension?.ToList(), serializedAdditionalRawData: null, procedureCodes?.ToList(), imagingProcedures?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FollowupCommunicationInference"/>. </summary>
        /// <param name="extension"></param>
        /// <param name="communicatedAt"></param>
        /// <param name="recipient"></param>
        /// <param name="wasAcknowledged"></param>
        /// <returns> A new <see cref="RadiologyInsights.FollowupCommunicationInference"/> instance for mocking. </returns>
        public static FollowupCommunicationInference FollowupCommunicationInference(IEnumerable<FhirR4Extension> extension = null, IEnumerable<DateTimeOffset> communicatedAt = null, IEnumerable<MedicalProfessionalType> recipient = null, bool wasAcknowledged = default)
        {
            extension ??= new List<FhirR4Extension>();
            communicatedAt ??= new List<DateTimeOffset>();
            recipient ??= new List<MedicalProfessionalType>();

            return new FollowupCommunicationInference(
                RadiologyInsightsInferenceType.FollowupCommunication,
                extension?.ToList(),
                serializedAdditionalRawData: null,
                communicatedAt?.ToList(),
                recipient?.ToList(),
                wasAcknowledged);
        }
    }
}
