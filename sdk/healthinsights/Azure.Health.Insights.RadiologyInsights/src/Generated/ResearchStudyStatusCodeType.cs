// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> The ResearchStudyStatusCodeType. </summary>
    public readonly partial struct ResearchStudyStatusCodeType : IEquatable<ResearchStudyStatusCodeType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResearchStudyStatusCodeType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResearchStudyStatusCodeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "active";
        private const string AdministrativelyCompletedValue = "administratively-completed";
        private const string ApprovedValue = "approved";
        private const string ClosedToAccrualValue = "closed-to-accrual";
        private const string ClosedToAccrualAndInterventionValue = "closed-to-accrual-and-intervention";
        private const string CompletedValue = "completed";
        private const string DisapprovedValue = "disapproved";
        private const string InReviewValue = "in-review";
        private const string TemporarilyClosedToAccrualValue = "temporarily-closed-to-accrual";
        private const string TemporarilyClosedToAccrualAndInterventionValue = "temporarily-closed-to-accrual-and-intervention";
        private const string WithdrawnValue = "withdrawn";

        /// <summary> active. </summary>
        public static ResearchStudyStatusCodeType Active { get; } = new ResearchStudyStatusCodeType(ActiveValue);
        /// <summary> administratively-completed. </summary>
        public static ResearchStudyStatusCodeType AdministrativelyCompleted { get; } = new ResearchStudyStatusCodeType(AdministrativelyCompletedValue);
        /// <summary> approved. </summary>
        public static ResearchStudyStatusCodeType Approved { get; } = new ResearchStudyStatusCodeType(ApprovedValue);
        /// <summary> closed-to-accrual. </summary>
        public static ResearchStudyStatusCodeType ClosedToAccrual { get; } = new ResearchStudyStatusCodeType(ClosedToAccrualValue);
        /// <summary> closed-to-accrual-and-intervention. </summary>
        public static ResearchStudyStatusCodeType ClosedToAccrualAndIntervention { get; } = new ResearchStudyStatusCodeType(ClosedToAccrualAndInterventionValue);
        /// <summary> completed. </summary>
        public static ResearchStudyStatusCodeType Completed { get; } = new ResearchStudyStatusCodeType(CompletedValue);
        /// <summary> disapproved. </summary>
        public static ResearchStudyStatusCodeType Disapproved { get; } = new ResearchStudyStatusCodeType(DisapprovedValue);
        /// <summary> in-review. </summary>
        public static ResearchStudyStatusCodeType InReview { get; } = new ResearchStudyStatusCodeType(InReviewValue);
        /// <summary> temporarily-closed-to-accrual. </summary>
        public static ResearchStudyStatusCodeType TemporarilyClosedToAccrual { get; } = new ResearchStudyStatusCodeType(TemporarilyClosedToAccrualValue);
        /// <summary> temporarily-closed-to-accrual-and-intervention. </summary>
        public static ResearchStudyStatusCodeType TemporarilyClosedToAccrualAndIntervention { get; } = new ResearchStudyStatusCodeType(TemporarilyClosedToAccrualAndInterventionValue);
        /// <summary> withdrawn. </summary>
        public static ResearchStudyStatusCodeType Withdrawn { get; } = new ResearchStudyStatusCodeType(WithdrawnValue);
        /// <summary> Determines if two <see cref="ResearchStudyStatusCodeType"/> values are the same. </summary>
        public static bool operator ==(ResearchStudyStatusCodeType left, ResearchStudyStatusCodeType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResearchStudyStatusCodeType"/> values are not the same. </summary>
        public static bool operator !=(ResearchStudyStatusCodeType left, ResearchStudyStatusCodeType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ResearchStudyStatusCodeType"/>. </summary>
        public static implicit operator ResearchStudyStatusCodeType(string value) => new ResearchStudyStatusCodeType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResearchStudyStatusCodeType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResearchStudyStatusCodeType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
