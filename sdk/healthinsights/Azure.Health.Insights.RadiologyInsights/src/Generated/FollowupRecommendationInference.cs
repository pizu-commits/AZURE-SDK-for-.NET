// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> The FollowupRecommendationInference. </summary>
    public partial class FollowupRecommendationInference : RadiologyInsightsInference
    {
        /// <summary> Initializes a new instance of <see cref="FollowupRecommendationInference"/>. </summary>
        /// <param name="isConditional"></param>
        /// <param name="isOption"></param>
        /// <param name="isGuideline"></param>
        /// <param name="isHedging"></param>
        /// <param name="recommendedProcedure">
        /// Please note <see cref="ProcedureRecommendation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="GenericProcedureRecommendation"/> and <see cref="ImagingProcedureRecommendation"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendedProcedure"/> is null. </exception>
        internal FollowupRecommendationInference(bool isConditional, bool isOption, bool isGuideline, bool isHedging, ProcedureRecommendation recommendedProcedure)
        {
            Argument.AssertNotNull(recommendedProcedure, nameof(recommendedProcedure));

            Kind = RadiologyInsightsInferenceType.FollowupRecommendation;
            Findings = new ChangeTrackingList<RecommendationFinding>();
            IsConditional = isConditional;
            IsOption = isOption;
            IsGuideline = isGuideline;
            IsHedging = isHedging;
            RecommendedProcedure = recommendedProcedure;
        }

        /// <summary> Initializes a new instance of <see cref="FollowupRecommendationInference"/>. </summary>
        /// <param name="kind"></param>
        /// <param name="extension"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="effectiveAt"></param>
        /// <param name="effectivePeriod"></param>
        /// <param name="findings"></param>
        /// <param name="isConditional"></param>
        /// <param name="isOption"></param>
        /// <param name="isGuideline"></param>
        /// <param name="isHedging"></param>
        /// <param name="recommendedProcedure">
        /// Please note <see cref="ProcedureRecommendation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="GenericProcedureRecommendation"/> and <see cref="ImagingProcedureRecommendation"/>.
        /// </param>
        internal FollowupRecommendationInference(RadiologyInsightsInferenceType kind, IReadOnlyList<FhirR4Extension> extension, IDictionary<string, BinaryData> serializedAdditionalRawData, string effectiveAt, FhirR4Period effectivePeriod, IReadOnlyList<RecommendationFinding> findings, bool isConditional, bool isOption, bool isGuideline, bool isHedging, ProcedureRecommendation recommendedProcedure) : base(kind, extension, serializedAdditionalRawData)
        {
            EffectiveAt = effectiveAt;
            EffectivePeriod = effectivePeriod;
            Findings = findings;
            IsConditional = isConditional;
            IsOption = isOption;
            IsGuideline = isGuideline;
            IsHedging = isHedging;
            RecommendedProcedure = recommendedProcedure;
        }

        /// <summary> Initializes a new instance of <see cref="FollowupRecommendationInference"/> for deserialization. </summary>
        internal FollowupRecommendationInference()
        {
        }

        /// <summary> Gets the effective at. </summary>
        public string EffectiveAt { get; }
        /// <summary> Gets the effective period. </summary>
        public FhirR4Period EffectivePeriod { get; }
        /// <summary> Gets the findings. </summary>
        public IReadOnlyList<RecommendationFinding> Findings { get; }
        /// <summary> Gets the is conditional. </summary>
        public bool IsConditional { get; }
        /// <summary> Gets the is option. </summary>
        public bool IsOption { get; }
        /// <summary> Gets the is guideline. </summary>
        public bool IsGuideline { get; }
        /// <summary> Gets the is hedging. </summary>
        public bool IsHedging { get; }
        /// <summary>
        /// Gets the recommended procedure
        /// Please note <see cref="ProcedureRecommendation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="GenericProcedureRecommendation"/> and <see cref="ImagingProcedureRecommendation"/>.
        /// </summary>
        public ProcedureRecommendation RecommendedProcedure { get; }
    }
}
