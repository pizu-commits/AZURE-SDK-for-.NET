// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> The EncounterClass. </summary>
    public readonly partial struct EncounterClass : IEquatable<EncounterClass>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EncounterClass"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EncounterClass(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InPatientValue = "inpatient";
        private const string AmbulatoryValue = "ambulatory";
        private const string ObservationValue = "observation";
        private const string EmergencyValue = "emergency";
        private const string VirtualValue = "virtual";
        private const string HealthHomeValue = "healthHome";

        /// <summary> inpatient. </summary>
        public static EncounterClass InPatient { get; } = new EncounterClass(InPatientValue);
        /// <summary> ambulatory. </summary>
        public static EncounterClass Ambulatory { get; } = new EncounterClass(AmbulatoryValue);
        /// <summary> observation. </summary>
        public static EncounterClass Observation { get; } = new EncounterClass(ObservationValue);
        /// <summary> emergency. </summary>
        public static EncounterClass Emergency { get; } = new EncounterClass(EmergencyValue);
        /// <summary> virtual. </summary>
        public static EncounterClass Virtual { get; } = new EncounterClass(VirtualValue);
        /// <summary> healthHome. </summary>
        public static EncounterClass HealthHome { get; } = new EncounterClass(HealthHomeValue);
        /// <summary> Determines if two <see cref="EncounterClass"/> values are the same. </summary>
        public static bool operator ==(EncounterClass left, EncounterClass right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EncounterClass"/> values are not the same. </summary>
        public static bool operator !=(EncounterClass left, EncounterClass right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EncounterClass"/>. </summary>
        public static implicit operator EncounterClass(string value) => new EncounterClass(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EncounterClass other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EncounterClass other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
