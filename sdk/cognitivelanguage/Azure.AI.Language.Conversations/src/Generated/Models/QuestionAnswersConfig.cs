// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Language.Conversations.Models
{
    /// <summary> The QuestionAnswersConfig. </summary>
    public partial class QuestionAnswersConfig
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="QuestionAnswersConfig"/>. </summary>
        public QuestionAnswersConfig()
        {
        }

        /// <summary> Initializes a new instance of <see cref="QuestionAnswersConfig"/>. </summary>
        /// <param name="qnaId"></param>
        /// <param name="question"></param>
        /// <param name="top"></param>
        /// <param name="userId"></param>
        /// <param name="confidenceThreshold"></param>
        /// <param name="answerContext"></param>
        /// <param name="rankerKind"></param>
        /// <param name="filters"></param>
        /// <param name="shortAnswerOptions"></param>
        /// <param name="includeUnstructuredSources"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal QuestionAnswersConfig(int? qnaId, string question, int? top, string userId, double? confidenceThreshold, KnowledgeBaseAnswerContext answerContext, RankerKind? rankerKind, QueryFilters filters, ShortAnswerConfig shortAnswerOptions, bool? includeUnstructuredSources, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            QnaId = qnaId;
            Question = question;
            Top = top;
            UserId = userId;
            ConfidenceThreshold = confidenceThreshold;
            AnswerContext = answerContext;
            RankerKind = rankerKind;
            Filters = filters;
            ShortAnswerOptions = shortAnswerOptions;
            IncludeUnstructuredSources = includeUnstructuredSources;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets the qna id. </summary>
        public int? QnaId { get; set; }
        /// <summary> Gets or sets the question. </summary>
        public string Question { get; set; }
        /// <summary> Gets or sets the top. </summary>
        public int? Top { get; set; }
        /// <summary> Gets or sets the user id. </summary>
        public string UserId { get; set; }
        /// <summary> Gets or sets the confidence threshold. </summary>
        public double? ConfidenceThreshold { get; set; }
        /// <summary> Gets or sets the answer context. </summary>
        public KnowledgeBaseAnswerContext AnswerContext { get; set; }
        /// <summary> Gets or sets the ranker kind. </summary>
        public RankerKind? RankerKind { get; set; }
        /// <summary> Gets or sets the filters. </summary>
        public QueryFilters Filters { get; set; }
        /// <summary> Gets or sets the short answer options. </summary>
        public ShortAnswerConfig ShortAnswerOptions { get; set; }
        /// <summary> Gets or sets the include unstructured sources. </summary>
        public bool? IncludeUnstructuredSources { get; set; }
    }
}
