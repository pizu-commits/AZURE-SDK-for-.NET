// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.AI.Language.Conversations.Models;

namespace Azure.AI.Language.Conversations
{
    /// <summary> Model factory for models. </summary>
    public static partial class ConversationsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.ConversationLanguageUnderstandingInput"/>. </summary>
        /// <param name="conversationInput"></param>
        /// <param name="actionContent"></param>
        /// <returns> A new <see cref="Models.ConversationLanguageUnderstandingInput"/> instance for mocking. </returns>
        public static ConversationLanguageUnderstandingInput ConversationLanguageUnderstandingInput(ConversationAnalysisInput conversationInput = null, ConversationLanguageUnderstandingActionContent actionContent = null)
        {
            return new ConversationLanguageUnderstandingInput(AnalyzeConversationInputKind.Conversation, serializedAdditionalRawData: null, conversationInput, actionContent);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextConversationItem"/>. </summary>
        /// <param name="id"></param>
        /// <param name="participantId"></param>
        /// <param name="language"></param>
        /// <param name="modality"></param>
        /// <param name="role"></param>
        /// <param name="text"></param>
        /// <returns> A new <see cref="Models.TextConversationItem"/> instance for mocking. </returns>
        public static TextConversationItem TextConversationItem(string id = null, string participantId = null, string language = null, InputModality? modality = null, ParticipantRole? role = null, string text = null)
        {
            return new TextConversationItem(
                id,
                participantId,
                language,
                modality,
                role,
                text,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationLanguageUnderstandingActionContent"/>. </summary>
        /// <param name="projectName"></param>
        /// <param name="deploymentName"></param>
        /// <param name="verbose"></param>
        /// <param name="isLoggingEnabled"></param>
        /// <param name="stringIndexType"></param>
        /// <param name="directTarget"></param>
        /// <param name="targetProjectParameters">
        /// Please note <see cref="AnalysisConfig"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ConversationConfig"/>, <see cref="LuisConfig"/> and <see cref="QuestionAnsweringConfig"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ConversationLanguageUnderstandingActionContent"/> instance for mocking. </returns>
        public static ConversationLanguageUnderstandingActionContent ConversationLanguageUnderstandingActionContent(string projectName = null, string deploymentName = null, bool? verbose = null, bool? isLoggingEnabled = null, StringIndexType? stringIndexType = null, string directTarget = null, IDictionary<string, AnalysisConfig> targetProjectParameters = null)
        {
            targetProjectParameters ??= new Dictionary<string, AnalysisConfig>();

            return new ConversationLanguageUnderstandingActionContent(
                projectName,
                deploymentName,
                verbose,
                isLoggingEnabled,
                stringIndexType,
                directTarget,
                targetProjectParameters,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.KnowledgeBaseAnswerContext"/>. </summary>
        /// <param name="previousQnaId"></param>
        /// <param name="previousQuestion"></param>
        /// <returns> A new <see cref="Models.KnowledgeBaseAnswerContext"/> instance for mocking. </returns>
        public static KnowledgeBaseAnswerContext KnowledgeBaseAnswerContext(int previousQnaId = default, string previousQuestion = null)
        {
            return new KnowledgeBaseAnswerContext(previousQnaId, previousQuestion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationActionResult"/>. </summary>
        /// <param name="result"></param>
        /// <returns> A new <see cref="Models.ConversationActionResult"/> instance for mocking. </returns>
        public static ConversationActionResult ConversationActionResult(AnalyzeConversationResult result = null)
        {
            return new ConversationActionResult(AnalyzeConversationResultKind.ConversationResult, serializedAdditionalRawData: null, result);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AnalyzeConversationResult"/>. </summary>
        /// <param name="query"></param>
        /// <param name="detectedLanguage"></param>
        /// <param name="prediction">
        /// Please note <see cref="Models.PredictionBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.ConversationPrediction"/> and <see cref="Models.OrchestrationPrediction"/>.
        /// </param>
        /// <returns> A new <see cref="Models.AnalyzeConversationResult"/> instance for mocking. </returns>
        public static AnalyzeConversationResult AnalyzeConversationResult(string query = null, string detectedLanguage = null, PredictionBase prediction = null)
        {
            return new AnalyzeConversationResult(query, detectedLanguage, prediction, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PredictionBase"/>. </summary>
        /// <param name="projectKind"></param>
        /// <param name="topIntent"></param>
        /// <returns> A new <see cref="Models.PredictionBase"/> instance for mocking. </returns>
        public static PredictionBase PredictionBase(string projectKind = null, string topIntent = null)
        {
            return new UnknownPredictionBase(projectKind == null ? default : new ProjectKind(projectKind), topIntent, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationPrediction"/>. </summary>
        /// <param name="topIntent"></param>
        /// <param name="intents"></param>
        /// <param name="entities"></param>
        /// <returns> A new <see cref="Models.ConversationPrediction"/> instance for mocking. </returns>
        public static ConversationPrediction ConversationPrediction(string topIntent = null, IEnumerable<ConversationIntent> intents = null, IEnumerable<ConversationEntity> entities = null)
        {
            intents ??= new List<ConversationIntent>();
            entities ??= new List<ConversationEntity>();

            return new ConversationPrediction(ProjectKind.Conversation, topIntent, serializedAdditionalRawData: null, intents?.ToList(), entities?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationIntent"/>. </summary>
        /// <param name="category"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="Models.ConversationIntent"/> instance for mocking. </returns>
        public static ConversationIntent ConversationIntent(string category = null, float confidence = default)
        {
            return new ConversationIntent(category, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationEntity"/>. </summary>
        /// <param name="category"></param>
        /// <param name="text"></param>
        /// <param name="offset"></param>
        /// <param name="length"></param>
        /// <param name="confidence"></param>
        /// <param name="resolutions">
        /// Please note <see cref="ResolutionBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.AgeResolution"/>, <see cref="Models.AreaResolution"/>, <see cref="Models.BooleanResolution"/>, <see cref="Models.CurrencyResolution"/>, <see cref="Models.DateTimeResolution"/>, <see cref="Models.InformationResolution"/>, <see cref="Models.LengthResolution"/>, <see cref="Models.NumberResolution"/>, <see cref="Models.NumericRangeResolution"/>, <see cref="Models.OrdinalResolution"/>, <see cref="Models.SpeedResolution"/>, <see cref="Models.TemperatureResolution"/>, <see cref="Models.TemporalSpanResolution"/>, <see cref="Models.VolumeResolution"/> and <see cref="Models.WeightResolution"/>.
        /// </param>
        /// <param name="extraInformation">
        /// Please note <see cref="ConversationEntityExtraInformation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.EntitySubtype"/>, <see cref="Models.ListKey"/> and <see cref="Models.RegexKey"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ConversationEntity"/> instance for mocking. </returns>
        public static ConversationEntity ConversationEntity(string category = null, string text = null, int offset = default, int length = default, float confidence = default, IEnumerable<ResolutionBase> resolutions = null, IEnumerable<ConversationEntityExtraInformation> extraInformation = null)
        {
            resolutions ??= new List<ResolutionBase>();
            extraInformation ??= new List<ConversationEntityExtraInformation>();

            return new ConversationEntity(
                category,
                text,
                offset,
                length,
                confidence,
                resolutions?.ToList(),
                extraInformation?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AgeResolution"/>. </summary>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="Models.AgeResolution"/> instance for mocking. </returns>
        public static AgeResolution AgeResolution(double value = default, AgeUnit unit = default)
        {
            return new AgeResolution(ResolutionKind.AgeResolution, serializedAdditionalRawData: null, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VolumeResolution"/>. </summary>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="Models.VolumeResolution"/> instance for mocking. </returns>
        public static VolumeResolution VolumeResolution(double value = default, VolumeUnit unit = default)
        {
            return new VolumeResolution(ResolutionKind.VolumeResolution, serializedAdditionalRawData: null, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SpeedResolution"/>. </summary>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="Models.SpeedResolution"/> instance for mocking. </returns>
        public static SpeedResolution SpeedResolution(double value = default, SpeedUnit unit = default)
        {
            return new SpeedResolution(ResolutionKind.SpeedResolution, serializedAdditionalRawData: null, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AreaResolution"/>. </summary>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="Models.AreaResolution"/> instance for mocking. </returns>
        public static AreaResolution AreaResolution(double value = default, AreaUnit unit = default)
        {
            return new AreaResolution(ResolutionKind.AreaResolution, serializedAdditionalRawData: null, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LengthResolution"/>. </summary>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="Models.LengthResolution"/> instance for mocking. </returns>
        public static LengthResolution LengthResolution(double value = default, LengthUnit unit = default)
        {
            return new LengthResolution(ResolutionKind.LengthResolution, serializedAdditionalRawData: null, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InformationResolution"/>. </summary>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="Models.InformationResolution"/> instance for mocking. </returns>
        public static InformationResolution InformationResolution(double value = default, InformationUnit unit = default)
        {
            return new InformationResolution(ResolutionKind.InformationResolution, serializedAdditionalRawData: null, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TemperatureResolution"/>. </summary>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="Models.TemperatureResolution"/> instance for mocking. </returns>
        public static TemperatureResolution TemperatureResolution(double value = default, TemperatureUnit unit = default)
        {
            return new TemperatureResolution(ResolutionKind.TemperatureResolution, serializedAdditionalRawData: null, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="Models.WeightResolution"/>. </summary>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="Models.WeightResolution"/> instance for mocking. </returns>
        public static WeightResolution WeightResolution(double value = default, WeightUnit unit = default)
        {
            return new WeightResolution(ResolutionKind.WeightResolution, serializedAdditionalRawData: null, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CurrencyResolution"/>. </summary>
        /// <param name="iso4217"></param>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="Models.CurrencyResolution"/> instance for mocking. </returns>
        public static CurrencyResolution CurrencyResolution(string iso4217 = null, double value = default, string unit = null)
        {
            return new CurrencyResolution(ResolutionKind.CurrencyResolution, serializedAdditionalRawData: null, iso4217, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="Models.BooleanResolution"/>. </summary>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.BooleanResolution"/> instance for mocking. </returns>
        public static BooleanResolution BooleanResolution(bool value = default)
        {
            return new BooleanResolution(ResolutionKind.BooleanResolution, serializedAdditionalRawData: null, value);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DateTimeResolution"/>. </summary>
        /// <param name="timex"></param>
        /// <param name="dateTimeSubKind"></param>
        /// <param name="value"></param>
        /// <param name="modifier"></param>
        /// <returns> A new <see cref="Models.DateTimeResolution"/> instance for mocking. </returns>
        public static DateTimeResolution DateTimeResolution(string timex = null, DateTimeSubKind dateTimeSubKind = default, string value = null, TemporalModifier? modifier = null)
        {
            return new DateTimeResolution(
                ResolutionKind.DateTimeResolution,
                serializedAdditionalRawData: null,
                timex,
                dateTimeSubKind,
                value,
                modifier);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NumberResolution"/>. </summary>
        /// <param name="numberKind"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.NumberResolution"/> instance for mocking. </returns>
        public static NumberResolution NumberResolution(NumberKind numberKind = default, double value = default)
        {
            return new NumberResolution(ResolutionKind.NumberResolution, serializedAdditionalRawData: null, numberKind, value);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OrdinalResolution"/>. </summary>
        /// <param name="offset"></param>
        /// <param name="relativeTo"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.OrdinalResolution"/> instance for mocking. </returns>
        public static OrdinalResolution OrdinalResolution(string offset = null, RelativeTo relativeTo = default, string value = null)
        {
            return new OrdinalResolution(ResolutionKind.OrdinalResolution, serializedAdditionalRawData: null, offset, relativeTo, value);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TemporalSpanResolution"/>. </summary>
        /// <param name="begin"></param>
        /// <param name="end"></param>
        /// <param name="duration"></param>
        /// <param name="modifier"></param>
        /// <param name="timex"></param>
        /// <returns> A new <see cref="Models.TemporalSpanResolution"/> instance for mocking. </returns>
        public static TemporalSpanResolution TemporalSpanResolution(string begin = null, string end = null, string duration = null, TemporalModifier? modifier = null, string timex = null)
        {
            return new TemporalSpanResolution(
                ResolutionKind.TemporalSpanResolution,
                serializedAdditionalRawData: null,
                begin,
                end,
                duration,
                modifier,
                timex);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NumericRangeResolution"/>. </summary>
        /// <param name="rangeKind"></param>
        /// <param name="minimum"></param>
        /// <param name="maximum"></param>
        /// <returns> A new <see cref="Models.NumericRangeResolution"/> instance for mocking. </returns>
        public static NumericRangeResolution NumericRangeResolution(RangeKind rangeKind = default, double minimum = default, double maximum = default)
        {
            return new NumericRangeResolution(ResolutionKind.NumericRangeResolution, serializedAdditionalRawData: null, rangeKind, minimum, maximum);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EntitySubtype"/>. </summary>
        /// <param name="value"></param>
        /// <param name="tags"></param>
        /// <returns> A new <see cref="Models.EntitySubtype"/> instance for mocking. </returns>
        public static EntitySubtype EntitySubtype(string value = null, IEnumerable<EntityTag> tags = null)
        {
            tags ??= new List<EntityTag>();

            return new EntitySubtype(ExtraInformationKind.EntitySubtype, serializedAdditionalRawData: null, value, tags?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.EntityTag"/>. </summary>
        /// <param name="name"></param>
        /// <param name="confidenceScore"></param>
        /// <returns> A new <see cref="Models.EntityTag"/> instance for mocking. </returns>
        public static EntityTag EntityTag(string name = null, double? confidenceScore = null)
        {
            return new EntityTag(name, confidenceScore, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ListKey"/>. </summary>
        /// <param name="key"></param>
        /// <returns> A new <see cref="Models.ListKey"/> instance for mocking. </returns>
        public static ListKey ListKey(string key = null)
        {
            return new ListKey(ExtraInformationKind.ListKey, serializedAdditionalRawData: null, key);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RegexKey"/>. </summary>
        /// <param name="key"></param>
        /// <param name="regexPattern"></param>
        /// <returns> A new <see cref="Models.RegexKey"/> instance for mocking. </returns>
        public static RegexKey RegexKey(string key = null, string regexPattern = null)
        {
            return new RegexKey(ExtraInformationKind.RegexKey, serializedAdditionalRawData: null, key, regexPattern);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OrchestrationPrediction"/>. </summary>
        /// <param name="topIntent"></param>
        /// <param name="intents">
        /// Please note <see cref="Models.TargetIntentResult"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.ConversationTargetIntentResult"/>, <see cref="Models.LuisTargetIntentResult"/>, <see cref="Models.NoneLinkedTargetIntentResult"/> and <see cref="Models.QuestionAnsweringTargetIntentResult"/>.
        /// </param>
        /// <returns> A new <see cref="Models.OrchestrationPrediction"/> instance for mocking. </returns>
        public static OrchestrationPrediction OrchestrationPrediction(string topIntent = null, IReadOnlyDictionary<string, TargetIntentResult> intents = null)
        {
            intents ??= new Dictionary<string, TargetIntentResult>();

            return new OrchestrationPrediction(ProjectKind.Orchestration, topIntent, serializedAdditionalRawData: null, intents);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TargetIntentResult"/>. </summary>
        /// <param name="targetProjectKind"></param>
        /// <param name="apiVersion"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="Models.TargetIntentResult"/> instance for mocking. </returns>
        public static TargetIntentResult TargetIntentResult(string targetProjectKind = null, string apiVersion = null, double confidence = default)
        {
            return new UnknownTargetIntentResult(targetProjectKind == null ? default : new TargetProjectKind(targetProjectKind), apiVersion, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NoneLinkedTargetIntentResult"/>. </summary>
        /// <param name="apiVersion"></param>
        /// <param name="confidence"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="Models.NoneLinkedTargetIntentResult"/> instance for mocking. </returns>
        public static NoneLinkedTargetIntentResult NoneLinkedTargetIntentResult(string apiVersion = null, double confidence = default, ConversationResult result = null)
        {
            return new NoneLinkedTargetIntentResult(TargetProjectKind.NonLinked, apiVersion, confidence, serializedAdditionalRawData: null, result);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationResult"/>. </summary>
        /// <param name="query"></param>
        /// <param name="detectedLanguage"></param>
        /// <param name="prediction"></param>
        /// <returns> A new <see cref="Models.ConversationResult"/> instance for mocking. </returns>
        public static ConversationResult ConversationResult(string query = null, string detectedLanguage = null, ConversationPrediction prediction = null)
        {
            return new ConversationResult(query, detectedLanguage, prediction, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationTargetIntentResult"/>. </summary>
        /// <param name="apiVersion"></param>
        /// <param name="confidence"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="Models.ConversationTargetIntentResult"/> instance for mocking. </returns>
        public static ConversationTargetIntentResult ConversationTargetIntentResult(string apiVersion = null, double confidence = default, ConversationResult result = null)
        {
            return new ConversationTargetIntentResult(TargetProjectKind.Conversation, apiVersion, confidence, serializedAdditionalRawData: null, result);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LuisTargetIntentResult"/>. </summary>
        /// <param name="apiVersion"></param>
        /// <param name="confidence"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="Models.LuisTargetIntentResult"/> instance for mocking. </returns>
        public static LuisTargetIntentResult LuisTargetIntentResult(string apiVersion = null, double confidence = default, LuisResult result = null)
        {
            return new LuisTargetIntentResult(TargetProjectKind.Luis, apiVersion, confidence, serializedAdditionalRawData: null, result);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LuisResult"/>. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.LuisResult"/> instance for mocking. </returns>
        public static LuisResult LuisResult(IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new LuisResult(additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="Models.QuestionAnsweringTargetIntentResult"/>. </summary>
        /// <param name="apiVersion"></param>
        /// <param name="confidence"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="Models.QuestionAnsweringTargetIntentResult"/> instance for mocking. </returns>
        public static QuestionAnsweringTargetIntentResult QuestionAnsweringTargetIntentResult(string apiVersion = null, double confidence = default, AnswersResult result = null)
        {
            return new QuestionAnsweringTargetIntentResult(TargetProjectKind.QuestionAnswering, apiVersion, confidence, serializedAdditionalRawData: null, result);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AnswersResult"/>. </summary>
        /// <param name="answers"></param>
        /// <returns> A new <see cref="Models.AnswersResult"/> instance for mocking. </returns>
        public static AnswersResult AnswersResult(IEnumerable<KnowledgeBaseAnswer> answers = null)
        {
            answers ??= new List<KnowledgeBaseAnswer>();

            return new AnswersResult(answers?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.KnowledgeBaseAnswer"/>. </summary>
        /// <param name="questions"></param>
        /// <param name="answer"></param>
        /// <param name="confidence"></param>
        /// <param name="qnaId"></param>
        /// <param name="source"></param>
        /// <param name="metadata"></param>
        /// <param name="dialog"></param>
        /// <param name="shortAnswer"></param>
        /// <returns> A new <see cref="Models.KnowledgeBaseAnswer"/> instance for mocking. </returns>
        public static KnowledgeBaseAnswer KnowledgeBaseAnswer(IEnumerable<string> questions = null, string answer = null, double? confidence = null, int? qnaId = null, string source = null, IReadOnlyDictionary<string, string> metadata = null, KnowledgeBaseAnswerDialog dialog = null, AnswerSpan shortAnswer = null)
        {
            questions ??= new List<string>();
            metadata ??= new Dictionary<string, string>();

            return new KnowledgeBaseAnswer(
                questions?.ToList(),
                answer,
                confidence,
                qnaId,
                source,
                metadata,
                dialog,
                shortAnswer,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.KnowledgeBaseAnswerDialog"/>. </summary>
        /// <param name="isContextOnly"></param>
        /// <param name="prompts"></param>
        /// <returns> A new <see cref="Models.KnowledgeBaseAnswerDialog"/> instance for mocking. </returns>
        public static KnowledgeBaseAnswerDialog KnowledgeBaseAnswerDialog(bool? isContextOnly = null, IEnumerable<KnowledgeBaseAnswerPrompt> prompts = null)
        {
            prompts ??= new List<KnowledgeBaseAnswerPrompt>();

            return new KnowledgeBaseAnswerDialog(isContextOnly, prompts?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.KnowledgeBaseAnswerPrompt"/>. </summary>
        /// <param name="displayOrder"></param>
        /// <param name="qnaId"></param>
        /// <param name="displayText"></param>
        /// <returns> A new <see cref="Models.KnowledgeBaseAnswerPrompt"/> instance for mocking. </returns>
        public static KnowledgeBaseAnswerPrompt KnowledgeBaseAnswerPrompt(int? displayOrder = null, int? qnaId = null, string displayText = null)
        {
            return new KnowledgeBaseAnswerPrompt(displayOrder, qnaId, displayText, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AnswerSpan"/>. </summary>
        /// <param name="text"></param>
        /// <param name="confidenceScore"></param>
        /// <param name="offset"></param>
        /// <param name="length"></param>
        /// <returns> A new <see cref="Models.AnswerSpan"/> instance for mocking. </returns>
        public static AnswerSpan AnswerSpan(string text = null, double? confidenceScore = null, int? offset = null, int? length = null)
        {
            return new AnswerSpan(text, confidenceScore, offset, length, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationError"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <param name="target"></param>
        /// <param name="details"></param>
        /// <param name="innererror"></param>
        /// <returns> A new <see cref="Models.ConversationError"/> instance for mocking. </returns>
        public static ConversationError ConversationError(ConversationErrorCode code = default, string message = null, string target = null, IEnumerable<ConversationError> details = null, InnerErrorModel innererror = null)
        {
            details ??= new List<ConversationError>();

            return new ConversationError(
                code,
                message,
                target,
                details?.ToList(),
                innererror,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InnerErrorModel"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <param name="details"></param>
        /// <param name="target"></param>
        /// <param name="innererror"></param>
        /// <returns> A new <see cref="Models.InnerErrorModel"/> instance for mocking. </returns>
        public static InnerErrorModel InnerErrorModel(InnerErrorCode code = default, string message = null, IReadOnlyDictionary<string, string> details = null, string target = null, InnerErrorModel innererror = null)
        {
            details ??= new Dictionary<string, string>();

            return new InnerErrorModel(
                code,
                message,
                details,
                target,
                innererror,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AnalyzeConversationOperationState"/>. </summary>
        /// <param name="displayName"></param>
        /// <param name="createdDateTime"></param>
        /// <param name="expirationDateTime"></param>
        /// <param name="jobId"></param>
        /// <param name="lastUpdatedDateTime"></param>
        /// <param name="status"></param>
        /// <param name="errors"></param>
        /// <param name="nextLink"></param>
        /// <param name="actions"></param>
        /// <param name="statistics"></param>
        /// <returns> A new <see cref="Models.AnalyzeConversationOperationState"/> instance for mocking. </returns>
        public static AnalyzeConversationOperationState AnalyzeConversationOperationState(string displayName = null, DateTimeOffset createdDateTime = default, DateTimeOffset? expirationDateTime = null, Guid jobId = default, DateTimeOffset lastUpdatedDateTime = default, ConversationActionState status = default, IEnumerable<ConversationError> errors = null, string nextLink = null, ConversationActions actions = null, ConversationRequestStatistics statistics = null)
        {
            errors ??= new List<ConversationError>();

            return new AnalyzeConversationOperationState(
                displayName,
                createdDateTime,
                expirationDateTime,
                jobId,
                lastUpdatedDateTime,
                status,
                errors?.ToList(),
                nextLink,
                actions,
                statistics,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationActions"/>. </summary>
        /// <param name="completed"></param>
        /// <param name="failed"></param>
        /// <param name="inProgress"></param>
        /// <param name="total"></param>
        /// <param name="items">
        /// Please note <see cref="Models.AnalyzeConversationOperationResult"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.ConversationPiiOperationResult"/>, <see cref="Models.SummarizationOperationResult"/> and <see cref="Models.CustomSummarizationOperationResult"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ConversationActions"/> instance for mocking. </returns>
        public static ConversationActions ConversationActions(int completed = default, int failed = default, int inProgress = default, int total = default, IEnumerable<AnalyzeConversationOperationResult> items = null)
        {
            items ??= new List<AnalyzeConversationOperationResult>();

            return new ConversationActions(
                completed,
                failed,
                inProgress,
                total,
                items?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AnalyzeConversationOperationResult"/>. </summary>
        /// <param name="lastUpdateDateTime"></param>
        /// <param name="status"></param>
        /// <param name="name"></param>
        /// <param name="kind"></param>
        /// <returns> A new <see cref="Models.AnalyzeConversationOperationResult"/> instance for mocking. </returns>
        public static AnalyzeConversationOperationResult AnalyzeConversationOperationResult(DateTimeOffset lastUpdateDateTime = default, ConversationActionState status = default, string name = null, string kind = null)
        {
            return new UnknownAnalyzeConversationOperationResult(lastUpdateDateTime, status, name, kind == null ? default : new AnalyzeConversationOperationResultsKind(kind), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationPiiOperationResult"/>. </summary>
        /// <param name="lastUpdateDateTime"></param>
        /// <param name="status"></param>
        /// <param name="name"></param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.ConversationPiiOperationResult"/> instance for mocking. </returns>
        public static ConversationPiiOperationResult ConversationPiiOperationResult(DateTimeOffset lastUpdateDateTime = default, ConversationActionState status = default, string name = null, ConversationPiiResults results = null)
        {
            return new ConversationPiiOperationResult(
                lastUpdateDateTime,
                status,
                name,
                AnalyzeConversationOperationResultsKind.PiiOperationResults,
                serializedAdditionalRawData: null,
                results);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationPiiResults"/>. </summary>
        /// <param name="errors"></param>
        /// <param name="statistics"></param>
        /// <param name="modelVersion"></param>
        /// <param name="conversations"></param>
        /// <returns> A new <see cref="Models.ConversationPiiResults"/> instance for mocking. </returns>
        public static ConversationPiiResults ConversationPiiResults(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string modelVersion = null, IEnumerable<ConversationalPiiResult> conversations = null)
        {
            errors ??= new List<DocumentError>();
            conversations ??= new List<ConversationalPiiResult>();

            return new ConversationPiiResults(errors?.ToList(), statistics, modelVersion, conversations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentError"/>. </summary>
        /// <param name="id"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Models.DocumentError"/> instance for mocking. </returns>
        public static DocumentError DocumentError(string id = null, ConversationError error = null)
        {
            return new DocumentError(id, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RequestStatistics"/>. </summary>
        /// <param name="documentsCount"></param>
        /// <param name="validDocumentsCount"></param>
        /// <param name="erroneousDocumentsCount"></param>
        /// <param name="transactionsCount"></param>
        /// <returns> A new <see cref="Models.RequestStatistics"/> instance for mocking. </returns>
        public static RequestStatistics RequestStatistics(int documentsCount = default, int validDocumentsCount = default, int erroneousDocumentsCount = default, long transactionsCount = default)
        {
            return new RequestStatistics(documentsCount, validDocumentsCount, erroneousDocumentsCount, transactionsCount, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalPiiResult"/>. </summary>
        /// <param name="id"></param>
        /// <param name="warnings"></param>
        /// <param name="statistics"></param>
        /// <param name="conversationItems"></param>
        /// <returns> A new <see cref="Models.ConversationalPiiResult"/> instance for mocking. </returns>
        public static ConversationalPiiResult ConversationalPiiResult(string id = null, IEnumerable<InputWarning> warnings = null, ConversationStatistics statistics = null, IEnumerable<ConversationPiiItemResult> conversationItems = null)
        {
            warnings ??= new List<InputWarning>();
            conversationItems ??= new List<ConversationPiiItemResult>();

            return new ConversationalPiiResult(id, warnings?.ToList(), statistics, conversationItems?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InputWarning"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <param name="targetRef"></param>
        /// <returns> A new <see cref="Models.InputWarning"/> instance for mocking. </returns>
        public static InputWarning InputWarning(string code = null, string message = null, string targetRef = null)
        {
            return new InputWarning(code, message, targetRef, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationStatistics"/>. </summary>
        /// <param name="transactionsCount"></param>
        /// <returns> A new <see cref="Models.ConversationStatistics"/> instance for mocking. </returns>
        public static ConversationStatistics ConversationStatistics(int transactionsCount = default)
        {
            return new ConversationStatistics(transactionsCount, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationPiiItemResult"/>. </summary>
        /// <param name="id"></param>
        /// <param name="redactedContent"></param>
        /// <param name="entities"></param>
        /// <returns> A new <see cref="Models.ConversationPiiItemResult"/> instance for mocking. </returns>
        public static ConversationPiiItemResult ConversationPiiItemResult(string id = null, RedactedTranscriptContent redactedContent = null, IEnumerable<NamedEntity> entities = null)
        {
            entities ??= new List<NamedEntity>();

            return new ConversationPiiItemResult(id, redactedContent, entities?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RedactedTranscriptContent"/>. </summary>
        /// <param name="inverseTextNormalized"></param>
        /// <param name="maskedInverseTextNormalized"></param>
        /// <param name="text"></param>
        /// <param name="lexical"></param>
        /// <param name="audioTimings"></param>
        /// <returns> A new <see cref="Models.RedactedTranscriptContent"/> instance for mocking. </returns>
        public static RedactedTranscriptContent RedactedTranscriptContent(string inverseTextNormalized = null, string maskedInverseTextNormalized = null, string text = null, string lexical = null, IEnumerable<AudioTiming> audioTimings = null)
        {
            audioTimings ??= new List<AudioTiming>();

            return new RedactedTranscriptContent(
                inverseTextNormalized,
                maskedInverseTextNormalized,
                text,
                lexical,
                audioTimings?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AudioTiming"/>. </summary>
        /// <param name="offset"></param>
        /// <param name="duration"></param>
        /// <returns> A new <see cref="Models.AudioTiming"/> instance for mocking. </returns>
        public static AudioTiming AudioTiming(long? offset = null, long? duration = null)
        {
            return new AudioTiming(offset, duration, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamedEntity"/>. </summary>
        /// <param name="text"></param>
        /// <param name="category"></param>
        /// <param name="subcategory"></param>
        /// <param name="offset"></param>
        /// <param name="length"></param>
        /// <param name="confidenceScore"></param>
        /// <returns> A new <see cref="Models.NamedEntity"/> instance for mocking. </returns>
        public static NamedEntity NamedEntity(string text = null, string category = null, string subcategory = null, int offset = default, int length = default, double confidenceScore = default)
        {
            return new NamedEntity(
                text,
                category,
                subcategory,
                offset,
                length,
                confidenceScore,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SummarizationOperationResult"/>. </summary>
        /// <param name="lastUpdateDateTime"></param>
        /// <param name="status"></param>
        /// <param name="name"></param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.SummarizationOperationResult"/> instance for mocking. </returns>
        public static SummarizationOperationResult SummarizationOperationResult(DateTimeOffset lastUpdateDateTime = default, ConversationActionState status = default, string name = null, SummaryResult results = null)
        {
            return new SummarizationOperationResult(
                lastUpdateDateTime,
                status,
                name,
                AnalyzeConversationOperationResultsKind.SummarizationOperationResults,
                serializedAdditionalRawData: null,
                results);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SummaryResult"/>. </summary>
        /// <param name="conversations"></param>
        /// <param name="errors"></param>
        /// <param name="statistics"></param>
        /// <param name="modelVersion"></param>
        /// <returns> A new <see cref="Models.SummaryResult"/> instance for mocking. </returns>
        public static SummaryResult SummaryResult(IEnumerable<ConversationsSummaryResult> conversations = null, IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string modelVersion = null)
        {
            conversations ??= new List<ConversationsSummaryResult>();
            errors ??= new List<DocumentError>();

            return new SummaryResult(conversations?.ToList(), errors?.ToList(), statistics, modelVersion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationsSummaryResult"/>. </summary>
        /// <param name="id"></param>
        /// <param name="warnings"></param>
        /// <param name="statistics"></param>
        /// <param name="summaries"></param>
        /// <returns> A new <see cref="Models.ConversationsSummaryResult"/> instance for mocking. </returns>
        public static ConversationsSummaryResult ConversationsSummaryResult(string id = null, IEnumerable<InputWarning> warnings = null, ConversationStatistics statistics = null, IEnumerable<SummaryResultItem> summaries = null)
        {
            warnings ??= new List<InputWarning>();
            summaries ??= new List<SummaryResultItem>();

            return new ConversationsSummaryResult(id, warnings?.ToList(), statistics, summaries?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SummaryResultItem"/>. </summary>
        /// <param name="aspect"></param>
        /// <param name="text"></param>
        /// <param name="contexts"></param>
        /// <returns> A new <see cref="Models.SummaryResultItem"/> instance for mocking. </returns>
        public static SummaryResultItem SummaryResultItem(string aspect = null, string text = null, IEnumerable<ItemizedSummaryContext> contexts = null)
        {
            contexts ??= new List<ItemizedSummaryContext>();

            return new SummaryResultItem(aspect, text, contexts?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ItemizedSummaryContext"/>. </summary>
        /// <param name="offset"></param>
        /// <param name="length"></param>
        /// <param name="conversationItemId"></param>
        /// <returns> A new <see cref="Models.ItemizedSummaryContext"/> instance for mocking. </returns>
        public static ItemizedSummaryContext ItemizedSummaryContext(int offset = default, int length = default, string conversationItemId = null)
        {
            return new ItemizedSummaryContext(offset, length, conversationItemId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomSummarizationOperationResult"/>. </summary>
        /// <param name="lastUpdateDateTime"></param>
        /// <param name="status"></param>
        /// <param name="name"></param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.CustomSummarizationOperationResult"/> instance for mocking. </returns>
        public static CustomSummarizationOperationResult CustomSummarizationOperationResult(DateTimeOffset lastUpdateDateTime = default, ConversationActionState status = default, string name = null, CustomSummaryResult results = null)
        {
            return new CustomSummarizationOperationResult(
                lastUpdateDateTime,
                status,
                name,
                AnalyzeConversationOperationResultsKind.CustomSummarizationOperationResults,
                serializedAdditionalRawData: null,
                results);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomSummaryResult"/>. </summary>
        /// <param name="conversations"></param>
        /// <param name="errors"></param>
        /// <param name="statistics"></param>
        /// <param name="projectName"></param>
        /// <param name="deploymentName"></param>
        /// <returns> A new <see cref="Models.CustomSummaryResult"/> instance for mocking. </returns>
        public static CustomSummaryResult CustomSummaryResult(IEnumerable<ConversationsSummaryResult> conversations = null, IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string projectName = null, string deploymentName = null)
        {
            conversations ??= new List<ConversationsSummaryResult>();
            errors ??= new List<DocumentError>();

            return new CustomSummaryResult(
                conversations?.ToList(),
                errors?.ToList(),
                statistics,
                projectName,
                deploymentName,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationRequestStatistics"/>. </summary>
        /// <param name="documentsCount"></param>
        /// <param name="validDocumentsCount"></param>
        /// <param name="erroneousDocumentsCount"></param>
        /// <param name="transactionsCount"></param>
        /// <param name="conversationsCount"></param>
        /// <param name="validConversationsCount"></param>
        /// <param name="erroneousConversationsCount"></param>
        /// <returns> A new <see cref="Models.ConversationRequestStatistics"/> instance for mocking. </returns>
        public static ConversationRequestStatistics ConversationRequestStatistics(int documentsCount = default, int validDocumentsCount = default, int erroneousDocumentsCount = default, long transactionsCount = default, int conversationsCount = default, int validConversationsCount = default, int erroneousConversationsCount = default)
        {
            return new ConversationRequestStatistics(
                documentsCount,
                validDocumentsCount,
                erroneousDocumentsCount,
                transactionsCount,
                conversationsCount,
                validConversationsCount,
                erroneousConversationsCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AnalyzeConversationOperationInput"/>. </summary>
        /// <param name="displayName"></param>
        /// <param name="conversationInput"></param>
        /// <param name="actions">
        /// Please note <see cref="AnalyzeConversationOperationAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="PiiOperationAction"/>, <see cref="SummarizationOperationAction"/> and <see cref="CustomSummarizationOperationAction"/>.
        /// </param>
        /// <returns> A new <see cref="Models.AnalyzeConversationOperationInput"/> instance for mocking. </returns>
        public static AnalyzeConversationOperationInput AnalyzeConversationOperationInput(string displayName = null, MultiLanguageConversationInput conversationInput = null, IEnumerable<AnalyzeConversationOperationAction> actions = null)
        {
            actions ??= new List<AnalyzeConversationOperationAction>();

            return new AnalyzeConversationOperationInput(displayName, conversationInput, actions?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationInput"/>. </summary>
        /// <param name="id"></param>
        /// <param name="language"></param>
        /// <param name="modality"></param>
        /// <param name="domain"></param>
        /// <returns> A new <see cref="Models.ConversationInput"/> instance for mocking. </returns>
        public static ConversationInput ConversationInput(string id = null, string language = null, string modality = null, ConversationDomain? domain = null)
        {
            return new UnknownConversationInput(id, language, modality == null ? default : new InputModality(modality), domain, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextConversation"/>. </summary>
        /// <param name="id"></param>
        /// <param name="language"></param>
        /// <param name="domain"></param>
        /// <param name="conversationItems"></param>
        /// <returns> A new <see cref="Models.TextConversation"/> instance for mocking. </returns>
        public static TextConversation TextConversation(string id = null, string language = null, ConversationDomain? domain = null, IEnumerable<TextConversationItem> conversationItems = null)
        {
            conversationItems ??= new List<TextConversationItem>();

            return new TextConversation(
                id,
                language,
                InputModality.Text,
                domain,
                serializedAdditionalRawData: null,
                conversationItems?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.TranscriptConversation"/>. </summary>
        /// <param name="id"></param>
        /// <param name="language"></param>
        /// <param name="domain"></param>
        /// <param name="conversationItems"></param>
        /// <returns> A new <see cref="Models.TranscriptConversation"/> instance for mocking. </returns>
        public static TranscriptConversation TranscriptConversation(string id = null, string language = null, ConversationDomain? domain = null, IEnumerable<TranscriptConversationItem> conversationItems = null)
        {
            conversationItems ??= new List<TranscriptConversationItem>();

            return new TranscriptConversation(
                id,
                language,
                InputModality.Transcript,
                domain,
                serializedAdditionalRawData: null,
                conversationItems?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.TranscriptConversationItem"/>. </summary>
        /// <param name="id"></param>
        /// <param name="participantId"></param>
        /// <param name="language"></param>
        /// <param name="modality"></param>
        /// <param name="role"></param>
        /// <param name="inverseTextNormalized"></param>
        /// <param name="maskedInverseTextNormalized"></param>
        /// <param name="text"></param>
        /// <param name="lexical"></param>
        /// <param name="wordLevelTimings"></param>
        /// <param name="conversationItemLevelTiming"></param>
        /// <returns> A new <see cref="Models.TranscriptConversationItem"/> instance for mocking. </returns>
        public static TranscriptConversationItem TranscriptConversationItem(string id = null, string participantId = null, string language = null, InputModality? modality = null, ParticipantRole? role = null, string inverseTextNormalized = null, string maskedInverseTextNormalized = null, string text = null, string lexical = null, IEnumerable<WordLevelTiming> wordLevelTimings = null, ConversationItemLevelTiming conversationItemLevelTiming = null)
        {
            wordLevelTimings ??= new List<WordLevelTiming>();

            return new TranscriptConversationItem(
                id,
                participantId,
                language,
                modality,
                role,
                inverseTextNormalized,
                maskedInverseTextNormalized,
                text,
                lexical,
                wordLevelTimings?.ToList(),
                conversationItemLevelTiming,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomConversationSummarizationActionContent"/>. </summary>
        /// <param name="loggingOptOut"></param>
        /// <param name="projectName"></param>
        /// <param name="deploymentName"></param>
        /// <param name="sentenceCount"></param>
        /// <param name="stringIndexType"></param>
        /// <param name="summaryLength"></param>
        /// <param name="summaryAspects"></param>
        /// <returns> A new <see cref="Models.CustomConversationSummarizationActionContent"/> instance for mocking. </returns>
        public static CustomConversationSummarizationActionContent CustomConversationSummarizationActionContent(bool? loggingOptOut = null, string projectName = null, string deploymentName = null, int? sentenceCount = null, StringIndexType? stringIndexType = null, SummaryLengthBucket? summaryLength = null, IEnumerable<SummaryAspect> summaryAspects = null)
        {
            summaryAspects ??= new List<SummaryAspect>();

            return new CustomConversationSummarizationActionContent(
                loggingOptOut,
                projectName,
                deploymentName,
                sentenceCount,
                stringIndexType,
                summaryLength,
                summaryAspects?.ToList(),
                serializedAdditionalRawData: null);
        }
    }
}
