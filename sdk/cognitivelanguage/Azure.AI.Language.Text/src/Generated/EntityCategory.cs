// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Text
{
    /// <summary> The EntityCategory. </summary>
    public readonly partial struct EntityCategory : IEquatable<EntityCategory>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EntityCategory"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EntityCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AddressValue = "Address";
        private const string NumericValue = "Numeric";
        private const string AgeValue = "Age";
        private const string CurrencyValue = "Currency";
        private const string NumberValue = "Number";
        private const string NumberRangeValue = "NumberRange";
        private const string PercentageValue = "Percentage";
        private const string OrdinalValue = "Ordinal";
        private const string TemperatureValue = "Temperature";
        private const string DimensionValue = "Dimension";
        private const string LengthValue = "Length";
        private const string WeightValue = "Weight";
        private const string HeightValue = "Height";
        private const string SpeedValue = "Speed";
        private const string AreaValue = "Area";
        private const string VolumeValue = "Volume";
        private const string InformationValue = "Information";
        private const string TemporalValue = "Temporal";
        private const string DateValue = "Date";
        private const string TimeValue = "Time";
        private const string DateTimeValue = "DateTime";
        private const string DateRangeValue = "DateRange";
        private const string TimeRangeValue = "TimeRange";
        private const string DateTimeRangeValue = "DateTimeRange";
        private const string DurationValue = "Duration";
        private const string SetTemporalValue = "SetTemporal";
        private const string EventValue = "Event";
        private const string SportsEventValue = "SportsEvent";
        private const string CulturalEventValue = "CulturalEvent";
        private const string NaturalEventValue = "NaturalEvent";
        private const string LocationValue = "Location";
        private const string GeoPoliticalEntityValue = "GPE";
        private const string CityValue = "City";
        private const string StateValue = "State";
        private const string CountryRegionValue = "CountryRegion";
        private const string ContinentValue = "Continent";
        private const string StructuralValue = "Structural";
        private const string AirportValue = "Airport";
        private const string GeologicalValue = "Geological";
        private const string OrganizationValue = "Organization";
        private const string OrganizationMedicalValue = "OrganizationMedical";
        private const string OrganizationStockExchangeValue = "OrganizationStockExchange";
        private const string OrganizationSportsValue = "OrganizationSports";
        private const string PersonValue = "Person";
        private const string PersonTypeValue = "PersonType";
        private const string EmailValue = "Email";
        private const string UriValue = "URL";
        private const string IpAddressValue = "IP";
        private const string PhoneNumberValue = "PhoneNumber";
        private const string ProductValue = "Product";
        private const string ComputingProductValue = "ComputingProduct";
        private const string SkillValue = "Skill";

        /// <summary> Address. </summary>
        public static EntityCategory Address { get; } = new EntityCategory(AddressValue);
        /// <summary> Numeric. </summary>
        public static EntityCategory Numeric { get; } = new EntityCategory(NumericValue);
        /// <summary> Age. </summary>
        public static EntityCategory Age { get; } = new EntityCategory(AgeValue);
        /// <summary> Currency. </summary>
        public static EntityCategory Currency { get; } = new EntityCategory(CurrencyValue);
        /// <summary> Number. </summary>
        public static EntityCategory Number { get; } = new EntityCategory(NumberValue);
        /// <summary> NumberRange. </summary>
        public static EntityCategory NumberRange { get; } = new EntityCategory(NumberRangeValue);
        /// <summary> Percentage. </summary>
        public static EntityCategory Percentage { get; } = new EntityCategory(PercentageValue);
        /// <summary> Ordinal. </summary>
        public static EntityCategory Ordinal { get; } = new EntityCategory(OrdinalValue);
        /// <summary> Temperature. </summary>
        public static EntityCategory Temperature { get; } = new EntityCategory(TemperatureValue);
        /// <summary> Dimension. </summary>
        public static EntityCategory Dimension { get; } = new EntityCategory(DimensionValue);
        /// <summary> Length. </summary>
        public static EntityCategory Length { get; } = new EntityCategory(LengthValue);
        /// <summary> Weight. </summary>
        public static EntityCategory Weight { get; } = new EntityCategory(WeightValue);
        /// <summary> Height. </summary>
        public static EntityCategory Height { get; } = new EntityCategory(HeightValue);
        /// <summary> Speed. </summary>
        public static EntityCategory Speed { get; } = new EntityCategory(SpeedValue);
        /// <summary> Area. </summary>
        public static EntityCategory Area { get; } = new EntityCategory(AreaValue);
        /// <summary> Volume. </summary>
        public static EntityCategory Volume { get; } = new EntityCategory(VolumeValue);
        /// <summary> Information. </summary>
        public static EntityCategory Information { get; } = new EntityCategory(InformationValue);
        /// <summary> Temporal. </summary>
        public static EntityCategory Temporal { get; } = new EntityCategory(TemporalValue);
        /// <summary> Date. </summary>
        public static EntityCategory Date { get; } = new EntityCategory(DateValue);
        /// <summary> Time. </summary>
        public static EntityCategory Time { get; } = new EntityCategory(TimeValue);
        /// <summary> DateTime. </summary>
        public static EntityCategory DateTime { get; } = new EntityCategory(DateTimeValue);
        /// <summary> DateRange. </summary>
        public static EntityCategory DateRange { get; } = new EntityCategory(DateRangeValue);
        /// <summary> TimeRange. </summary>
        public static EntityCategory TimeRange { get; } = new EntityCategory(TimeRangeValue);
        /// <summary> DateTimeRange. </summary>
        public static EntityCategory DateTimeRange { get; } = new EntityCategory(DateTimeRangeValue);
        /// <summary> Duration. </summary>
        public static EntityCategory Duration { get; } = new EntityCategory(DurationValue);
        /// <summary> SetTemporal. </summary>
        public static EntityCategory SetTemporal { get; } = new EntityCategory(SetTemporalValue);
        /// <summary> Event. </summary>
        public static EntityCategory Event { get; } = new EntityCategory(EventValue);
        /// <summary> SportsEvent. </summary>
        public static EntityCategory SportsEvent { get; } = new EntityCategory(SportsEventValue);
        /// <summary> CulturalEvent. </summary>
        public static EntityCategory CulturalEvent { get; } = new EntityCategory(CulturalEventValue);
        /// <summary> NaturalEvent. </summary>
        public static EntityCategory NaturalEvent { get; } = new EntityCategory(NaturalEventValue);
        /// <summary> Location. </summary>
        public static EntityCategory Location { get; } = new EntityCategory(LocationValue);
        /// <summary> GPE. </summary>
        public static EntityCategory GeoPoliticalEntity { get; } = new EntityCategory(GeoPoliticalEntityValue);
        /// <summary> City. </summary>
        public static EntityCategory City { get; } = new EntityCategory(CityValue);
        /// <summary> State. </summary>
        public static EntityCategory State { get; } = new EntityCategory(StateValue);
        /// <summary> CountryRegion. </summary>
        public static EntityCategory CountryRegion { get; } = new EntityCategory(CountryRegionValue);
        /// <summary> Continent. </summary>
        public static EntityCategory Continent { get; } = new EntityCategory(ContinentValue);
        /// <summary> Structural. </summary>
        public static EntityCategory Structural { get; } = new EntityCategory(StructuralValue);
        /// <summary> Airport. </summary>
        public static EntityCategory Airport { get; } = new EntityCategory(AirportValue);
        /// <summary> Geological. </summary>
        public static EntityCategory Geological { get; } = new EntityCategory(GeologicalValue);
        /// <summary> Organization. </summary>
        public static EntityCategory Organization { get; } = new EntityCategory(OrganizationValue);
        /// <summary> OrganizationMedical. </summary>
        public static EntityCategory OrganizationMedical { get; } = new EntityCategory(OrganizationMedicalValue);
        /// <summary> OrganizationStockExchange. </summary>
        public static EntityCategory OrganizationStockExchange { get; } = new EntityCategory(OrganizationStockExchangeValue);
        /// <summary> OrganizationSports. </summary>
        public static EntityCategory OrganizationSports { get; } = new EntityCategory(OrganizationSportsValue);
        /// <summary> Person. </summary>
        public static EntityCategory Person { get; } = new EntityCategory(PersonValue);
        /// <summary> PersonType. </summary>
        public static EntityCategory PersonType { get; } = new EntityCategory(PersonTypeValue);
        /// <summary> Email. </summary>
        public static EntityCategory Email { get; } = new EntityCategory(EmailValue);
        /// <summary> URL. </summary>
        public static EntityCategory Uri { get; } = new EntityCategory(UriValue);
        /// <summary> IP. </summary>
        public static EntityCategory IpAddress { get; } = new EntityCategory(IpAddressValue);
        /// <summary> PhoneNumber. </summary>
        public static EntityCategory PhoneNumber { get; } = new EntityCategory(PhoneNumberValue);
        /// <summary> Product. </summary>
        public static EntityCategory Product { get; } = new EntityCategory(ProductValue);
        /// <summary> ComputingProduct. </summary>
        public static EntityCategory ComputingProduct { get; } = new EntityCategory(ComputingProductValue);
        /// <summary> Skill. </summary>
        public static EntityCategory Skill { get; } = new EntityCategory(SkillValue);
        /// <summary> Determines if two <see cref="EntityCategory"/> values are the same. </summary>
        public static bool operator ==(EntityCategory left, EntityCategory right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EntityCategory"/> values are not the same. </summary>
        public static bool operator !=(EntityCategory left, EntityCategory right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EntityCategory"/>. </summary>
        public static implicit operator EntityCategory(string value) => new EntityCategory(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EntityCategory other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EntityCategory other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
