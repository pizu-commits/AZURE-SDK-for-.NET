// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Language.Text
{
    /// <summary> The PiiActionContent. </summary>
    public partial class PiiActionContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PiiActionContent"/>. </summary>
        public PiiActionContent()
        {
            PiiCategories = new ChangeTrackingList<PiiCategory>();
            ExcludePiiCategories = new ChangeTrackingList<PiiCategoriesExclude>();
        }

        /// <summary> Initializes a new instance of <see cref="PiiActionContent"/>. </summary>
        /// <param name="loggingOptOut"></param>
        /// <param name="modelVersion"></param>
        /// <param name="domain"></param>
        /// <param name="piiCategories"></param>
        /// <param name="stringIndexType"></param>
        /// <param name="excludePiiCategories"></param>
        /// <param name="redactionCharacter"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PiiActionContent(bool? loggingOptOut, string modelVersion, PiiDomain? domain, IList<PiiCategory> piiCategories, StringIndexType? stringIndexType, IList<PiiCategoriesExclude> excludePiiCategories, RedactionCharacter? redactionCharacter, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            LoggingOptOut = loggingOptOut;
            ModelVersion = modelVersion;
            Domain = domain;
            PiiCategories = piiCategories;
            StringIndexType = stringIndexType;
            ExcludePiiCategories = excludePiiCategories;
            RedactionCharacter = redactionCharacter;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets the logging opt out. </summary>
        public bool? LoggingOptOut { get; set; }
        /// <summary> Gets or sets the model version. </summary>
        public string ModelVersion { get; set; }
        /// <summary> Gets or sets the domain. </summary>
        public PiiDomain? Domain { get; set; }
        /// <summary> Gets the pii categories. </summary>
        public IList<PiiCategory> PiiCategories { get; }
        /// <summary> Gets or sets the string index type. </summary>
        public StringIndexType? StringIndexType { get; set; }
        /// <summary> Gets the exclude pii categories. </summary>
        public IList<PiiCategoriesExclude> ExcludePiiCategories { get; }
        /// <summary> Gets or sets the redaction character. </summary>
        public RedactionCharacter? RedactionCharacter { get; set; }
    }
}
