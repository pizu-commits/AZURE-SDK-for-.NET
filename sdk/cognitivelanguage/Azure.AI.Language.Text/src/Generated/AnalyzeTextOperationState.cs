// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Language.Text
{
    /// <summary> The AnalyzeTextOperationState. </summary>
    public partial class AnalyzeTextOperationState
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AnalyzeTextOperationState"/>. </summary>
        /// <param name="createdAt"></param>
        /// <param name="lastUpdatedAt"></param>
        /// <param name="status"></param>
        /// <param name="actions"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="actions"/> is null. </exception>
        internal AnalyzeTextOperationState(DateTimeOffset createdAt, DateTimeOffset lastUpdatedAt, TextActionState status, TextActions actions)
        {
            Argument.AssertNotNull(actions, nameof(actions));

            CreatedAt = createdAt;
            LastUpdatedAt = lastUpdatedAt;
            Status = status;
            Errors = new ChangeTrackingList<AnalyzeTextError>();
            Actions = actions;
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeTextOperationState"/>. </summary>
        /// <param name="displayName"></param>
        /// <param name="createdAt"></param>
        /// <param name="expiresOn"></param>
        /// <param name="jobId"></param>
        /// <param name="lastUpdatedAt"></param>
        /// <param name="status"></param>
        /// <param name="errors"></param>
        /// <param name="nextLink"></param>
        /// <param name="actions"></param>
        /// <param name="statistics"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AnalyzeTextOperationState(string displayName, DateTimeOffset createdAt, DateTimeOffset? expiresOn, Guid jobId, DateTimeOffset lastUpdatedAt, TextActionState status, IReadOnlyList<AnalyzeTextError> errors, string nextLink, TextActions actions, RequestStatistics statistics, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DisplayName = displayName;
            CreatedAt = createdAt;
            ExpiresOn = expiresOn;
            JobId = jobId;
            LastUpdatedAt = lastUpdatedAt;
            Status = status;
            Errors = errors;
            NextLink = nextLink;
            Actions = actions;
            Statistics = statistics;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeTextOperationState"/> for deserialization. </summary>
        internal AnalyzeTextOperationState()
        {
        }

        /// <summary> Gets the display name. </summary>
        public string DisplayName { get; }
        /// <summary> Gets the created at. </summary>
        public DateTimeOffset CreatedAt { get; }
        /// <summary> Gets the expires on. </summary>
        public DateTimeOffset? ExpiresOn { get; }
        /// <summary> Gets the job id. </summary>
        public Guid JobId { get; }
        /// <summary> Gets the last updated at. </summary>
        public DateTimeOffset LastUpdatedAt { get; }
        /// <summary> Gets the status. </summary>
        public TextActionState Status { get; }
        /// <summary> Gets the errors. </summary>
        public IReadOnlyList<AnalyzeTextError> Errors { get; }
        /// <summary> Gets the next link. </summary>
        public string NextLink { get; }
        /// <summary> Gets the actions. </summary>
        public TextActions Actions { get; }
        /// <summary> Gets the statistics. </summary>
        public RequestStatistics Statistics { get; }
    }
}
