// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Text
{
    /// <summary> The ScriptCode. </summary>
    public readonly partial struct ScriptCode : IEquatable<ScriptCode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ScriptCode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ScriptCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ArabValue = "Arab";
        private const string ArmnValue = "Armn";
        private const string BengValue = "Beng";
        private const string CansValue = "Cans";
        private const string CyrlValue = "Cyrl";
        private const string DevaValue = "Deva";
        private const string EthiValue = "Ethi";
        private const string GeorValue = "Geor";
        private const string GrekValue = "Grek";
        private const string GujrValue = "Gujr";
        private const string GuruValue = "Guru";
        private const string HangValue = "Hang";
        private const string HansValue = "Hans";
        private const string HantValue = "Hant";
        private const string HebrValue = "Hebr";
        private const string JpanValue = "Jpan";
        private const string KhmrValue = "Khmr";
        private const string KndaValue = "Knda";
        private const string LaooValue = "Laoo";
        private const string LatnValue = "Latn";
        private const string MlymValue = "Mlym";
        private const string MymrValue = "Mymr";
        private const string OryaValue = "Orya";
        private const string SinhValue = "Sinh";
        private const string TamlValue = "Taml";
        private const string TeluValue = "Telu";
        private const string ThaaValue = "Thaa";
        private const string ThaiValue = "Thai";
        private const string TibtValue = "Tibt";

        /// <summary> Arab. </summary>
        public static ScriptCode Arab { get; } = new ScriptCode(ArabValue);
        /// <summary> Armn. </summary>
        public static ScriptCode Armn { get; } = new ScriptCode(ArmnValue);
        /// <summary> Beng. </summary>
        public static ScriptCode Beng { get; } = new ScriptCode(BengValue);
        /// <summary> Cans. </summary>
        public static ScriptCode Cans { get; } = new ScriptCode(CansValue);
        /// <summary> Cyrl. </summary>
        public static ScriptCode Cyrl { get; } = new ScriptCode(CyrlValue);
        /// <summary> Deva. </summary>
        public static ScriptCode Deva { get; } = new ScriptCode(DevaValue);
        /// <summary> Ethi. </summary>
        public static ScriptCode Ethi { get; } = new ScriptCode(EthiValue);
        /// <summary> Geor. </summary>
        public static ScriptCode Geor { get; } = new ScriptCode(GeorValue);
        /// <summary> Grek. </summary>
        public static ScriptCode Grek { get; } = new ScriptCode(GrekValue);
        /// <summary> Gujr. </summary>
        public static ScriptCode Gujr { get; } = new ScriptCode(GujrValue);
        /// <summary> Guru. </summary>
        public static ScriptCode Guru { get; } = new ScriptCode(GuruValue);
        /// <summary> Hang. </summary>
        public static ScriptCode Hang { get; } = new ScriptCode(HangValue);
        /// <summary> Hans. </summary>
        public static ScriptCode Hans { get; } = new ScriptCode(HansValue);
        /// <summary> Hant. </summary>
        public static ScriptCode Hant { get; } = new ScriptCode(HantValue);
        /// <summary> Hebr. </summary>
        public static ScriptCode Hebr { get; } = new ScriptCode(HebrValue);
        /// <summary> Jpan. </summary>
        public static ScriptCode Jpan { get; } = new ScriptCode(JpanValue);
        /// <summary> Khmr. </summary>
        public static ScriptCode Khmr { get; } = new ScriptCode(KhmrValue);
        /// <summary> Knda. </summary>
        public static ScriptCode Knda { get; } = new ScriptCode(KndaValue);
        /// <summary> Laoo. </summary>
        public static ScriptCode Laoo { get; } = new ScriptCode(LaooValue);
        /// <summary> Latn. </summary>
        public static ScriptCode Latn { get; } = new ScriptCode(LatnValue);
        /// <summary> Mlym. </summary>
        public static ScriptCode Mlym { get; } = new ScriptCode(MlymValue);
        /// <summary> Mymr. </summary>
        public static ScriptCode Mymr { get; } = new ScriptCode(MymrValue);
        /// <summary> Orya. </summary>
        public static ScriptCode Orya { get; } = new ScriptCode(OryaValue);
        /// <summary> Sinh. </summary>
        public static ScriptCode Sinh { get; } = new ScriptCode(SinhValue);
        /// <summary> Taml. </summary>
        public static ScriptCode Taml { get; } = new ScriptCode(TamlValue);
        /// <summary> Telu. </summary>
        public static ScriptCode Telu { get; } = new ScriptCode(TeluValue);
        /// <summary> Thaa. </summary>
        public static ScriptCode Thaa { get; } = new ScriptCode(ThaaValue);
        /// <summary> Thai. </summary>
        public static ScriptCode Thai { get; } = new ScriptCode(ThaiValue);
        /// <summary> Tibt. </summary>
        public static ScriptCode Tibt { get; } = new ScriptCode(TibtValue);
        /// <summary> Determines if two <see cref="ScriptCode"/> values are the same. </summary>
        public static bool operator ==(ScriptCode left, ScriptCode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ScriptCode"/> values are not the same. </summary>
        public static bool operator !=(ScriptCode left, ScriptCode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ScriptCode"/>. </summary>
        public static implicit operator ScriptCode(string value) => new ScriptCode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ScriptCode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ScriptCode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
