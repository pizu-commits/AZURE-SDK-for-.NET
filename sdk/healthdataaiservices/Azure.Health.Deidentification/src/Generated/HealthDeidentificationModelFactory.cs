// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Health.Deidentification
{
    /// <summary> Model factory for models. </summary>
    public static partial class HealthDeidentificationModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Deidentification.DeidentificationJob"/>. </summary>
        /// <param name="name"></param>
        /// <param name="sourceLocation"></param>
        /// <param name="targetLocation"></param>
        /// <param name="operation"></param>
        /// <param name="dataType"></param>
        /// <param name="redactionFormat"></param>
        /// <param name="status"></param>
        /// <param name="error"></param>
        /// <param name="lastUpdatedAt"></param>
        /// <param name="createdAt"></param>
        /// <param name="startedAt"></param>
        /// <param name="summary"></param>
        /// <returns> A new <see cref="Deidentification.DeidentificationJob"/> instance for mocking. </returns>
        public static DeidentificationJob DeidentificationJob(string name = null, SourceStorageLocation sourceLocation = null, TargetStorageLocation targetLocation = null, OperationType? operation = null, DocumentDataType? dataType = null, string redactionFormat = null, JobStatus status = default, ResponseError error = null, DateTimeOffset lastUpdatedAt = default, DateTimeOffset createdAt = default, DateTimeOffset? startedAt = null, JobSummary summary = null)
        {
            return new DeidentificationJob(
                name,
                sourceLocation,
                targetLocation,
                operation,
                dataType,
                redactionFormat,
                status,
                error,
                lastUpdatedAt,
                createdAt,
                startedAt,
                summary,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Deidentification.JobSummary"/>. </summary>
        /// <param name="successful"></param>
        /// <param name="failed"></param>
        /// <param name="canceled"></param>
        /// <param name="total"></param>
        /// <param name="bytesProcessed"></param>
        /// <returns> A new <see cref="Deidentification.JobSummary"/> instance for mocking. </returns>
        public static JobSummary JobSummary(int successful = default, int failed = default, int canceled = default, int total = default, long bytesProcessed = default)
        {
            return new JobSummary(
                successful,
                failed,
                canceled,
                total,
                bytesProcessed,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Deidentification.DocumentDetails"/>. </summary>
        /// <param name="id"></param>
        /// <param name="input"></param>
        /// <param name="output"></param>
        /// <param name="status"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Deidentification.DocumentDetails"/> instance for mocking. </returns>
        public static DocumentDetails DocumentDetails(string id = null, DocumentLocation input = null, DocumentLocation output = null, OperationState status = default, ResponseError error = null)
        {
            return new DocumentDetails(
                id,
                input,
                output,
                status,
                error,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Deidentification.DocumentLocation"/>. </summary>
        /// <param name="path"></param>
        /// <param name="etag"></param>
        /// <returns> A new <see cref="Deidentification.DocumentLocation"/> instance for mocking. </returns>
        public static DocumentLocation DocumentLocation(string path = null, ETag etag = default)
        {
            return new DocumentLocation(path, etag, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Deidentification.DeidentificationContent"/>. </summary>
        /// <param name="inputText"></param>
        /// <param name="operation"></param>
        /// <param name="dataType"></param>
        /// <param name="redactionFormat"></param>
        /// <returns> A new <see cref="Deidentification.DeidentificationContent"/> instance for mocking. </returns>
        public static DeidentificationContent DeidentificationContent(string inputText = null, OperationType? operation = null, DocumentDataType? dataType = null, string redactionFormat = null)
        {
            return new DeidentificationContent(inputText, operation, dataType, redactionFormat, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Deidentification.DeidentificationResult"/>. </summary>
        /// <param name="outputText"></param>
        /// <param name="taggerResult"></param>
        /// <returns> A new <see cref="Deidentification.DeidentificationResult"/> instance for mocking. </returns>
        public static DeidentificationResult DeidentificationResult(string outputText = null, PhiTaggerResult taggerResult = null)
        {
            return new DeidentificationResult(outputText, taggerResult, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Deidentification.PhiTaggerResult"/>. </summary>
        /// <param name="entities"></param>
        /// <param name="path"></param>
        /// <param name="etag"></param>
        /// <returns> A new <see cref="Deidentification.PhiTaggerResult"/> instance for mocking. </returns>
        public static PhiTaggerResult PhiTaggerResult(IEnumerable<PhiEntity> entities = null, string path = null, ETag? etag = null)
        {
            entities ??= new List<PhiEntity>();

            return new PhiTaggerResult(entities?.ToList(), path, etag, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Deidentification.PhiEntity"/>. </summary>
        /// <param name="category"></param>
        /// <param name="offset"></param>
        /// <param name="length"></param>
        /// <param name="text"></param>
        /// <param name="confidenceScore"></param>
        /// <returns> A new <see cref="Deidentification.PhiEntity"/> instance for mocking. </returns>
        public static PhiEntity PhiEntity(PhiCategory category = default, StringIndex offset = null, StringIndex length = null, string text = null, double? confidenceScore = null)
        {
            return new PhiEntity(
                category,
                offset,
                length,
                text,
                confidenceScore,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Deidentification.StringIndex"/>. </summary>
        /// <param name="utf8"></param>
        /// <param name="utf16"></param>
        /// <param name="codePoint"></param>
        /// <returns> A new <see cref="Deidentification.StringIndex"/> instance for mocking. </returns>
        public static StringIndex StringIndex(int utf8 = default, int utf16 = default, int codePoint = default)
        {
            return new StringIndex(utf8, utf16, codePoint, serializedAdditionalRawData: null);
        }
    }
}
