// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Health.Deidentification
{
    /// <summary> The DeidentificationJob. </summary>
    public partial class DeidentificationJob
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DeidentificationJob"/>. </summary>
        /// <param name="sourceLocation"></param>
        /// <param name="targetLocation"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceLocation"/> or <paramref name="targetLocation"/> is null. </exception>
        public DeidentificationJob(SourceStorageLocation sourceLocation, TargetStorageLocation targetLocation)
        {
            Argument.AssertNotNull(sourceLocation, nameof(sourceLocation));
            Argument.AssertNotNull(targetLocation, nameof(targetLocation));

            SourceLocation = sourceLocation;
            TargetLocation = targetLocation;
        }

        /// <summary> Initializes a new instance of <see cref="DeidentificationJob"/>. </summary>
        /// <param name="name"></param>
        /// <param name="sourceLocation"></param>
        /// <param name="targetLocation"></param>
        /// <param name="operation"></param>
        /// <param name="dataType"></param>
        /// <param name="redactionFormat"></param>
        /// <param name="status"></param>
        /// <param name="error"></param>
        /// <param name="lastUpdatedAt"></param>
        /// <param name="createdAt"></param>
        /// <param name="startedAt"></param>
        /// <param name="summary"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DeidentificationJob(string name, SourceStorageLocation sourceLocation, TargetStorageLocation targetLocation, OperationType? operation, DocumentDataType? dataType, string redactionFormat, JobStatus status, ResponseError error, DateTimeOffset lastUpdatedAt, DateTimeOffset createdAt, DateTimeOffset? startedAt, JobSummary summary, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            SourceLocation = sourceLocation;
            TargetLocation = targetLocation;
            Operation = operation;
            DataType = dataType;
            RedactionFormat = redactionFormat;
            Status = status;
            Error = error;
            LastUpdatedAt = lastUpdatedAt;
            CreatedAt = createdAt;
            StartedAt = startedAt;
            Summary = summary;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DeidentificationJob"/> for deserialization. </summary>
        internal DeidentificationJob()
        {
        }

        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets or sets the source location. </summary>
        public SourceStorageLocation SourceLocation { get; set; }
        /// <summary> Gets or sets the target location. </summary>
        public TargetStorageLocation TargetLocation { get; set; }
        /// <summary> Gets or sets the operation. </summary>
        public OperationType? Operation { get; set; }
        /// <summary> Gets or sets the data type. </summary>
        public DocumentDataType? DataType { get; set; }
        /// <summary> Gets or sets the redaction format. </summary>
        public string RedactionFormat { get; set; }
        /// <summary> Gets the status. </summary>
        public JobStatus Status { get; }
        /// <summary> Gets the error. </summary>
        public ResponseError Error { get; }
        /// <summary> Gets the last updated at. </summary>
        public DateTimeOffset LastUpdatedAt { get; }
        /// <summary> Gets the created at. </summary>
        public DateTimeOffset CreatedAt { get; }
        /// <summary> Gets the started at. </summary>
        public DateTimeOffset? StartedAt { get; }
        /// <summary> Gets the summary. </summary>
        public JobSummary Summary { get; }
    }
}
