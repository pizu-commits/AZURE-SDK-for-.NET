// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.OpenAI.Assistants
{
    /// <summary> The RunStep. </summary>
    public partial class RunStep
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RunStep"/>. </summary>
        /// <param name="id"></param>
        /// <param name="type"></param>
        /// <param name="assistantId"></param>
        /// <param name="threadId"></param>
        /// <param name="runId"></param>
        /// <param name="status"></param>
        /// <param name="stepDetails">
        /// Please note <see cref="RunStepDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="RunStepMessageCreationDetails"/> and <see cref="RunStepToolCallDetails"/>.
        /// </param>
        /// <param name="lastError"></param>
        /// <param name="createdAt"></param>
        /// <param name="expiredAt"></param>
        /// <param name="completedAt"></param>
        /// <param name="cancelledAt"></param>
        /// <param name="failedAt"></param>
        /// <param name="metadata"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="assistantId"/>, <paramref name="threadId"/>, <paramref name="runId"/> or <paramref name="stepDetails"/> is null. </exception>
        internal RunStep(string id, RunStepType type, string assistantId, string threadId, string runId, RunStepStatus status, RunStepDetails stepDetails, RunStepError lastError, DateTimeOffset createdAt, DateTimeOffset? expiredAt, DateTimeOffset? completedAt, DateTimeOffset? cancelledAt, DateTimeOffset? failedAt, IReadOnlyDictionary<string, string> metadata)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(assistantId, nameof(assistantId));
            Argument.AssertNotNull(threadId, nameof(threadId));
            Argument.AssertNotNull(runId, nameof(runId));
            Argument.AssertNotNull(stepDetails, nameof(stepDetails));

            Id = id;
            Type = type;
            AssistantId = assistantId;
            ThreadId = threadId;
            RunId = runId;
            Status = status;
            StepDetails = stepDetails;
            LastError = lastError;
            CreatedAt = createdAt;
            ExpiredAt = expiredAt;
            CompletedAt = completedAt;
            CancelledAt = cancelledAt;
            FailedAt = failedAt;
            Metadata = metadata;
        }

        /// <summary> Initializes a new instance of <see cref="RunStep"/>. </summary>
        /// <param name="id"></param>
        /// <param name="object"></param>
        /// <param name="type"></param>
        /// <param name="assistantId"></param>
        /// <param name="threadId"></param>
        /// <param name="runId"></param>
        /// <param name="status"></param>
        /// <param name="stepDetails">
        /// Please note <see cref="RunStepDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="RunStepMessageCreationDetails"/> and <see cref="RunStepToolCallDetails"/>.
        /// </param>
        /// <param name="lastError"></param>
        /// <param name="createdAt"></param>
        /// <param name="expiredAt"></param>
        /// <param name="completedAt"></param>
        /// <param name="cancelledAt"></param>
        /// <param name="failedAt"></param>
        /// <param name="metadata"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RunStep(string id, string @object, RunStepType type, string assistantId, string threadId, string runId, RunStepStatus status, RunStepDetails stepDetails, RunStepError lastError, DateTimeOffset createdAt, DateTimeOffset? expiredAt, DateTimeOffset? completedAt, DateTimeOffset? cancelledAt, DateTimeOffset? failedAt, IReadOnlyDictionary<string, string> metadata, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Object = @object;
            Type = type;
            AssistantId = assistantId;
            ThreadId = threadId;
            RunId = runId;
            Status = status;
            StepDetails = stepDetails;
            LastError = lastError;
            CreatedAt = createdAt;
            ExpiredAt = expiredAt;
            CompletedAt = completedAt;
            CancelledAt = cancelledAt;
            FailedAt = failedAt;
            Metadata = metadata;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RunStep"/> for deserialization. </summary>
        internal RunStep()
        {
        }

        /// <summary> Gets the id. </summary>
        public string Id { get; }

        /// <summary> Gets the type. </summary>
        public RunStepType Type { get; }
        /// <summary> Gets the assistant id. </summary>
        public string AssistantId { get; }
        /// <summary> Gets the thread id. </summary>
        public string ThreadId { get; }
        /// <summary> Gets the run id. </summary>
        public string RunId { get; }
        /// <summary> Gets the status. </summary>
        public RunStepStatus Status { get; }
        /// <summary>
        /// Gets the step details
        /// Please note <see cref="RunStepDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="RunStepMessageCreationDetails"/> and <see cref="RunStepToolCallDetails"/>.
        /// </summary>
        public RunStepDetails StepDetails { get; }
        /// <summary> Gets the last error. </summary>
        public RunStepError LastError { get; }
        /// <summary> Gets the created at. </summary>
        public DateTimeOffset CreatedAt { get; }
        /// <summary> Gets the expired at. </summary>
        public DateTimeOffset? ExpiredAt { get; }
        /// <summary> Gets the completed at. </summary>
        public DateTimeOffset? CompletedAt { get; }
        /// <summary> Gets the cancelled at. </summary>
        public DateTimeOffset? CancelledAt { get; }
        /// <summary> Gets the failed at. </summary>
        public DateTimeOffset? FailedAt { get; }
        /// <summary> Gets the metadata. </summary>
        public IReadOnlyDictionary<string, string> Metadata { get; }
    }
}
