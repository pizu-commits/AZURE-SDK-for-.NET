// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Vision.Face
{
    /// <summary> The FaceLandmarks. </summary>
    public partial class FaceLandmarks
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FaceLandmarks"/>. </summary>
        /// <param name="pupilLeft"></param>
        /// <param name="pupilRight"></param>
        /// <param name="noseTip"></param>
        /// <param name="mouthLeft"></param>
        /// <param name="mouthRight"></param>
        /// <param name="eyebrowLeftOuter"></param>
        /// <param name="eyebrowLeftInner"></param>
        /// <param name="eyeLeftOuter"></param>
        /// <param name="eyeLeftTop"></param>
        /// <param name="eyeLeftBottom"></param>
        /// <param name="eyeLeftInner"></param>
        /// <param name="eyebrowRightInner"></param>
        /// <param name="eyebrowRightOuter"></param>
        /// <param name="eyeRightInner"></param>
        /// <param name="eyeRightTop"></param>
        /// <param name="eyeRightBottom"></param>
        /// <param name="eyeRightOuter"></param>
        /// <param name="noseRootLeft"></param>
        /// <param name="noseRootRight"></param>
        /// <param name="noseLeftAlarTop"></param>
        /// <param name="noseRightAlarTop"></param>
        /// <param name="noseLeftAlarOutTip"></param>
        /// <param name="noseRightAlarOutTip"></param>
        /// <param name="upperLipTop"></param>
        /// <param name="upperLipBottom"></param>
        /// <param name="underLipTop"></param>
        /// <param name="underLipBottom"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="pupilLeft"/>, <paramref name="pupilRight"/>, <paramref name="noseTip"/>, <paramref name="mouthLeft"/>, <paramref name="mouthRight"/>, <paramref name="eyebrowLeftOuter"/>, <paramref name="eyebrowLeftInner"/>, <paramref name="eyeLeftOuter"/>, <paramref name="eyeLeftTop"/>, <paramref name="eyeLeftBottom"/>, <paramref name="eyeLeftInner"/>, <paramref name="eyebrowRightInner"/>, <paramref name="eyebrowRightOuter"/>, <paramref name="eyeRightInner"/>, <paramref name="eyeRightTop"/>, <paramref name="eyeRightBottom"/>, <paramref name="eyeRightOuter"/>, <paramref name="noseRootLeft"/>, <paramref name="noseRootRight"/>, <paramref name="noseLeftAlarTop"/>, <paramref name="noseRightAlarTop"/>, <paramref name="noseLeftAlarOutTip"/>, <paramref name="noseRightAlarOutTip"/>, <paramref name="upperLipTop"/>, <paramref name="upperLipBottom"/>, <paramref name="underLipTop"/> or <paramref name="underLipBottom"/> is null. </exception>
        internal FaceLandmarks(LandmarkCoordinate pupilLeft, LandmarkCoordinate pupilRight, LandmarkCoordinate noseTip, LandmarkCoordinate mouthLeft, LandmarkCoordinate mouthRight, LandmarkCoordinate eyebrowLeftOuter, LandmarkCoordinate eyebrowLeftInner, LandmarkCoordinate eyeLeftOuter, LandmarkCoordinate eyeLeftTop, LandmarkCoordinate eyeLeftBottom, LandmarkCoordinate eyeLeftInner, LandmarkCoordinate eyebrowRightInner, LandmarkCoordinate eyebrowRightOuter, LandmarkCoordinate eyeRightInner, LandmarkCoordinate eyeRightTop, LandmarkCoordinate eyeRightBottom, LandmarkCoordinate eyeRightOuter, LandmarkCoordinate noseRootLeft, LandmarkCoordinate noseRootRight, LandmarkCoordinate noseLeftAlarTop, LandmarkCoordinate noseRightAlarTop, LandmarkCoordinate noseLeftAlarOutTip, LandmarkCoordinate noseRightAlarOutTip, LandmarkCoordinate upperLipTop, LandmarkCoordinate upperLipBottom, LandmarkCoordinate underLipTop, LandmarkCoordinate underLipBottom)
        {
            Argument.AssertNotNull(pupilLeft, nameof(pupilLeft));
            Argument.AssertNotNull(pupilRight, nameof(pupilRight));
            Argument.AssertNotNull(noseTip, nameof(noseTip));
            Argument.AssertNotNull(mouthLeft, nameof(mouthLeft));
            Argument.AssertNotNull(mouthRight, nameof(mouthRight));
            Argument.AssertNotNull(eyebrowLeftOuter, nameof(eyebrowLeftOuter));
            Argument.AssertNotNull(eyebrowLeftInner, nameof(eyebrowLeftInner));
            Argument.AssertNotNull(eyeLeftOuter, nameof(eyeLeftOuter));
            Argument.AssertNotNull(eyeLeftTop, nameof(eyeLeftTop));
            Argument.AssertNotNull(eyeLeftBottom, nameof(eyeLeftBottom));
            Argument.AssertNotNull(eyeLeftInner, nameof(eyeLeftInner));
            Argument.AssertNotNull(eyebrowRightInner, nameof(eyebrowRightInner));
            Argument.AssertNotNull(eyebrowRightOuter, nameof(eyebrowRightOuter));
            Argument.AssertNotNull(eyeRightInner, nameof(eyeRightInner));
            Argument.AssertNotNull(eyeRightTop, nameof(eyeRightTop));
            Argument.AssertNotNull(eyeRightBottom, nameof(eyeRightBottom));
            Argument.AssertNotNull(eyeRightOuter, nameof(eyeRightOuter));
            Argument.AssertNotNull(noseRootLeft, nameof(noseRootLeft));
            Argument.AssertNotNull(noseRootRight, nameof(noseRootRight));
            Argument.AssertNotNull(noseLeftAlarTop, nameof(noseLeftAlarTop));
            Argument.AssertNotNull(noseRightAlarTop, nameof(noseRightAlarTop));
            Argument.AssertNotNull(noseLeftAlarOutTip, nameof(noseLeftAlarOutTip));
            Argument.AssertNotNull(noseRightAlarOutTip, nameof(noseRightAlarOutTip));
            Argument.AssertNotNull(upperLipTop, nameof(upperLipTop));
            Argument.AssertNotNull(upperLipBottom, nameof(upperLipBottom));
            Argument.AssertNotNull(underLipTop, nameof(underLipTop));
            Argument.AssertNotNull(underLipBottom, nameof(underLipBottom));

            PupilLeft = pupilLeft;
            PupilRight = pupilRight;
            NoseTip = noseTip;
            MouthLeft = mouthLeft;
            MouthRight = mouthRight;
            EyebrowLeftOuter = eyebrowLeftOuter;
            EyebrowLeftInner = eyebrowLeftInner;
            EyeLeftOuter = eyeLeftOuter;
            EyeLeftTop = eyeLeftTop;
            EyeLeftBottom = eyeLeftBottom;
            EyeLeftInner = eyeLeftInner;
            EyebrowRightInner = eyebrowRightInner;
            EyebrowRightOuter = eyebrowRightOuter;
            EyeRightInner = eyeRightInner;
            EyeRightTop = eyeRightTop;
            EyeRightBottom = eyeRightBottom;
            EyeRightOuter = eyeRightOuter;
            NoseRootLeft = noseRootLeft;
            NoseRootRight = noseRootRight;
            NoseLeftAlarTop = noseLeftAlarTop;
            NoseRightAlarTop = noseRightAlarTop;
            NoseLeftAlarOutTip = noseLeftAlarOutTip;
            NoseRightAlarOutTip = noseRightAlarOutTip;
            UpperLipTop = upperLipTop;
            UpperLipBottom = upperLipBottom;
            UnderLipTop = underLipTop;
            UnderLipBottom = underLipBottom;
        }

        /// <summary> Initializes a new instance of <see cref="FaceLandmarks"/>. </summary>
        /// <param name="pupilLeft"></param>
        /// <param name="pupilRight"></param>
        /// <param name="noseTip"></param>
        /// <param name="mouthLeft"></param>
        /// <param name="mouthRight"></param>
        /// <param name="eyebrowLeftOuter"></param>
        /// <param name="eyebrowLeftInner"></param>
        /// <param name="eyeLeftOuter"></param>
        /// <param name="eyeLeftTop"></param>
        /// <param name="eyeLeftBottom"></param>
        /// <param name="eyeLeftInner"></param>
        /// <param name="eyebrowRightInner"></param>
        /// <param name="eyebrowRightOuter"></param>
        /// <param name="eyeRightInner"></param>
        /// <param name="eyeRightTop"></param>
        /// <param name="eyeRightBottom"></param>
        /// <param name="eyeRightOuter"></param>
        /// <param name="noseRootLeft"></param>
        /// <param name="noseRootRight"></param>
        /// <param name="noseLeftAlarTop"></param>
        /// <param name="noseRightAlarTop"></param>
        /// <param name="noseLeftAlarOutTip"></param>
        /// <param name="noseRightAlarOutTip"></param>
        /// <param name="upperLipTop"></param>
        /// <param name="upperLipBottom"></param>
        /// <param name="underLipTop"></param>
        /// <param name="underLipBottom"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FaceLandmarks(LandmarkCoordinate pupilLeft, LandmarkCoordinate pupilRight, LandmarkCoordinate noseTip, LandmarkCoordinate mouthLeft, LandmarkCoordinate mouthRight, LandmarkCoordinate eyebrowLeftOuter, LandmarkCoordinate eyebrowLeftInner, LandmarkCoordinate eyeLeftOuter, LandmarkCoordinate eyeLeftTop, LandmarkCoordinate eyeLeftBottom, LandmarkCoordinate eyeLeftInner, LandmarkCoordinate eyebrowRightInner, LandmarkCoordinate eyebrowRightOuter, LandmarkCoordinate eyeRightInner, LandmarkCoordinate eyeRightTop, LandmarkCoordinate eyeRightBottom, LandmarkCoordinate eyeRightOuter, LandmarkCoordinate noseRootLeft, LandmarkCoordinate noseRootRight, LandmarkCoordinate noseLeftAlarTop, LandmarkCoordinate noseRightAlarTop, LandmarkCoordinate noseLeftAlarOutTip, LandmarkCoordinate noseRightAlarOutTip, LandmarkCoordinate upperLipTop, LandmarkCoordinate upperLipBottom, LandmarkCoordinate underLipTop, LandmarkCoordinate underLipBottom, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            PupilLeft = pupilLeft;
            PupilRight = pupilRight;
            NoseTip = noseTip;
            MouthLeft = mouthLeft;
            MouthRight = mouthRight;
            EyebrowLeftOuter = eyebrowLeftOuter;
            EyebrowLeftInner = eyebrowLeftInner;
            EyeLeftOuter = eyeLeftOuter;
            EyeLeftTop = eyeLeftTop;
            EyeLeftBottom = eyeLeftBottom;
            EyeLeftInner = eyeLeftInner;
            EyebrowRightInner = eyebrowRightInner;
            EyebrowRightOuter = eyebrowRightOuter;
            EyeRightInner = eyeRightInner;
            EyeRightTop = eyeRightTop;
            EyeRightBottom = eyeRightBottom;
            EyeRightOuter = eyeRightOuter;
            NoseRootLeft = noseRootLeft;
            NoseRootRight = noseRootRight;
            NoseLeftAlarTop = noseLeftAlarTop;
            NoseRightAlarTop = noseRightAlarTop;
            NoseLeftAlarOutTip = noseLeftAlarOutTip;
            NoseRightAlarOutTip = noseRightAlarOutTip;
            UpperLipTop = upperLipTop;
            UpperLipBottom = upperLipBottom;
            UnderLipTop = underLipTop;
            UnderLipBottom = underLipBottom;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="FaceLandmarks"/> for deserialization. </summary>
        internal FaceLandmarks()
        {
        }

        /// <summary> Gets the pupil left. </summary>
        public LandmarkCoordinate PupilLeft { get; }
        /// <summary> Gets the pupil right. </summary>
        public LandmarkCoordinate PupilRight { get; }
        /// <summary> Gets the nose tip. </summary>
        public LandmarkCoordinate NoseTip { get; }
        /// <summary> Gets the mouth left. </summary>
        public LandmarkCoordinate MouthLeft { get; }
        /// <summary> Gets the mouth right. </summary>
        public LandmarkCoordinate MouthRight { get; }
        /// <summary> Gets the eyebrow left outer. </summary>
        public LandmarkCoordinate EyebrowLeftOuter { get; }
        /// <summary> Gets the eyebrow left inner. </summary>
        public LandmarkCoordinate EyebrowLeftInner { get; }
        /// <summary> Gets the eye left outer. </summary>
        public LandmarkCoordinate EyeLeftOuter { get; }
        /// <summary> Gets the eye left top. </summary>
        public LandmarkCoordinate EyeLeftTop { get; }
        /// <summary> Gets the eye left bottom. </summary>
        public LandmarkCoordinate EyeLeftBottom { get; }
        /// <summary> Gets the eye left inner. </summary>
        public LandmarkCoordinate EyeLeftInner { get; }
        /// <summary> Gets the eyebrow right inner. </summary>
        public LandmarkCoordinate EyebrowRightInner { get; }
        /// <summary> Gets the eyebrow right outer. </summary>
        public LandmarkCoordinate EyebrowRightOuter { get; }
        /// <summary> Gets the eye right inner. </summary>
        public LandmarkCoordinate EyeRightInner { get; }
        /// <summary> Gets the eye right top. </summary>
        public LandmarkCoordinate EyeRightTop { get; }
        /// <summary> Gets the eye right bottom. </summary>
        public LandmarkCoordinate EyeRightBottom { get; }
        /// <summary> Gets the eye right outer. </summary>
        public LandmarkCoordinate EyeRightOuter { get; }
        /// <summary> Gets the nose root left. </summary>
        public LandmarkCoordinate NoseRootLeft { get; }
        /// <summary> Gets the nose root right. </summary>
        public LandmarkCoordinate NoseRootRight { get; }
        /// <summary> Gets the nose left alar top. </summary>
        public LandmarkCoordinate NoseLeftAlarTop { get; }
        /// <summary> Gets the nose right alar top. </summary>
        public LandmarkCoordinate NoseRightAlarTop { get; }
        /// <summary> Gets the nose left alar out tip. </summary>
        public LandmarkCoordinate NoseLeftAlarOutTip { get; }
        /// <summary> Gets the nose right alar out tip. </summary>
        public LandmarkCoordinate NoseRightAlarOutTip { get; }
        /// <summary> Gets the upper lip top. </summary>
        public LandmarkCoordinate UpperLipTop { get; }
        /// <summary> Gets the upper lip bottom. </summary>
        public LandmarkCoordinate UpperLipBottom { get; }
        /// <summary> Gets the under lip top. </summary>
        public LandmarkCoordinate UnderLipTop { get; }
        /// <summary> Gets the under lip bottom. </summary>
        public LandmarkCoordinate UnderLipBottom { get; }
    }
}
