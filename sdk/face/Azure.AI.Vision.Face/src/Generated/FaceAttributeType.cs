// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Vision.Face
{
    /// <summary> The FaceAttributeType. </summary>
    public readonly partial struct FaceAttributeType : IEquatable<FaceAttributeType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FaceAttributeType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FaceAttributeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HeadPoseValue = "headPose";
        private const string GlassesValue = "glasses";
        private const string OcclusionValue = "occlusion";
        private const string AccessoriesValue = "accessories";
        private const string BlurValue = "blur";
        private const string ExposureValue = "exposure";
        private const string NoiseValue = "noise";
        private const string MaskValue = "mask";
        private const string QualityForRecognitionValue = "qualityForRecognition";
        private const string AgeValue = "age";
        private const string SmileValue = "smile";
        private const string FacialHairValue = "facialHair";
        private const string HairValue = "hair";

        /// <summary> headPose. </summary>
        public static FaceAttributeType HeadPose { get; } = new FaceAttributeType(HeadPoseValue);
        /// <summary> glasses. </summary>
        public static FaceAttributeType Glasses { get; } = new FaceAttributeType(GlassesValue);
        /// <summary> occlusion. </summary>
        public static FaceAttributeType Occlusion { get; } = new FaceAttributeType(OcclusionValue);
        /// <summary> accessories. </summary>
        public static FaceAttributeType Accessories { get; } = new FaceAttributeType(AccessoriesValue);
        /// <summary> blur. </summary>
        public static FaceAttributeType Blur { get; } = new FaceAttributeType(BlurValue);
        /// <summary> exposure. </summary>
        public static FaceAttributeType Exposure { get; } = new FaceAttributeType(ExposureValue);
        /// <summary> noise. </summary>
        public static FaceAttributeType Noise { get; } = new FaceAttributeType(NoiseValue);
        /// <summary> mask. </summary>
        public static FaceAttributeType Mask { get; } = new FaceAttributeType(MaskValue);
        /// <summary> qualityForRecognition. </summary>
        public static FaceAttributeType QualityForRecognition { get; } = new FaceAttributeType(QualityForRecognitionValue);
        /// <summary> age. </summary>
        public static FaceAttributeType Age { get; } = new FaceAttributeType(AgeValue);
        /// <summary> smile. </summary>
        public static FaceAttributeType Smile { get; } = new FaceAttributeType(SmileValue);
        /// <summary> facialHair. </summary>
        public static FaceAttributeType FacialHair { get; } = new FaceAttributeType(FacialHairValue);
        /// <summary> hair. </summary>
        public static FaceAttributeType Hair { get; } = new FaceAttributeType(HairValue);
        /// <summary> Determines if two <see cref="FaceAttributeType"/> values are the same. </summary>
        public static bool operator ==(FaceAttributeType left, FaceAttributeType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FaceAttributeType"/> values are not the same. </summary>
        public static bool operator !=(FaceAttributeType left, FaceAttributeType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="FaceAttributeType"/>. </summary>
        public static implicit operator FaceAttributeType(string value) => new FaceAttributeType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FaceAttributeType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FaceAttributeType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
