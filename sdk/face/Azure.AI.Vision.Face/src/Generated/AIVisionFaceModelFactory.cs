// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Vision.Face
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIVisionFaceModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Face.FaceDetectionResult"/>. </summary>
        /// <param name="faceId"></param>
        /// <param name="recognitionModel"></param>
        /// <param name="faceRectangle"></param>
        /// <param name="faceLandmarks"></param>
        /// <param name="faceAttributes"></param>
        /// <returns> A new <see cref="Face.FaceDetectionResult"/> instance for mocking. </returns>
        public static FaceDetectionResult FaceDetectionResult(Guid? faceId = null, FaceRecognitionModel? recognitionModel = null, FaceRectangle faceRectangle = null, FaceLandmarks faceLandmarks = null, FaceAttributes faceAttributes = null)
        {
            return new FaceDetectionResult(
                faceId,
                recognitionModel,
                faceRectangle,
                faceLandmarks,
                faceAttributes,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceRectangle"/>. </summary>
        /// <param name="top"></param>
        /// <param name="left"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <returns> A new <see cref="Face.FaceRectangle"/> instance for mocking. </returns>
        public static FaceRectangle FaceRectangle(int top = default, int left = default, int width = default, int height = default)
        {
            return new FaceRectangle(top, left, width, height, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceLandmarks"/>. </summary>
        /// <param name="pupilLeft"></param>
        /// <param name="pupilRight"></param>
        /// <param name="noseTip"></param>
        /// <param name="mouthLeft"></param>
        /// <param name="mouthRight"></param>
        /// <param name="eyebrowLeftOuter"></param>
        /// <param name="eyebrowLeftInner"></param>
        /// <param name="eyeLeftOuter"></param>
        /// <param name="eyeLeftTop"></param>
        /// <param name="eyeLeftBottom"></param>
        /// <param name="eyeLeftInner"></param>
        /// <param name="eyebrowRightInner"></param>
        /// <param name="eyebrowRightOuter"></param>
        /// <param name="eyeRightInner"></param>
        /// <param name="eyeRightTop"></param>
        /// <param name="eyeRightBottom"></param>
        /// <param name="eyeRightOuter"></param>
        /// <param name="noseRootLeft"></param>
        /// <param name="noseRootRight"></param>
        /// <param name="noseLeftAlarTop"></param>
        /// <param name="noseRightAlarTop"></param>
        /// <param name="noseLeftAlarOutTip"></param>
        /// <param name="noseRightAlarOutTip"></param>
        /// <param name="upperLipTop"></param>
        /// <param name="upperLipBottom"></param>
        /// <param name="underLipTop"></param>
        /// <param name="underLipBottom"></param>
        /// <returns> A new <see cref="Face.FaceLandmarks"/> instance for mocking. </returns>
        public static FaceLandmarks FaceLandmarks(LandmarkCoordinate pupilLeft = null, LandmarkCoordinate pupilRight = null, LandmarkCoordinate noseTip = null, LandmarkCoordinate mouthLeft = null, LandmarkCoordinate mouthRight = null, LandmarkCoordinate eyebrowLeftOuter = null, LandmarkCoordinate eyebrowLeftInner = null, LandmarkCoordinate eyeLeftOuter = null, LandmarkCoordinate eyeLeftTop = null, LandmarkCoordinate eyeLeftBottom = null, LandmarkCoordinate eyeLeftInner = null, LandmarkCoordinate eyebrowRightInner = null, LandmarkCoordinate eyebrowRightOuter = null, LandmarkCoordinate eyeRightInner = null, LandmarkCoordinate eyeRightTop = null, LandmarkCoordinate eyeRightBottom = null, LandmarkCoordinate eyeRightOuter = null, LandmarkCoordinate noseRootLeft = null, LandmarkCoordinate noseRootRight = null, LandmarkCoordinate noseLeftAlarTop = null, LandmarkCoordinate noseRightAlarTop = null, LandmarkCoordinate noseLeftAlarOutTip = null, LandmarkCoordinate noseRightAlarOutTip = null, LandmarkCoordinate upperLipTop = null, LandmarkCoordinate upperLipBottom = null, LandmarkCoordinate underLipTop = null, LandmarkCoordinate underLipBottom = null)
        {
            return new FaceLandmarks(
                pupilLeft,
                pupilRight,
                noseTip,
                mouthLeft,
                mouthRight,
                eyebrowLeftOuter,
                eyebrowLeftInner,
                eyeLeftOuter,
                eyeLeftTop,
                eyeLeftBottom,
                eyeLeftInner,
                eyebrowRightInner,
                eyebrowRightOuter,
                eyeRightInner,
                eyeRightTop,
                eyeRightBottom,
                eyeRightOuter,
                noseRootLeft,
                noseRootRight,
                noseLeftAlarTop,
                noseRightAlarTop,
                noseLeftAlarOutTip,
                noseRightAlarOutTip,
                upperLipTop,
                upperLipBottom,
                underLipTop,
                underLipBottom,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LandmarkCoordinate"/>. </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns> A new <see cref="Face.LandmarkCoordinate"/> instance for mocking. </returns>
        public static LandmarkCoordinate LandmarkCoordinate(float x = default, float y = default)
        {
            return new LandmarkCoordinate(x, y, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceAttributes"/>. </summary>
        /// <param name="age"></param>
        /// <param name="smile"></param>
        /// <param name="facialHair"></param>
        /// <param name="glasses"></param>
        /// <param name="headPose"></param>
        /// <param name="hair"></param>
        /// <param name="occlusion"></param>
        /// <param name="accessories"></param>
        /// <param name="blur"></param>
        /// <param name="exposure"></param>
        /// <param name="noise"></param>
        /// <param name="mask"></param>
        /// <param name="qualityForRecognition"></param>
        /// <returns> A new <see cref="Face.FaceAttributes"/> instance for mocking. </returns>
        public static FaceAttributes FaceAttributes(float? age = null, float? smile = null, FacialHair facialHair = null, GlassesType? glasses = null, HeadPose headPose = null, HairProperties hair = null, OcclusionProperties occlusion = null, IEnumerable<AccessoryItem> accessories = null, BlurProperties blur = null, ExposureProperties exposure = null, NoiseProperties noise = null, MaskProperties mask = null, QualityForRecognition? qualityForRecognition = null)
        {
            accessories ??= new List<AccessoryItem>();

            return new FaceAttributes(
                age,
                smile,
                facialHair,
                glasses,
                headPose,
                hair,
                occlusion,
                accessories?.ToList(),
                blur,
                exposure,
                noise,
                mask,
                qualityForRecognition,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FacialHair"/>. </summary>
        /// <param name="moustache"></param>
        /// <param name="beard"></param>
        /// <param name="sideburns"></param>
        /// <returns> A new <see cref="Face.FacialHair"/> instance for mocking. </returns>
        public static FacialHair FacialHair(float moustache = default, float beard = default, float sideburns = default)
        {
            return new FacialHair(moustache, beard, sideburns, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.HeadPose"/>. </summary>
        /// <param name="pitch"></param>
        /// <param name="roll"></param>
        /// <param name="yaw"></param>
        /// <returns> A new <see cref="Face.HeadPose"/> instance for mocking. </returns>
        public static HeadPose HeadPose(float pitch = default, float roll = default, float yaw = default)
        {
            return new HeadPose(pitch, roll, yaw, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.HairProperties"/>. </summary>
        /// <param name="bald"></param>
        /// <param name="invisible"></param>
        /// <param name="hairColor"></param>
        /// <returns> A new <see cref="Face.HairProperties"/> instance for mocking. </returns>
        public static HairProperties HairProperties(float bald = default, bool invisible = default, IEnumerable<HairColor> hairColor = null)
        {
            hairColor ??= new List<HairColor>();

            return new HairProperties(bald, invisible, hairColor?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.HairColor"/>. </summary>
        /// <param name="color"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="Face.HairColor"/> instance for mocking. </returns>
        public static HairColor HairColor(HairColorType color = default, float confidence = default)
        {
            return new HairColor(color, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.OcclusionProperties"/>. </summary>
        /// <param name="foreheadOccluded"></param>
        /// <param name="eyeOccluded"></param>
        /// <param name="mouthOccluded"></param>
        /// <returns> A new <see cref="Face.OcclusionProperties"/> instance for mocking. </returns>
        public static OcclusionProperties OcclusionProperties(bool foreheadOccluded = default, bool eyeOccluded = default, bool mouthOccluded = default)
        {
            return new OcclusionProperties(foreheadOccluded, eyeOccluded, mouthOccluded, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.AccessoryItem"/>. </summary>
        /// <param name="type"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="Face.AccessoryItem"/> instance for mocking. </returns>
        public static AccessoryItem AccessoryItem(AccessoryType type = default, float confidence = default)
        {
            return new AccessoryItem(type, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.BlurProperties"/>. </summary>
        /// <param name="blurLevel"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Face.BlurProperties"/> instance for mocking. </returns>
        public static BlurProperties BlurProperties(BlurLevel blurLevel = default, float value = default)
        {
            return new BlurProperties(blurLevel, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.ExposureProperties"/>. </summary>
        /// <param name="exposureLevel"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Face.ExposureProperties"/> instance for mocking. </returns>
        public static ExposureProperties ExposureProperties(ExposureLevel exposureLevel = default, float value = default)
        {
            return new ExposureProperties(exposureLevel, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.NoiseProperties"/>. </summary>
        /// <param name="noiseLevel"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Face.NoiseProperties"/> instance for mocking. </returns>
        public static NoiseProperties NoiseProperties(NoiseLevel noiseLevel = default, float value = default)
        {
            return new NoiseProperties(noiseLevel, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.MaskProperties"/>. </summary>
        /// <param name="noseAndMouthCovered"></param>
        /// <param name="type"></param>
        /// <returns> A new <see cref="Face.MaskProperties"/> instance for mocking. </returns>
        public static MaskProperties MaskProperties(bool noseAndMouthCovered = default, MaskType type = default)
        {
            return new MaskProperties(noseAndMouthCovered, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceFindSimilarResult"/>. </summary>
        /// <param name="confidence"></param>
        /// <param name="faceId"></param>
        /// <param name="persistedFaceId"></param>
        /// <returns> A new <see cref="Face.FaceFindSimilarResult"/> instance for mocking. </returns>
        public static FaceFindSimilarResult FaceFindSimilarResult(float confidence = default, Guid? faceId = null, Guid? persistedFaceId = null)
        {
            return new FaceFindSimilarResult(confidence, faceId, persistedFaceId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceVerificationResult"/>. </summary>
        /// <param name="isIdentical"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="Face.FaceVerificationResult"/> instance for mocking. </returns>
        public static FaceVerificationResult FaceVerificationResult(bool isIdentical = default, float confidence = default)
        {
            return new FaceVerificationResult(isIdentical, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceGroupingResult"/>. </summary>
        /// <param name="groups"></param>
        /// <param name="messyGroup"></param>
        /// <returns> A new <see cref="Face.FaceGroupingResult"/> instance for mocking. </returns>
        public static FaceGroupingResult FaceGroupingResult(IEnumerable<IList<Guid>> groups = null, IEnumerable<Guid> messyGroup = null)
        {
            groups ??= new List<IList<Guid>>();
            messyGroup ??= new List<Guid>();

            return new FaceGroupingResult(groups?.ToList(), messyGroup?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.CreateLivenessSessionContent"/>. </summary>
        /// <param name="livenessOperationMode"></param>
        /// <param name="sendResultsToClient"></param>
        /// <param name="deviceCorrelationIdSetInClient"></param>
        /// <param name="deviceCorrelationId"></param>
        /// <param name="authTokenTimeToLiveInSeconds"></param>
        /// <returns> A new <see cref="Face.CreateLivenessSessionContent"/> instance for mocking. </returns>
        public static CreateLivenessSessionContent CreateLivenessSessionContent(LivenessOperationMode livenessOperationMode = default, bool? sendResultsToClient = null, bool? deviceCorrelationIdSetInClient = null, string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null)
        {
            return new CreateLivenessSessionContent(
                livenessOperationMode,
                sendResultsToClient,
                deviceCorrelationIdSetInClient,
                deviceCorrelationId,
                authTokenTimeToLiveInSeconds,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.CreateLivenessSessionResult"/>. </summary>
        /// <param name="sessionId"></param>
        /// <param name="authToken"></param>
        /// <returns> A new <see cref="Face.CreateLivenessSessionResult"/> instance for mocking. </returns>
        public static CreateLivenessSessionResult CreateLivenessSessionResult(string sessionId = null, string authToken = null)
        {
            return new CreateLivenessSessionResult(sessionId, authToken, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessSession"/>. </summary>
        /// <param name="id"></param>
        /// <param name="createdDateTime"></param>
        /// <param name="sessionStartDateTime"></param>
        /// <param name="sessionExpired"></param>
        /// <param name="deviceCorrelationId"></param>
        /// <param name="authTokenTimeToLiveInSeconds"></param>
        /// <param name="status"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="Face.LivenessSession"/> instance for mocking. </returns>
        public static LivenessSession LivenessSession(string id = null, DateTimeOffset createdDateTime = default, DateTimeOffset? sessionStartDateTime = null, bool sessionExpired = default, string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null, FaceSessionStatus status = default, LivenessSessionAuditEntry result = null)
        {
            return new LivenessSession(
                id,
                createdDateTime,
                sessionStartDateTime,
                sessionExpired,
                deviceCorrelationId,
                authTokenTimeToLiveInSeconds,
                status,
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessSessionAuditEntry"/>. </summary>
        /// <param name="id"></param>
        /// <param name="sessionId"></param>
        /// <param name="requestId"></param>
        /// <param name="clientRequestId"></param>
        /// <param name="receivedDateTime"></param>
        /// <param name="request"></param>
        /// <param name="response"></param>
        /// <param name="digest"></param>
        /// <returns> A new <see cref="Face.LivenessSessionAuditEntry"/> instance for mocking. </returns>
        public static LivenessSessionAuditEntry LivenessSessionAuditEntry(long id = default, string sessionId = null, string requestId = null, string clientRequestId = null, DateTimeOffset receivedDateTime = default, AuditRequestInfo request = null, AuditLivenessResponseInfo response = null, string digest = null)
        {
            return new LivenessSessionAuditEntry(
                id,
                sessionId,
                requestId,
                clientRequestId,
                receivedDateTime,
                request,
                response,
                digest,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.AuditRequestInfo"/>. </summary>
        /// <param name="url"></param>
        /// <param name="method"></param>
        /// <param name="contentLength"></param>
        /// <param name="contentType"></param>
        /// <param name="userAgent"></param>
        /// <returns> A new <see cref="Face.AuditRequestInfo"/> instance for mocking. </returns>
        public static AuditRequestInfo AuditRequestInfo(string url = null, string method = null, long? contentLength = null, string contentType = null, string userAgent = null)
        {
            return new AuditRequestInfo(
                url,
                method,
                contentLength,
                contentType,
                userAgent,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.AuditLivenessResponseInfo"/>. </summary>
        /// <param name="body"></param>
        /// <param name="statusCode"></param>
        /// <param name="latencyInMilliseconds"></param>
        /// <returns> A new <see cref="Face.AuditLivenessResponseInfo"/> instance for mocking. </returns>
        public static AuditLivenessResponseInfo AuditLivenessResponseInfo(LivenessResponseBody body = null, int statusCode = default, long latencyInMilliseconds = default)
        {
            return new AuditLivenessResponseInfo(body, statusCode, latencyInMilliseconds, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessResponseBody"/>. </summary>
        /// <param name="livenessDecision"></param>
        /// <param name="target"></param>
        /// <param name="modelVersionUsed"></param>
        /// <param name="verifyResult"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Face.LivenessResponseBody"/> instance for mocking. </returns>
        public static LivenessResponseBody LivenessResponseBody(FaceLivenessDecision? livenessDecision = null, LivenessOutputsTarget target = null, LivenessModel? modelVersionUsed = null, LivenessWithVerifyOutputs verifyResult = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new LivenessResponseBody(livenessDecision, target, modelVersionUsed, verifyResult, additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessOutputsTarget"/>. </summary>
        /// <param name="faceRectangle"></param>
        /// <param name="fileName"></param>
        /// <param name="timeOffsetWithinFile"></param>
        /// <param name="imageType"></param>
        /// <returns> A new <see cref="Face.LivenessOutputsTarget"/> instance for mocking. </returns>
        public static LivenessOutputsTarget LivenessOutputsTarget(FaceRectangle faceRectangle = null, string fileName = null, int timeOffsetWithinFile = default, FaceImageType imageType = default)
        {
            return new LivenessOutputsTarget(faceRectangle, fileName, timeOffsetWithinFile, imageType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessWithVerifyOutputs"/>. </summary>
        /// <param name="verifyImage"></param>
        /// <param name="matchConfidence"></param>
        /// <param name="isIdentical"></param>
        /// <returns> A new <see cref="Face.LivenessWithVerifyOutputs"/> instance for mocking. </returns>
        public static LivenessWithVerifyOutputs LivenessWithVerifyOutputs(LivenessWithVerifyImage verifyImage = null, float matchConfidence = default, bool isIdentical = default)
        {
            return new LivenessWithVerifyOutputs(verifyImage, matchConfidence, isIdentical, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessWithVerifyImage"/>. </summary>
        /// <param name="faceRectangle"></param>
        /// <param name="qualityForRecognition"></param>
        /// <returns> A new <see cref="Face.LivenessWithVerifyImage"/> instance for mocking. </returns>
        public static LivenessWithVerifyImage LivenessWithVerifyImage(FaceRectangle faceRectangle = null, QualityForRecognition qualityForRecognition = default)
        {
            return new LivenessWithVerifyImage(faceRectangle, qualityForRecognition, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessSessionItem"/>. </summary>
        /// <param name="id"></param>
        /// <param name="createdDateTime"></param>
        /// <param name="sessionStartDateTime"></param>
        /// <param name="sessionExpired"></param>
        /// <param name="deviceCorrelationId"></param>
        /// <param name="authTokenTimeToLiveInSeconds"></param>
        /// <returns> A new <see cref="Face.LivenessSessionItem"/> instance for mocking. </returns>
        public static LivenessSessionItem LivenessSessionItem(string id = null, DateTimeOffset createdDateTime = default, DateTimeOffset? sessionStartDateTime = null, bool sessionExpired = default, string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null)
        {
            return new LivenessSessionItem(
                id,
                createdDateTime,
                sessionStartDateTime,
                sessionExpired,
                deviceCorrelationId,
                authTokenTimeToLiveInSeconds,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.CreateLivenessWithVerifySessionResult"/>. </summary>
        /// <param name="sessionId"></param>
        /// <param name="authToken"></param>
        /// <param name="verifyImage"></param>
        /// <returns> A new <see cref="Face.CreateLivenessWithVerifySessionResult"/> instance for mocking. </returns>
        public static CreateLivenessWithVerifySessionResult CreateLivenessWithVerifySessionResult(string sessionId = null, string authToken = null, LivenessWithVerifyImage verifyImage = null)
        {
            return new CreateLivenessWithVerifySessionResult(sessionId, authToken, verifyImage, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessWithVerifySession"/>. </summary>
        /// <param name="id"></param>
        /// <param name="createdDateTime"></param>
        /// <param name="sessionStartDateTime"></param>
        /// <param name="sessionExpired"></param>
        /// <param name="deviceCorrelationId"></param>
        /// <param name="authTokenTimeToLiveInSeconds"></param>
        /// <param name="status"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="Face.LivenessWithVerifySession"/> instance for mocking. </returns>
        public static LivenessWithVerifySession LivenessWithVerifySession(string id = null, DateTimeOffset createdDateTime = default, DateTimeOffset? sessionStartDateTime = null, bool sessionExpired = default, string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null, FaceSessionStatus status = default, LivenessSessionAuditEntry result = null)
        {
            return new LivenessWithVerifySession(
                id,
                createdDateTime,
                sessionStartDateTime,
                sessionExpired,
                deviceCorrelationId,
                authTokenTimeToLiveInSeconds,
                status,
                result,
                serializedAdditionalRawData: null);
        }
    }
}
