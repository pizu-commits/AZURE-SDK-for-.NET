// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Vision.Face
{
    /// <summary> The LivenessSessionAuditEntry. </summary>
    public partial class LivenessSessionAuditEntry
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LivenessSessionAuditEntry"/>. </summary>
        /// <param name="id"></param>
        /// <param name="sessionId"></param>
        /// <param name="requestId"></param>
        /// <param name="clientRequestId"></param>
        /// <param name="receivedDateTime"></param>
        /// <param name="request"></param>
        /// <param name="response"></param>
        /// <param name="digest"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/>, <paramref name="requestId"/>, <paramref name="clientRequestId"/>, <paramref name="request"/>, <paramref name="response"/> or <paramref name="digest"/> is null. </exception>
        internal LivenessSessionAuditEntry(long id, string sessionId, string requestId, string clientRequestId, DateTimeOffset receivedDateTime, AuditRequestInfo request, AuditLivenessResponseInfo response, string digest)
        {
            Argument.AssertNotNull(sessionId, nameof(sessionId));
            Argument.AssertNotNull(requestId, nameof(requestId));
            Argument.AssertNotNull(clientRequestId, nameof(clientRequestId));
            Argument.AssertNotNull(request, nameof(request));
            Argument.AssertNotNull(response, nameof(response));
            Argument.AssertNotNull(digest, nameof(digest));

            Id = id;
            SessionId = sessionId;
            RequestId = requestId;
            ClientRequestId = clientRequestId;
            ReceivedDateTime = receivedDateTime;
            Request = request;
            Response = response;
            Digest = digest;
        }

        /// <summary> Initializes a new instance of <see cref="LivenessSessionAuditEntry"/>. </summary>
        /// <param name="id"></param>
        /// <param name="sessionId"></param>
        /// <param name="requestId"></param>
        /// <param name="clientRequestId"></param>
        /// <param name="receivedDateTime"></param>
        /// <param name="request"></param>
        /// <param name="response"></param>
        /// <param name="digest"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LivenessSessionAuditEntry(long id, string sessionId, string requestId, string clientRequestId, DateTimeOffset receivedDateTime, AuditRequestInfo request, AuditLivenessResponseInfo response, string digest, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            SessionId = sessionId;
            RequestId = requestId;
            ClientRequestId = clientRequestId;
            ReceivedDateTime = receivedDateTime;
            Request = request;
            Response = response;
            Digest = digest;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="LivenessSessionAuditEntry"/> for deserialization. </summary>
        internal LivenessSessionAuditEntry()
        {
        }

        /// <summary> Gets the id. </summary>
        public long Id { get; }
        /// <summary> Gets the session id. </summary>
        public string SessionId { get; }
        /// <summary> Gets the request id. </summary>
        public string RequestId { get; }
        /// <summary> Gets the client request id. </summary>
        public string ClientRequestId { get; }
        /// <summary> Gets the received date time. </summary>
        public DateTimeOffset ReceivedDateTime { get; }
        /// <summary> Gets the request. </summary>
        public AuditRequestInfo Request { get; }
        /// <summary> Gets the response. </summary>
        public AuditLivenessResponseInfo Response { get; }
        /// <summary> Gets the digest. </summary>
        public string Digest { get; }
    }
}
