// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.ComputeFleet.Models
{
    /// <summary> The ComputeFleetVmssNetworkConfigurationProperties. </summary>
    public partial class ComputeFleetVmssNetworkConfigurationProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ComputeFleetVmssNetworkConfigurationProperties"/>. </summary>
        /// <param name="ipConfigurations"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="ipConfigurations"/> is null. </exception>
        public ComputeFleetVmssNetworkConfigurationProperties(IEnumerable<ComputeFleetVmssIPConfiguration> ipConfigurations)
        {
            Argument.AssertNotNull(ipConfigurations, nameof(ipConfigurations));

            IPConfigurations = ipConfigurations.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ComputeFleetVmssNetworkConfigurationProperties"/>. </summary>
        /// <param name="isPrimary"></param>
        /// <param name="isAcceleratedNetworkingEnabled"></param>
        /// <param name="isTcpStateTrackingDisabled"></param>
        /// <param name="isFpgaEnabled"></param>
        /// <param name="networkSecurityGroup"> Gets or sets the network security group. </param>
        /// <param name="dnsSettings"></param>
        /// <param name="ipConfigurations"></param>
        /// <param name="isIPForwardingEnabled"></param>
        /// <param name="deleteOption"></param>
        /// <param name="auxiliaryMode"></param>
        /// <param name="auxiliarySku"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ComputeFleetVmssNetworkConfigurationProperties(bool? isPrimary, bool? isAcceleratedNetworkingEnabled, bool? isTcpStateTrackingDisabled, bool? isFpgaEnabled, WritableSubResource networkSecurityGroup, ComputeFleetVmssNetworkDnsSettings dnsSettings, IList<ComputeFleetVmssIPConfiguration> ipConfigurations, bool? isIPForwardingEnabled, ComputeFleetVmDeleteOption? deleteOption, ComputeFleetNetworkInterfaceAuxiliaryMode? auxiliaryMode, ComputeFleetNetworkInterfaceAuxiliarySku? auxiliarySku, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            IsPrimary = isPrimary;
            IsAcceleratedNetworkingEnabled = isAcceleratedNetworkingEnabled;
            IsTcpStateTrackingDisabled = isTcpStateTrackingDisabled;
            IsFpgaEnabled = isFpgaEnabled;
            NetworkSecurityGroup = networkSecurityGroup;
            DnsSettings = dnsSettings;
            IPConfigurations = ipConfigurations;
            IsIPForwardingEnabled = isIPForwardingEnabled;
            DeleteOption = deleteOption;
            AuxiliaryMode = auxiliaryMode;
            AuxiliarySku = auxiliarySku;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ComputeFleetVmssNetworkConfigurationProperties"/> for deserialization. </summary>
        internal ComputeFleetVmssNetworkConfigurationProperties()
        {
        }

        /// <summary> Gets or sets the is primary. </summary>
        public bool? IsPrimary { get; set; }
        /// <summary> Gets or sets the is accelerated networking enabled. </summary>
        public bool? IsAcceleratedNetworkingEnabled { get; set; }
        /// <summary> Gets or sets the is tcp state tracking disabled. </summary>
        public bool? IsTcpStateTrackingDisabled { get; set; }
        /// <summary> Gets or sets the is fpga enabled. </summary>
        public bool? IsFpgaEnabled { get; set; }
        /// <summary> Gets or sets the network security group. </summary>
        internal WritableSubResource NetworkSecurityGroup { get; set; }
        /// <summary> Gets or sets Id. </summary>
        public ResourceIdentifier NetworkSecurityGroupId
        {
            get => NetworkSecurityGroup is null ? default : NetworkSecurityGroup.Id;
            set
            {
                if (NetworkSecurityGroup is null)
                    NetworkSecurityGroup = new WritableSubResource();
                NetworkSecurityGroup.Id = value;
            }
        }

        /// <summary> Gets or sets the dns settings. </summary>
        internal ComputeFleetVmssNetworkDnsSettings DnsSettings { get; set; }
        /// <summary> Gets the dns servers. </summary>
        public IList<string> DnsServers
        {
            get
            {
                if (DnsSettings is null)
                    DnsSettings = new ComputeFleetVmssNetworkDnsSettings();
                return DnsSettings.DnsServers;
            }
        }

        /// <summary> Gets the ip configurations. </summary>
        public IList<ComputeFleetVmssIPConfiguration> IPConfigurations { get; }
        /// <summary> Gets or sets the is ip forwarding enabled. </summary>
        public bool? IsIPForwardingEnabled { get; set; }
        /// <summary> Gets or sets the delete option. </summary>
        public ComputeFleetVmDeleteOption? DeleteOption { get; set; }
        /// <summary> Gets or sets the auxiliary mode. </summary>
        public ComputeFleetNetworkInterfaceAuxiliaryMode? AuxiliaryMode { get; set; }
        /// <summary> Gets or sets the auxiliary sku. </summary>
        public ComputeFleetNetworkInterfaceAuxiliarySku? AuxiliarySku { get; set; }
    }
}
