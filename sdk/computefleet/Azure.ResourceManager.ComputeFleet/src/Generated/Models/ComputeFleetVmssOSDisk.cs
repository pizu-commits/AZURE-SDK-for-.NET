// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ComputeFleet.Models
{
    /// <summary> The ComputeFleetVmssOSDisk. </summary>
    public partial class ComputeFleetVmssOSDisk
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ComputeFleetVmssOSDisk"/>. </summary>
        /// <param name="createOption"></param>
        public ComputeFleetVmssOSDisk(ComputeFleetDiskCreateOptionType createOption)
        {
            CreateOption = createOption;
            VhdContainers = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="ComputeFleetVmssOSDisk"/>. </summary>
        /// <param name="name"></param>
        /// <param name="caching"></param>
        /// <param name="isWriteAcceleratorEnabled"></param>
        /// <param name="createOption"></param>
        /// <param name="diffDiskSettings"></param>
        /// <param name="diskSizeGB"></param>
        /// <param name="osType"></param>
        /// <param name="image"></param>
        /// <param name="vhdContainers"></param>
        /// <param name="managedDisk"></param>
        /// <param name="deleteOption"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ComputeFleetVmssOSDisk(string name, ComputeFleetCachingType? caching, bool? isWriteAcceleratorEnabled, ComputeFleetDiskCreateOptionType createOption, ComputeFleetDiffDiskSettings diffDiskSettings, int? diskSizeGB, ComputeFleetOperatingSystemType? osType, ComputeFleetVirtualHardDisk image, IList<string> vhdContainers, ComputeFleetVmssManagedDisk managedDisk, ComputeFleetDiskDeleteOptionType? deleteOption, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Caching = caching;
            IsWriteAcceleratorEnabled = isWriteAcceleratorEnabled;
            CreateOption = createOption;
            DiffDiskSettings = diffDiskSettings;
            DiskSizeGB = diskSizeGB;
            OSType = osType;
            Image = image;
            VhdContainers = vhdContainers;
            ManagedDisk = managedDisk;
            DeleteOption = deleteOption;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ComputeFleetVmssOSDisk"/> for deserialization. </summary>
        internal ComputeFleetVmssOSDisk()
        {
        }

        /// <summary> Gets or sets the name. </summary>
        public string Name { get; set; }
        /// <summary> Gets or sets the caching. </summary>
        public ComputeFleetCachingType? Caching { get; set; }
        /// <summary> Gets or sets the is write accelerator enabled. </summary>
        public bool? IsWriteAcceleratorEnabled { get; set; }
        /// <summary> Gets or sets the create option. </summary>
        public ComputeFleetDiskCreateOptionType CreateOption { get; set; }
        /// <summary> Gets or sets the diff disk settings. </summary>
        public ComputeFleetDiffDiskSettings DiffDiskSettings { get; set; }
        /// <summary> Gets or sets the disk size gb. </summary>
        public int? DiskSizeGB { get; set; }
        /// <summary> Gets or sets the os type. </summary>
        public ComputeFleetOperatingSystemType? OSType { get; set; }
        /// <summary> Gets or sets the image. </summary>
        internal ComputeFleetVirtualHardDisk Image { get; set; }
        /// <summary> Gets or sets the image uri. </summary>
        public Uri ImageUri
        {
            get => Image is null ? default : Image.Uri;
            set
            {
                if (Image is null)
                    Image = new ComputeFleetVirtualHardDisk();
                Image.Uri = value;
            }
        }

        /// <summary> Gets the vhd containers. </summary>
        public IList<string> VhdContainers { get; }
        /// <summary> Gets or sets the managed disk. </summary>
        public ComputeFleetVmssManagedDisk ManagedDisk { get; set; }
        /// <summary> Gets or sets the delete option. </summary>
        public ComputeFleetDiskDeleteOptionType? DeleteOption { get; set; }
    }
}
