// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.ComputeFleet.Models
{
    /// <summary> The ComputeFleetVmProfile. </summary>
    public partial class ComputeFleetVmProfile
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ComputeFleetVmProfile"/>. </summary>
        public ComputeFleetVmProfile()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ComputeFleetVmProfile"/>. </summary>
        /// <param name="osProfile"></param>
        /// <param name="storageProfile"></param>
        /// <param name="networkProfile"></param>
        /// <param name="securityProfile"></param>
        /// <param name="diagnosticsProfile"></param>
        /// <param name="extensionProfile"></param>
        /// <param name="licenseType"></param>
        /// <param name="scheduledEventsProfile"></param>
        /// <param name="userData"></param>
        /// <param name="capacityReservation"></param>
        /// <param name="applicationProfile"></param>
        /// <param name="hardwareProfile"></param>
        /// <param name="serviceArtifactReference"> Gets or sets the service artifact reference. </param>
        /// <param name="securityPostureReference"></param>
        /// <param name="createdOn"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ComputeFleetVmProfile(ComputeFleetVmssOSProfile osProfile, ComputeFleetVmssStorageProfile storageProfile, ComputeFleetVmssNetworkProfile networkProfile, ComputeFleetSecurityProfile securityProfile, ComputeFleetDiagnosticsProfile diagnosticsProfile, ComputeFleetVmssExtensionProfile extensionProfile, string licenseType, ComputeFleetScheduledEventsProfile scheduledEventsProfile, string userData, CapacityReservationProfile capacityReservation, ComputeFleetApplicationProfile applicationProfile, ComputeFleetVmssHardwareProfile hardwareProfile, WritableSubResource serviceArtifactReference, ComputeFleetSecurityPostureReference securityPostureReference, DateTimeOffset? createdOn, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            OSProfile = osProfile;
            StorageProfile = storageProfile;
            NetworkProfile = networkProfile;
            SecurityProfile = securityProfile;
            DiagnosticsProfile = diagnosticsProfile;
            ExtensionProfile = extensionProfile;
            LicenseType = licenseType;
            ScheduledEventsProfile = scheduledEventsProfile;
            UserData = userData;
            CapacityReservation = capacityReservation;
            ApplicationProfile = applicationProfile;
            HardwareProfile = hardwareProfile;
            ServiceArtifactReference = serviceArtifactReference;
            SecurityPostureReference = securityPostureReference;
            CreatedOn = createdOn;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets the os profile. </summary>
        public ComputeFleetVmssOSProfile OSProfile { get; set; }
        /// <summary> Gets or sets the storage profile. </summary>
        public ComputeFleetVmssStorageProfile StorageProfile { get; set; }
        /// <summary> Gets or sets the network profile. </summary>
        public ComputeFleetVmssNetworkProfile NetworkProfile { get; set; }
        /// <summary> Gets or sets the security profile. </summary>
        public ComputeFleetSecurityProfile SecurityProfile { get; set; }
        /// <summary> Gets or sets the diagnostics profile. </summary>
        internal ComputeFleetDiagnosticsProfile DiagnosticsProfile { get; set; }
        /// <summary> Gets or sets the boot diagnostics. </summary>
        public ComputeFleetBootDiagnostics BootDiagnostics
        {
            get => DiagnosticsProfile is null ? default : DiagnosticsProfile.BootDiagnostics;
            set
            {
                if (DiagnosticsProfile is null)
                    DiagnosticsProfile = new ComputeFleetDiagnosticsProfile();
                DiagnosticsProfile.BootDiagnostics = value;
            }
        }

        /// <summary> Gets or sets the extension profile. </summary>
        public ComputeFleetVmssExtensionProfile ExtensionProfile { get; set; }
        /// <summary> Gets or sets the license type. </summary>
        public string LicenseType { get; set; }
        /// <summary> Gets or sets the scheduled events profile. </summary>
        public ComputeFleetScheduledEventsProfile ScheduledEventsProfile { get; set; }
        /// <summary> Gets or sets the user data. </summary>
        public string UserData { get; set; }
        /// <summary> Gets or sets the capacity reservation. </summary>
        internal CapacityReservationProfile CapacityReservation { get; set; }
        /// <summary> Gets or sets Id. </summary>
        public ResourceIdentifier CapacityReservationGroupId
        {
            get => CapacityReservation is null ? default : CapacityReservation.CapacityReservationGroupId;
            set
            {
                if (CapacityReservation is null)
                    CapacityReservation = new CapacityReservationProfile();
                CapacityReservation.CapacityReservationGroupId = value;
            }
        }

        /// <summary> Gets or sets the application profile. </summary>
        internal ComputeFleetApplicationProfile ApplicationProfile { get; set; }
        /// <summary> Gets the gallery applications. </summary>
        public IList<ComputeFleetVmGalleryApplication> GalleryApplications
        {
            get
            {
                if (ApplicationProfile is null)
                    ApplicationProfile = new ComputeFleetApplicationProfile();
                return ApplicationProfile.GalleryApplications;
            }
        }

        /// <summary> Gets or sets the hardware profile. </summary>
        internal ComputeFleetVmssHardwareProfile HardwareProfile { get; set; }
        /// <summary> Gets or sets the hardware vm size properties. </summary>
        public ComputeFleetVmSizeProperties HardwareVmSizeProperties
        {
            get => HardwareProfile is null ? default : HardwareProfile.VmSizeProperties;
            set
            {
                if (HardwareProfile is null)
                    HardwareProfile = new ComputeFleetVmssHardwareProfile();
                HardwareProfile.VmSizeProperties = value;
            }
        }

        /// <summary> Gets or sets the service artifact reference. </summary>
        internal WritableSubResource ServiceArtifactReference { get; set; }
        /// <summary> Gets or sets Id. </summary>
        public ResourceIdentifier ServiceArtifactReferenceId
        {
            get => ServiceArtifactReference is null ? default : ServiceArtifactReference.Id;
            set
            {
                if (ServiceArtifactReference is null)
                    ServiceArtifactReference = new WritableSubResource();
                ServiceArtifactReference.Id = value;
            }
        }

        /// <summary> Gets or sets the security posture reference. </summary>
        public ComputeFleetSecurityPostureReference SecurityPostureReference { get; set; }
        /// <summary> Gets the created on. </summary>
        public DateTimeOffset? CreatedOn { get; }
    }
}
