// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.ComputeFleet.Models
{
    /// <summary> The ComputeFleetVmssIPConfigurationProperties. </summary>
    public partial class ComputeFleetVmssIPConfigurationProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ComputeFleetVmssIPConfigurationProperties"/>. </summary>
        public ComputeFleetVmssIPConfigurationProperties()
        {
            ApplicationGatewayBackendAddressPools = new ChangeTrackingList<WritableSubResource>();
            ApplicationSecurityGroups = new ChangeTrackingList<WritableSubResource>();
            LoadBalancerBackendAddressPools = new ChangeTrackingList<WritableSubResource>();
            LoadBalancerInboundNatPools = new ChangeTrackingList<WritableSubResource>();
        }

        /// <summary> Initializes a new instance of <see cref="ComputeFleetVmssIPConfigurationProperties"/>. </summary>
        /// <param name="subnet"> Gets or sets the subnet. </param>
        /// <param name="isPrimary"></param>
        /// <param name="publicIPAddressConfiguration"></param>
        /// <param name="privateIPAddressVersion"></param>
        /// <param name="applicationGatewayBackendAddressPools"> Gets the application gateway backend address pools. </param>
        /// <param name="applicationSecurityGroups"> Gets the application security groups. </param>
        /// <param name="loadBalancerBackendAddressPools"> Gets the load balancer backend address pools. </param>
        /// <param name="loadBalancerInboundNatPools"> Gets the load balancer inbound nat pools. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ComputeFleetVmssIPConfigurationProperties(WritableSubResource subnet, bool? isPrimary, ComputeFleetVmssPublicIPAddressConfiguration publicIPAddressConfiguration, ComputeFleetIPVersion? privateIPAddressVersion, IList<WritableSubResource> applicationGatewayBackendAddressPools, IList<WritableSubResource> applicationSecurityGroups, IList<WritableSubResource> loadBalancerBackendAddressPools, IList<WritableSubResource> loadBalancerInboundNatPools, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Subnet = subnet;
            IsPrimary = isPrimary;
            PublicIPAddressConfiguration = publicIPAddressConfiguration;
            PrivateIPAddressVersion = privateIPAddressVersion;
            ApplicationGatewayBackendAddressPools = applicationGatewayBackendAddressPools;
            ApplicationSecurityGroups = applicationSecurityGroups;
            LoadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
            LoadBalancerInboundNatPools = loadBalancerInboundNatPools;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets the subnet. </summary>
        internal WritableSubResource Subnet { get; set; }
        /// <summary> Gets or sets Id. </summary>
        public ResourceIdentifier SubnetId
        {
            get => Subnet is null ? default : Subnet.Id;
            set
            {
                if (Subnet is null)
                    Subnet = new WritableSubResource();
                Subnet.Id = value;
            }
        }

        /// <summary> Gets or sets the is primary. </summary>
        public bool? IsPrimary { get; set; }
        /// <summary> Gets or sets the public ip address configuration. </summary>
        public ComputeFleetVmssPublicIPAddressConfiguration PublicIPAddressConfiguration { get; set; }
        /// <summary> Gets or sets the private ip address version. </summary>
        public ComputeFleetIPVersion? PrivateIPAddressVersion { get; set; }
        /// <summary> Gets the application gateway backend address pools. </summary>
        public IList<WritableSubResource> ApplicationGatewayBackendAddressPools { get; }
        /// <summary> Gets the application security groups. </summary>
        public IList<WritableSubResource> ApplicationSecurityGroups { get; }
        /// <summary> Gets the load balancer backend address pools. </summary>
        public IList<WritableSubResource> LoadBalancerBackendAddressPools { get; }
        /// <summary> Gets the load balancer inbound nat pools. </summary>
        public IList<WritableSubResource> LoadBalancerInboundNatPools { get; }
    }
}
