// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ComputeFleet.Models
{
    /// <summary> The ComputeFleetLinuxConfiguration. </summary>
    public partial class ComputeFleetLinuxConfiguration
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ComputeFleetLinuxConfiguration"/>. </summary>
        public ComputeFleetLinuxConfiguration()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ComputeFleetLinuxConfiguration"/>. </summary>
        /// <param name="isPasswordAuthenticationDisabled"></param>
        /// <param name="ssh"></param>
        /// <param name="isVmAgentProvisioned"></param>
        /// <param name="patchSettings"></param>
        /// <param name="isVmAgentPlatformUpdatesEnabled"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ComputeFleetLinuxConfiguration(bool? isPasswordAuthenticationDisabled, ComputeFleetSshConfiguration ssh, bool? isVmAgentProvisioned, ComputeFleetLinuxPatchSettings patchSettings, bool? isVmAgentPlatformUpdatesEnabled, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            IsPasswordAuthenticationDisabled = isPasswordAuthenticationDisabled;
            Ssh = ssh;
            IsVmAgentProvisioned = isVmAgentProvisioned;
            PatchSettings = patchSettings;
            IsVmAgentPlatformUpdatesEnabled = isVmAgentPlatformUpdatesEnabled;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets the is password authentication disabled. </summary>
        public bool? IsPasswordAuthenticationDisabled { get; set; }
        /// <summary> Gets or sets the ssh. </summary>
        internal ComputeFleetSshConfiguration Ssh { get; set; }
        /// <summary> Gets the ssh public keys. </summary>
        public IList<ComputeFleetSshPublicKey> SshPublicKeys
        {
            get
            {
                if (Ssh is null)
                    Ssh = new ComputeFleetSshConfiguration();
                return Ssh.PublicKeys;
            }
        }

        /// <summary> Gets or sets the is vm agent provisioned. </summary>
        public bool? IsVmAgentProvisioned { get; set; }
        /// <summary> Gets or sets the patch settings. </summary>
        public ComputeFleetLinuxPatchSettings PatchSettings { get; set; }
        /// <summary> Gets or sets the is vm agent platform updates enabled. </summary>
        public bool? IsVmAgentPlatformUpdatesEnabled { get; set; }
    }
}
