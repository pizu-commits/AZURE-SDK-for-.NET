// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Inference
{
    /// <summary> The ChatRequestToolMessage. </summary>
    public partial class ChatRequestToolMessage : ChatRequestMessage
    {
        /// <summary> Initializes a new instance of <see cref="ChatRequestToolMessage"/>. </summary>
        /// <param name="content"></param>
        /// <param name="toolCallId"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="toolCallId"/> is null. </exception>
        public ChatRequestToolMessage(string content, string toolCallId)
        {
            Argument.AssertNotNull(toolCallId, nameof(toolCallId));

            Role = ChatRole.Tool;
            Content = content;
            ToolCallId = toolCallId;
        }

        /// <summary> Initializes a new instance of <see cref="ChatRequestToolMessage"/>. </summary>
        /// <param name="role"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="content"></param>
        /// <param name="toolCallId"></param>
        internal ChatRequestToolMessage(ChatRole role, IDictionary<string, BinaryData> serializedAdditionalRawData, string content, string toolCallId) : base(role, serializedAdditionalRawData)
        {
            Content = content;
            ToolCallId = toolCallId;
        }

        /// <summary> Initializes a new instance of <see cref="ChatRequestToolMessage"/> for deserialization. </summary>
        internal ChatRequestToolMessage()
        {
        }

        /// <summary> Gets the content. </summary>
        public string Content { get; }
        /// <summary> Gets the tool call id. </summary>
        public string ToolCallId { get; }
    }
}
