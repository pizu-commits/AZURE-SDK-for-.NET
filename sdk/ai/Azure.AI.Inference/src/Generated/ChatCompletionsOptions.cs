// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Inference
{
    /// <summary> The ChatCompletionsOptions. </summary>
    public partial class ChatCompletionsOptions
    {
        /// <summary> Initializes a new instance of <see cref="ChatCompletionsOptions"/>. </summary>
        /// <param name="messages">
        /// Please note <see cref="ChatRequestMessage"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ChatRequestAssistantMessage"/>, <see cref="ChatRequestSystemMessage"/>, <see cref="ChatRequestToolMessage"/> and <see cref="ChatRequestUserMessage"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="messages"/> is null. </exception>
        public ChatCompletionsOptions(IEnumerable<ChatRequestMessage> messages)
        {
            Argument.AssertNotNull(messages, nameof(messages));

            Messages = messages.ToList();
            StopSequences = new ChangeTrackingList<string>();
            Tools = new ChangeTrackingList<ChatCompletionsToolDefinition>();
            AdditionalProperties = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="ChatCompletionsOptions"/>. </summary>
        /// <param name="messages">
        /// Please note <see cref="ChatRequestMessage"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ChatRequestAssistantMessage"/>, <see cref="ChatRequestSystemMessage"/>, <see cref="ChatRequestToolMessage"/> and <see cref="ChatRequestUserMessage"/>.
        /// </param>
        /// <param name="frequencyPenalty"></param>
        /// <param name="internalShouldStreamResponse"></param>
        /// <param name="presencePenalty"></param>
        /// <param name="temperature"></param>
        /// <param name="nucleusSamplingFactor"></param>
        /// <param name="maxTokens"></param>
        /// <param name="responseFormat">
        /// Please note <see cref="ChatCompletionsResponseFormat"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ChatCompletionsResponseFormatJSON"/> and <see cref="ChatCompletionsResponseFormatText"/>.
        /// </param>
        /// <param name="stopSequences"></param>
        /// <param name="tools">
        /// Please note <see cref="ChatCompletionsToolDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ChatCompletionsFunctionToolDefinition"/>.
        /// </param>
        /// <param name="internalSuppressedToolChoice"></param>
        /// <param name="seed"></param>
        /// <param name="model"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        internal ChatCompletionsOptions(IList<ChatRequestMessage> messages, float? frequencyPenalty, bool? internalShouldStreamResponse, float? presencePenalty, float? temperature, float? nucleusSamplingFactor, int? maxTokens, ChatCompletionsResponseFormat responseFormat, IList<string> stopSequences, IList<ChatCompletionsToolDefinition> tools, BinaryData internalSuppressedToolChoice, long? seed, string model, IDictionary<string, BinaryData> additionalProperties)
        {
            Messages = messages;
            FrequencyPenalty = frequencyPenalty;
            InternalShouldStreamResponse = internalShouldStreamResponse;
            PresencePenalty = presencePenalty;
            Temperature = temperature;
            NucleusSamplingFactor = nucleusSamplingFactor;
            MaxTokens = maxTokens;
            ResponseFormat = responseFormat;
            StopSequences = stopSequences;
            Tools = tools;
            InternalSuppressedToolChoice = internalSuppressedToolChoice;
            Seed = seed;
            Model = model;
            AdditionalProperties = additionalProperties;
        }

        /// <summary>
        /// Gets the messages
        /// Please note <see cref="ChatRequestMessage"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ChatRequestAssistantMessage"/>, <see cref="ChatRequestSystemMessage"/>, <see cref="ChatRequestToolMessage"/> and <see cref="ChatRequestUserMessage"/>.
        /// </summary>
        public IList<ChatRequestMessage> Messages { get; }
        /// <summary> Gets or sets the frequency penalty. </summary>
        public float? FrequencyPenalty { get; set; }
        /// <summary> Gets or sets the presence penalty. </summary>
        public float? PresencePenalty { get; set; }
        /// <summary> Gets or sets the temperature. </summary>
        public float? Temperature { get; set; }
        /// <summary> Gets or sets the nucleus sampling factor. </summary>
        public float? NucleusSamplingFactor { get; set; }
        /// <summary> Gets or sets the max tokens. </summary>
        public int? MaxTokens { get; set; }
        /// <summary>
        /// Gets or sets the response format
        /// Please note <see cref="ChatCompletionsResponseFormat"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ChatCompletionsResponseFormatJSON"/> and <see cref="ChatCompletionsResponseFormatText"/>.
        /// </summary>
        public ChatCompletionsResponseFormat ResponseFormat { get; set; }
        /// <summary> Gets the stop sequences. </summary>
        public IList<string> StopSequences { get; }
        /// <summary>
        /// Gets the tools
        /// Please note <see cref="ChatCompletionsToolDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ChatCompletionsFunctionToolDefinition"/>.
        /// </summary>
        public IList<ChatCompletionsToolDefinition> Tools { get; }
        /// <summary> Gets or sets the seed. </summary>
        public long? Seed { get; set; }
        /// <summary> Gets or sets the model. </summary>
        public string Model { get; set; }
        /// <summary>
        /// Additional Properties
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> AdditionalProperties { get; }
    }
}
