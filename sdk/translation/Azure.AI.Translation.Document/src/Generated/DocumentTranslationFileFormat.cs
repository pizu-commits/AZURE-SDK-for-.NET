// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Translation.Document
{
    /// <summary> The FileFormat. </summary>
    public partial class DocumentTranslationFileFormat
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DocumentTranslationFileFormat"/>. </summary>
        /// <param name="format"></param>
        /// <param name="fileExtensions"></param>
        /// <param name="contentTypes"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="format"/>, <paramref name="fileExtensions"/> or <paramref name="contentTypes"/> is null. </exception>
        internal DocumentTranslationFileFormat(string format, IEnumerable<string> fileExtensions, IEnumerable<string> contentTypes)
        {
            Argument.AssertNotNull(format, nameof(format));
            Argument.AssertNotNull(fileExtensions, nameof(fileExtensions));
            Argument.AssertNotNull(contentTypes, nameof(contentTypes));

            Format = format;
            FileExtensions = fileExtensions.ToList();
            ContentTypes = contentTypes.ToList();
            FormatVersions = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="DocumentTranslationFileFormat"/>. </summary>
        /// <param name="format"></param>
        /// <param name="fileExtensions"></param>
        /// <param name="contentTypes"></param>
        /// <param name="defaultFormatVersion"></param>
        /// <param name="formatVersions"></param>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DocumentTranslationFileFormat(string format, IReadOnlyList<string> fileExtensions, IReadOnlyList<string> contentTypes, string defaultFormatVersion, IReadOnlyList<string> formatVersions, string type, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Format = format;
            FileExtensions = fileExtensions;
            ContentTypes = contentTypes;
            DefaultFormatVersion = defaultFormatVersion;
            FormatVersions = formatVersions;
            Type = type;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DocumentTranslationFileFormat"/> for deserialization. </summary>
        internal DocumentTranslationFileFormat()
        {
        }

        /// <summary> Gets the format. </summary>
        public string Format { get; }
        /// <summary> Gets the file extensions. </summary>
        public IReadOnlyList<string> FileExtensions { get; }
        /// <summary> Gets the content types. </summary>
        public IReadOnlyList<string> ContentTypes { get; }
        /// <summary> Gets the type. </summary>
        public string Type { get; }
    }
}
