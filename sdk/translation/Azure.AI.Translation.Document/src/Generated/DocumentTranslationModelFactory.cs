// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Azure.AI.Translation.Document
{
    /// <summary> Model factory for models. </summary>
    public static partial class DocumentTranslationModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Document.DocumentTranslationInput"/>. </summary>
        /// <param name="source"></param>
        /// <param name="targets"></param>
        /// <param name="storageUriKind"></param>
        /// <returns> A new <see cref="Document.DocumentTranslationInput"/> instance for mocking. </returns>
        public static DocumentTranslationInput DocumentTranslationInput(TranslationSource source = null, IEnumerable<TranslationTarget> targets = null, StorageInputUriKind? storageUriKind = null)
        {
            targets ??= new List<TranslationTarget>();

            return new DocumentTranslationInput(source, targets?.ToList(), storageUriKind, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Document.SupportedFileFormats"/>. </summary>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Document.SupportedFileFormats"/> instance for mocking. </returns>
        public static SupportedFileFormats SupportedFileFormats(IEnumerable<DocumentTranslationFileFormat> value = null)
        {
            value ??= new List<DocumentTranslationFileFormat>();

            return new SupportedFileFormats(value?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Document.DocumentTranslationFileFormat"/>. </summary>
        /// <param name="format"></param>
        /// <param name="fileExtensions"></param>
        /// <param name="contentTypes"></param>
        /// <param name="defaultFormatVersion"></param>
        /// <param name="formatVersions"></param>
        /// <param name="type"></param>
        /// <returns> A new <see cref="Document.DocumentTranslationFileFormat"/> instance for mocking. </returns>
        public static DocumentTranslationFileFormat DocumentTranslationFileFormat(string format = null, IEnumerable<string> fileExtensions = null, IEnumerable<string> contentTypes = null, string defaultFormatVersion = null, IEnumerable<string> formatVersions = null, string type = null)
        {
            fileExtensions ??= new List<string>();
            contentTypes ??= new List<string>();
            formatVersions ??= new List<string>();

            return new DocumentTranslationFileFormat(
                format,
                fileExtensions?.ToList(),
                contentTypes?.ToList(),
                defaultFormatVersion,
                formatVersions?.ToList(),
                type,
                serializedAdditionalRawData: null);
        }
    }
}
