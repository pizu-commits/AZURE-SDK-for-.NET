// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Translation.Text
{
    /// <summary> Model factory for models. </summary>
    public static partial class AITranslationTextModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Text.GetSupportedLanguagesResult"/>. </summary>
        /// <param name="translation"></param>
        /// <param name="transliteration"></param>
        /// <param name="dictionary"></param>
        /// <returns> A new <see cref="Text.GetSupportedLanguagesResult"/> instance for mocking. </returns>
        public static GetSupportedLanguagesResult GetSupportedLanguagesResult(IReadOnlyDictionary<string, TranslationLanguage> translation = null, IReadOnlyDictionary<string, TransliterationLanguage> transliteration = null, IReadOnlyDictionary<string, SourceDictionaryLanguage> dictionary = null)
        {
            translation ??= new Dictionary<string, TranslationLanguage>();
            transliteration ??= new Dictionary<string, TransliterationLanguage>();
            dictionary ??= new Dictionary<string, SourceDictionaryLanguage>();

            return new GetSupportedLanguagesResult(translation, transliteration, dictionary, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TranslationLanguage"/>. </summary>
        /// <param name="name"></param>
        /// <param name="nativeName"></param>
        /// <param name="directionality"></param>
        /// <returns> A new <see cref="Text.TranslationLanguage"/> instance for mocking. </returns>
        public static TranslationLanguage TranslationLanguage(string name = null, string nativeName = null, LanguageDirectionality directionality = default)
        {
            return new TranslationLanguage(name, nativeName, directionality, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TransliterationLanguage"/>. </summary>
        /// <param name="name"></param>
        /// <param name="nativeName"></param>
        /// <param name="scripts"></param>
        /// <returns> A new <see cref="Text.TransliterationLanguage"/> instance for mocking. </returns>
        public static TransliterationLanguage TransliterationLanguage(string name = null, string nativeName = null, IEnumerable<TransliterableScript> scripts = null)
        {
            scripts ??= new List<TransliterableScript>();

            return new TransliterationLanguage(name, nativeName, scripts?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TransliterableScript"/>. </summary>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <param name="nativeName"></param>
        /// <param name="directionality"></param>
        /// <param name="targetLanguageScripts"></param>
        /// <returns> A new <see cref="Text.TransliterableScript"/> instance for mocking. </returns>
        public static TransliterableScript TransliterableScript(string code = null, string name = null, string nativeName = null, LanguageDirectionality directionality = default, IEnumerable<LanguageScript> targetLanguageScripts = null)
        {
            targetLanguageScripts ??= new List<LanguageScript>();

            return new TransliterableScript(
                code,
                name,
                nativeName,
                directionality,
                serializedAdditionalRawData: null,
                targetLanguageScripts?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Text.LanguageScript"/>. </summary>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <param name="nativeName"></param>
        /// <param name="directionality"></param>
        /// <returns> A new <see cref="Text.LanguageScript"/> instance for mocking. </returns>
        public static LanguageScript LanguageScript(string code = null, string name = null, string nativeName = null, LanguageDirectionality directionality = default)
        {
            return new LanguageScript(code, name, nativeName, directionality, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.SourceDictionaryLanguage"/>. </summary>
        /// <param name="name"></param>
        /// <param name="nativeName"></param>
        /// <param name="directionality"></param>
        /// <param name="translations"></param>
        /// <returns> A new <see cref="Text.SourceDictionaryLanguage"/> instance for mocking. </returns>
        public static SourceDictionaryLanguage SourceDictionaryLanguage(string name = null, string nativeName = null, LanguageDirectionality directionality = default, IEnumerable<TargetDictionaryLanguage> translations = null)
        {
            translations ??= new List<TargetDictionaryLanguage>();

            return new SourceDictionaryLanguage(name, nativeName, directionality, translations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TargetDictionaryLanguage"/>. </summary>
        /// <param name="name"></param>
        /// <param name="nativeName"></param>
        /// <param name="directionality"></param>
        /// <param name="code"></param>
        /// <returns> A new <see cref="Text.TargetDictionaryLanguage"/> instance for mocking. </returns>
        public static TargetDictionaryLanguage TargetDictionaryLanguage(string name = null, string nativeName = null, LanguageDirectionality directionality = default, string code = null)
        {
            return new TargetDictionaryLanguage(name, nativeName, directionality, code, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TranslatedTextItem"/>. </summary>
        /// <param name="detectedLanguage"></param>
        /// <param name="translations"></param>
        /// <param name="sourceText"></param>
        /// <returns> A new <see cref="Text.TranslatedTextItem"/> instance for mocking. </returns>
        public static TranslatedTextItem TranslatedTextItem(DetectedLanguage detectedLanguage = null, IEnumerable<TranslationText> translations = null, SourceText sourceText = null)
        {
            translations ??= new List<TranslationText>();

            return new TranslatedTextItem(detectedLanguage, translations?.ToList(), sourceText, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.DetectedLanguage"/>. </summary>
        /// <param name="language"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="Text.DetectedLanguage"/> instance for mocking. </returns>
        public static DetectedLanguage DetectedLanguage(string language = null, float confidence = default)
        {
            return new DetectedLanguage(language, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TranslationText"/>. </summary>
        /// <param name="targetLanguage"></param>
        /// <param name="text"></param>
        /// <param name="transliteration"></param>
        /// <param name="alignment"></param>
        /// <param name="sentenceBoundaries"></param>
        /// <returns> A new <see cref="Text.TranslationText"/> instance for mocking. </returns>
        public static TranslationText TranslationText(string targetLanguage = null, string text = null, TransliteratedText transliteration = null, TranslatedTextAlignment alignment = null, SentenceBoundaries sentenceBoundaries = null)
        {
            return new TranslationText(
                targetLanguage,
                text,
                transliteration,
                alignment,
                sentenceBoundaries,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TransliteratedText"/>. </summary>
        /// <param name="text"></param>
        /// <param name="script"></param>
        /// <returns> A new <see cref="Text.TransliteratedText"/> instance for mocking. </returns>
        public static TransliteratedText TransliteratedText(string text = null, string script = null)
        {
            return new TransliteratedText(text, script, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TranslatedTextAlignment"/>. </summary>
        /// <param name="projections"></param>
        /// <returns> A new <see cref="Text.TranslatedTextAlignment"/> instance for mocking. </returns>
        public static TranslatedTextAlignment TranslatedTextAlignment(string projections = null)
        {
            return new TranslatedTextAlignment(projections, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.SentenceBoundaries"/>. </summary>
        /// <param name="sourceSentencesLengths"></param>
        /// <param name="translatedSentencesLengths"></param>
        /// <returns> A new <see cref="Text.SentenceBoundaries"/> instance for mocking. </returns>
        public static SentenceBoundaries SentenceBoundaries(IEnumerable<int> sourceSentencesLengths = null, IEnumerable<int> translatedSentencesLengths = null)
        {
            sourceSentencesLengths ??= new List<int>();
            translatedSentencesLengths ??= new List<int>();

            return new SentenceBoundaries(sourceSentencesLengths?.ToList(), translatedSentencesLengths?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.SourceText"/>. </summary>
        /// <param name="text"></param>
        /// <returns> A new <see cref="Text.SourceText"/> instance for mocking. </returns>
        public static SourceText SourceText(string text = null)
        {
            return new SourceText(text, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.BreakSentenceItem"/>. </summary>
        /// <param name="detectedLanguage"></param>
        /// <param name="sentencesLengths"></param>
        /// <returns> A new <see cref="Text.BreakSentenceItem"/> instance for mocking. </returns>
        public static BreakSentenceItem BreakSentenceItem(DetectedLanguage detectedLanguage = null, IEnumerable<int> sentencesLengths = null)
        {
            sentencesLengths ??= new List<int>();

            return new BreakSentenceItem(detectedLanguage, sentencesLengths?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.DictionaryLookupItem"/>. </summary>
        /// <param name="normalizedSource"></param>
        /// <param name="displaySource"></param>
        /// <param name="translations"></param>
        /// <returns> A new <see cref="Text.DictionaryLookupItem"/> instance for mocking. </returns>
        public static DictionaryLookupItem DictionaryLookupItem(string normalizedSource = null, string displaySource = null, IEnumerable<DictionaryTranslation> translations = null)
        {
            translations ??= new List<DictionaryTranslation>();

            return new DictionaryLookupItem(normalizedSource, displaySource, translations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.DictionaryTranslation"/>. </summary>
        /// <param name="normalizedTarget"></param>
        /// <param name="displayTarget"></param>
        /// <param name="posTag"></param>
        /// <param name="confidence"></param>
        /// <param name="prefixWord"></param>
        /// <param name="backTranslations"></param>
        /// <returns> A new <see cref="Text.DictionaryTranslation"/> instance for mocking. </returns>
        public static DictionaryTranslation DictionaryTranslation(string normalizedTarget = null, string displayTarget = null, string posTag = null, float confidence = default, string prefixWord = null, IEnumerable<BackTranslation> backTranslations = null)
        {
            backTranslations ??= new List<BackTranslation>();

            return new DictionaryTranslation(
                normalizedTarget,
                displayTarget,
                posTag,
                confidence,
                prefixWord,
                backTranslations?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.BackTranslation"/>. </summary>
        /// <param name="normalizedText"></param>
        /// <param name="displayText"></param>
        /// <param name="examplesCount"></param>
        /// <param name="frequencyCount"></param>
        /// <returns> A new <see cref="Text.BackTranslation"/> instance for mocking. </returns>
        public static BackTranslation BackTranslation(string normalizedText = null, string displayText = null, int examplesCount = default, int frequencyCount = default)
        {
            return new BackTranslation(normalizedText, displayText, examplesCount, frequencyCount, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.DictionaryExampleItem"/>. </summary>
        /// <param name="normalizedSource"></param>
        /// <param name="normalizedTarget"></param>
        /// <param name="examples"></param>
        /// <returns> A new <see cref="Text.DictionaryExampleItem"/> instance for mocking. </returns>
        public static DictionaryExampleItem DictionaryExampleItem(string normalizedSource = null, string normalizedTarget = null, IEnumerable<DictionaryExample> examples = null)
        {
            examples ??= new List<DictionaryExample>();

            return new DictionaryExampleItem(normalizedSource, normalizedTarget, examples?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.DictionaryExample"/>. </summary>
        /// <param name="sourcePrefix"></param>
        /// <param name="sourceTerm"></param>
        /// <param name="sourceSuffix"></param>
        /// <param name="targetPrefix"></param>
        /// <param name="targetTerm"></param>
        /// <param name="targetSuffix"></param>
        /// <returns> A new <see cref="Text.DictionaryExample"/> instance for mocking. </returns>
        public static DictionaryExample DictionaryExample(string sourcePrefix = null, string sourceTerm = null, string sourceSuffix = null, string targetPrefix = null, string targetTerm = null, string targetSuffix = null)
        {
            return new DictionaryExample(
                sourcePrefix,
                sourceTerm,
                sourceSuffix,
                targetPrefix,
                targetTerm,
                targetSuffix,
                serializedAdditionalRawData: null);
        }
    }
}
