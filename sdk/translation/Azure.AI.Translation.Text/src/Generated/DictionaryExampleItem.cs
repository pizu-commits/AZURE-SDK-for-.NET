// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Translation.Text
{
    /// <summary> The DictionaryExampleItem. </summary>
    public partial class DictionaryExampleItem
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DictionaryExampleItem"/>. </summary>
        /// <param name="normalizedSource"></param>
        /// <param name="normalizedTarget"></param>
        /// <param name="examples"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="normalizedSource"/>, <paramref name="normalizedTarget"/> or <paramref name="examples"/> is null. </exception>
        internal DictionaryExampleItem(string normalizedSource, string normalizedTarget, IEnumerable<DictionaryExample> examples)
        {
            Argument.AssertNotNull(normalizedSource, nameof(normalizedSource));
            Argument.AssertNotNull(normalizedTarget, nameof(normalizedTarget));
            Argument.AssertNotNull(examples, nameof(examples));

            NormalizedSource = normalizedSource;
            NormalizedTarget = normalizedTarget;
            Examples = examples.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="DictionaryExampleItem"/>. </summary>
        /// <param name="normalizedSource"></param>
        /// <param name="normalizedTarget"></param>
        /// <param name="examples"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DictionaryExampleItem(string normalizedSource, string normalizedTarget, IReadOnlyList<DictionaryExample> examples, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            NormalizedSource = normalizedSource;
            NormalizedTarget = normalizedTarget;
            Examples = examples;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DictionaryExampleItem"/> for deserialization. </summary>
        internal DictionaryExampleItem()
        {
        }

        /// <summary> Gets the normalized source. </summary>
        public string NormalizedSource { get; }
        /// <summary> Gets the normalized target. </summary>
        public string NormalizedTarget { get; }
        /// <summary> Gets the examples. </summary>
        public IReadOnlyList<DictionaryExample> Examples { get; }
    }
}
