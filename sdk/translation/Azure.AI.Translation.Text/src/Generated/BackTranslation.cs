// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Translation.Text
{
    /// <summary> The BackTranslation. </summary>
    public partial class BackTranslation
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BackTranslation"/>. </summary>
        /// <param name="normalizedText"></param>
        /// <param name="displayText"></param>
        /// <param name="examplesCount"></param>
        /// <param name="frequencyCount"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="normalizedText"/> or <paramref name="displayText"/> is null. </exception>
        internal BackTranslation(string normalizedText, string displayText, int examplesCount, int frequencyCount)
        {
            Argument.AssertNotNull(normalizedText, nameof(normalizedText));
            Argument.AssertNotNull(displayText, nameof(displayText));

            NormalizedText = normalizedText;
            DisplayText = displayText;
            ExamplesCount = examplesCount;
            FrequencyCount = frequencyCount;
        }

        /// <summary> Initializes a new instance of <see cref="BackTranslation"/>. </summary>
        /// <param name="normalizedText"></param>
        /// <param name="displayText"></param>
        /// <param name="examplesCount"></param>
        /// <param name="frequencyCount"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BackTranslation(string normalizedText, string displayText, int examplesCount, int frequencyCount, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            NormalizedText = normalizedText;
            DisplayText = displayText;
            ExamplesCount = examplesCount;
            FrequencyCount = frequencyCount;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BackTranslation"/> for deserialization. </summary>
        internal BackTranslation()
        {
        }

        /// <summary> Gets the normalized text. </summary>
        public string NormalizedText { get; }
        /// <summary> Gets the display text. </summary>
        public string DisplayText { get; }
        /// <summary> Gets the examples count. </summary>
        public int ExamplesCount { get; }
        /// <summary> Gets the frequency count. </summary>
        public int FrequencyCount { get; }
    }
}
