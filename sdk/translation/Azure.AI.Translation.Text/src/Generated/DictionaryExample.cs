// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Translation.Text
{
    /// <summary> The DictionaryExample. </summary>
    public partial class DictionaryExample
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DictionaryExample"/>. </summary>
        /// <param name="sourcePrefix"></param>
        /// <param name="sourceTerm"></param>
        /// <param name="sourceSuffix"></param>
        /// <param name="targetPrefix"></param>
        /// <param name="targetTerm"></param>
        /// <param name="targetSuffix"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="sourcePrefix"/>, <paramref name="sourceTerm"/>, <paramref name="sourceSuffix"/>, <paramref name="targetPrefix"/>, <paramref name="targetTerm"/> or <paramref name="targetSuffix"/> is null. </exception>
        internal DictionaryExample(string sourcePrefix, string sourceTerm, string sourceSuffix, string targetPrefix, string targetTerm, string targetSuffix)
        {
            Argument.AssertNotNull(sourcePrefix, nameof(sourcePrefix));
            Argument.AssertNotNull(sourceTerm, nameof(sourceTerm));
            Argument.AssertNotNull(sourceSuffix, nameof(sourceSuffix));
            Argument.AssertNotNull(targetPrefix, nameof(targetPrefix));
            Argument.AssertNotNull(targetTerm, nameof(targetTerm));
            Argument.AssertNotNull(targetSuffix, nameof(targetSuffix));

            SourcePrefix = sourcePrefix;
            SourceTerm = sourceTerm;
            SourceSuffix = sourceSuffix;
            TargetPrefix = targetPrefix;
            TargetTerm = targetTerm;
            TargetSuffix = targetSuffix;
        }

        /// <summary> Initializes a new instance of <see cref="DictionaryExample"/>. </summary>
        /// <param name="sourcePrefix"></param>
        /// <param name="sourceTerm"></param>
        /// <param name="sourceSuffix"></param>
        /// <param name="targetPrefix"></param>
        /// <param name="targetTerm"></param>
        /// <param name="targetSuffix"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DictionaryExample(string sourcePrefix, string sourceTerm, string sourceSuffix, string targetPrefix, string targetTerm, string targetSuffix, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SourcePrefix = sourcePrefix;
            SourceTerm = sourceTerm;
            SourceSuffix = sourceSuffix;
            TargetPrefix = targetPrefix;
            TargetTerm = targetTerm;
            TargetSuffix = targetSuffix;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DictionaryExample"/> for deserialization. </summary>
        internal DictionaryExample()
        {
        }

        /// <summary> Gets the source prefix. </summary>
        public string SourcePrefix { get; }
        /// <summary> Gets the source term. </summary>
        public string SourceTerm { get; }
        /// <summary> Gets the source suffix. </summary>
        public string SourceSuffix { get; }
        /// <summary> Gets the target prefix. </summary>
        public string TargetPrefix { get; }
        /// <summary> Gets the target term. </summary>
        public string TargetTerm { get; }
        /// <summary> Gets the target suffix. </summary>
        public string TargetSuffix { get; }
    }
}
