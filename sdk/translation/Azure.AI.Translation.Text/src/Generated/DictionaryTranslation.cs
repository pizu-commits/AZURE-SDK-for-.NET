// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Translation.Text
{
    /// <summary> The DictionaryTranslation. </summary>
    public partial class DictionaryTranslation
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DictionaryTranslation"/>. </summary>
        /// <param name="normalizedTarget"></param>
        /// <param name="displayTarget"></param>
        /// <param name="posTag"></param>
        /// <param name="confidence"></param>
        /// <param name="prefixWord"></param>
        /// <param name="backTranslations"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="normalizedTarget"/>, <paramref name="displayTarget"/>, <paramref name="posTag"/>, <paramref name="prefixWord"/> or <paramref name="backTranslations"/> is null. </exception>
        internal DictionaryTranslation(string normalizedTarget, string displayTarget, string posTag, float confidence, string prefixWord, IEnumerable<BackTranslation> backTranslations)
        {
            Argument.AssertNotNull(normalizedTarget, nameof(normalizedTarget));
            Argument.AssertNotNull(displayTarget, nameof(displayTarget));
            Argument.AssertNotNull(posTag, nameof(posTag));
            Argument.AssertNotNull(prefixWord, nameof(prefixWord));
            Argument.AssertNotNull(backTranslations, nameof(backTranslations));

            NormalizedTarget = normalizedTarget;
            DisplayTarget = displayTarget;
            PosTag = posTag;
            Confidence = confidence;
            PrefixWord = prefixWord;
            BackTranslations = backTranslations.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="DictionaryTranslation"/>. </summary>
        /// <param name="normalizedTarget"></param>
        /// <param name="displayTarget"></param>
        /// <param name="posTag"></param>
        /// <param name="confidence"></param>
        /// <param name="prefixWord"></param>
        /// <param name="backTranslations"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DictionaryTranslation(string normalizedTarget, string displayTarget, string posTag, float confidence, string prefixWord, IReadOnlyList<BackTranslation> backTranslations, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            NormalizedTarget = normalizedTarget;
            DisplayTarget = displayTarget;
            PosTag = posTag;
            Confidence = confidence;
            PrefixWord = prefixWord;
            BackTranslations = backTranslations;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DictionaryTranslation"/> for deserialization. </summary>
        internal DictionaryTranslation()
        {
        }

        /// <summary> Gets the normalized target. </summary>
        public string NormalizedTarget { get; }
        /// <summary> Gets the display target. </summary>
        public string DisplayTarget { get; }
        /// <summary> Gets the pos tag. </summary>
        public string PosTag { get; }
        /// <summary> Gets the confidence. </summary>
        public float Confidence { get; }
        /// <summary> Gets the prefix word. </summary>
        public string PrefixWord { get; }
        /// <summary> Gets the back translations. </summary>
        public IReadOnlyList<BackTranslation> BackTranslations { get; }
    }
}
