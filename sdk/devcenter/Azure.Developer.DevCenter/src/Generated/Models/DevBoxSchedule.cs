// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.DevCenter.Models
{
    /// <summary> The DevBoxSchedule. </summary>
    public partial class DevBoxSchedule
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DevBoxSchedule"/>. </summary>
        /// <param name="scheduleType"></param>
        /// <param name="scheduleFrequency"></param>
        /// <param name="time"></param>
        /// <param name="timeZone"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="time"/> or <paramref name="timeZone"/> is null. </exception>
        internal DevBoxSchedule(ScheduleType scheduleType, ScheduleFrequency scheduleFrequency, string time, string timeZone)
        {
            Argument.AssertNotNull(time, nameof(time));
            Argument.AssertNotNull(timeZone, nameof(timeZone));

            ScheduleType = scheduleType;
            ScheduleFrequency = scheduleFrequency;
            Time = time;
            TimeZone = timeZone;
        }

        /// <summary> Initializes a new instance of <see cref="DevBoxSchedule"/>. </summary>
        /// <param name="name"></param>
        /// <param name="scheduleType"></param>
        /// <param name="scheduleFrequency"></param>
        /// <param name="time"></param>
        /// <param name="timeZone"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DevBoxSchedule(string name, ScheduleType scheduleType, ScheduleFrequency scheduleFrequency, string time, string timeZone, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            ScheduleType = scheduleType;
            ScheduleFrequency = scheduleFrequency;
            Time = time;
            TimeZone = timeZone;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DevBoxSchedule"/> for deserialization. </summary>
        internal DevBoxSchedule()
        {
        }

        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets the schedule type. </summary>
        public ScheduleType ScheduleType { get; }
        /// <summary> Gets the schedule frequency. </summary>
        public ScheduleFrequency ScheduleFrequency { get; }
        /// <summary> Gets the time. </summary>
        public string Time { get; }
        /// <summary> Gets the time zone. </summary>
        public string TimeZone { get; }
    }
}
