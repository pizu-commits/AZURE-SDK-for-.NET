// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Developer.DevCenter.Models
{
    /// <summary> The DevBox. </summary>
    public partial class DevBox
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DevBox"/>. </summary>
        /// <param name="name"></param>
        /// <param name="projectName"></param>
        /// <param name="poolName"></param>
        /// <param name="hibernateSupport"></param>
        /// <param name="provisioningState"></param>
        /// <param name="actionState"></param>
        /// <param name="powerState"></param>
        /// <param name="uniqueId"></param>
        /// <param name="error"></param>
        /// <param name="location"></param>
        /// <param name="osType"></param>
        /// <param name="userId"></param>
        /// <param name="hardwareProfile"></param>
        /// <param name="storageProfile"></param>
        /// <param name="imageReference"></param>
        /// <param name="createdTime"></param>
        /// <param name="localAdministratorStatus"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DevBox(string name, string projectName, string poolName, HibernateSupport? hibernateSupport, DevBoxProvisioningState? provisioningState, string actionState, PowerState? powerState, Guid? uniqueId, ResponseError error, AzureLocation? location, DevBoxOSType? osType, Guid? userId, DevBoxHardwareProfile hardwareProfile, DevBoxStorageProfile storageProfile, DevBoxImageReference imageReference, DateTimeOffset? createdTime, LocalAdministratorStatus? localAdministratorStatus, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            ProjectName = projectName;
            PoolName = poolName;
            HibernateSupport = hibernateSupport;
            ProvisioningState = provisioningState;
            ActionState = actionState;
            PowerState = powerState;
            UniqueId = uniqueId;
            Error = error;
            Location = location;
            OSType = osType;
            UserId = userId;
            HardwareProfile = hardwareProfile;
            StorageProfile = storageProfile;
            ImageReference = imageReference;
            CreatedTime = createdTime;
            LocalAdministratorStatus = localAdministratorStatus;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DevBox"/> for deserialization. </summary>
        internal DevBox()
        {
        }

        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets the project name. </summary>
        public string ProjectName { get; }
        /// <summary> Gets or sets the pool name. </summary>
        public string PoolName { get; set; }
        /// <summary> Gets the hibernate support. </summary>
        public HibernateSupport? HibernateSupport { get; }
        /// <summary> Gets the provisioning state. </summary>
        public DevBoxProvisioningState? ProvisioningState { get; }
        /// <summary> Gets the action state. </summary>
        public string ActionState { get; }
        /// <summary> Gets the power state. </summary>
        public PowerState? PowerState { get; }
        /// <summary> Gets the unique id. </summary>
        public Guid? UniqueId { get; }
        /// <summary> Gets the error. </summary>
        public ResponseError Error { get; }
        /// <summary> Gets the location. </summary>
        public AzureLocation? Location { get; }
        /// <summary> Gets the os type. </summary>
        public DevBoxOSType? OSType { get; }
        /// <summary> Gets the user id. </summary>
        public Guid? UserId { get; }
        /// <summary> Gets the hardware profile. </summary>
        public DevBoxHardwareProfile HardwareProfile { get; }
        /// <summary> Gets the storage profile. </summary>
        public DevBoxStorageProfile StorageProfile { get; }
        /// <summary> Gets the image reference. </summary>
        public DevBoxImageReference ImageReference { get; }
        /// <summary> Gets the created time. </summary>
        public DateTimeOffset? CreatedTime { get; }
        /// <summary> Gets or sets the local administrator status. </summary>
        public LocalAdministratorStatus? LocalAdministratorStatus { get; set; }
    }
}
