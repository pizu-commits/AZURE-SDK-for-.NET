// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.DevCenter.Models
{
    /// <summary> The DevBoxAction. </summary>
    public partial class DevBoxAction
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DevBoxAction"/>. </summary>
        /// <param name="actionType"></param>
        /// <param name="sourceId"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceId"/> is null. </exception>
        internal DevBoxAction(DevBoxActionType actionType, string sourceId)
        {
            Argument.AssertNotNull(sourceId, nameof(sourceId));

            ActionType = actionType;
            SourceId = sourceId;
        }

        /// <summary> Initializes a new instance of <see cref="DevBoxAction"/>. </summary>
        /// <param name="name"></param>
        /// <param name="actionType"></param>
        /// <param name="sourceId"></param>
        /// <param name="suspendedUntil"></param>
        /// <param name="nextAction"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DevBoxAction(string name, DevBoxActionType actionType, string sourceId, DateTimeOffset? suspendedUntil, DevBoxNextAction nextAction, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            ActionType = actionType;
            SourceId = sourceId;
            SuspendedUntil = suspendedUntil;
            NextAction = nextAction;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DevBoxAction"/> for deserialization. </summary>
        internal DevBoxAction()
        {
        }

        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets the action type. </summary>
        public DevBoxActionType ActionType { get; }
        /// <summary> Gets the source id. </summary>
        public string SourceId { get; }
        /// <summary> Gets the suspended until. </summary>
        public DateTimeOffset? SuspendedUntil { get; }
        /// <summary> Gets the next action. </summary>
        public DevBoxNextAction NextAction { get; }
    }
}
