// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Developer.DevCenter.Models
{
    /// <summary> The DevBoxPool. </summary>
    public partial class DevBoxPool
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DevBoxPool"/>. </summary>
        /// <param name="location"></param>
        /// <param name="healthStatus"></param>
        internal DevBoxPool(AzureLocation location, PoolHealthStatus healthStatus)
        {
            Location = location;
            HealthStatus = healthStatus;
        }

        /// <summary> Initializes a new instance of <see cref="DevBoxPool"/>. </summary>
        /// <param name="name"></param>
        /// <param name="location"></param>
        /// <param name="osType"></param>
        /// <param name="hardwareProfile"></param>
        /// <param name="hibernateSupport"></param>
        /// <param name="storageProfile"></param>
        /// <param name="imageReference"></param>
        /// <param name="localAdministratorStatus"></param>
        /// <param name="stopOnDisconnect"></param>
        /// <param name="healthStatus"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DevBoxPool(string name, AzureLocation location, DevBoxOSType? osType, DevBoxHardwareProfile hardwareProfile, HibernateSupport? hibernateSupport, DevBoxStorageProfile storageProfile, DevBoxImageReference imageReference, LocalAdministratorStatus? localAdministratorStatus, StopOnDisconnectConfiguration stopOnDisconnect, PoolHealthStatus healthStatus, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Location = location;
            OSType = osType;
            HardwareProfile = hardwareProfile;
            HibernateSupport = hibernateSupport;
            StorageProfile = storageProfile;
            ImageReference = imageReference;
            LocalAdministratorStatus = localAdministratorStatus;
            StopOnDisconnect = stopOnDisconnect;
            HealthStatus = healthStatus;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DevBoxPool"/> for deserialization. </summary>
        internal DevBoxPool()
        {
        }

        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets the location. </summary>
        public AzureLocation Location { get; }
        /// <summary> Gets the os type. </summary>
        public DevBoxOSType? OSType { get; }
        /// <summary> Gets the hardware profile. </summary>
        public DevBoxHardwareProfile HardwareProfile { get; }
        /// <summary> Gets the hibernate support. </summary>
        public HibernateSupport? HibernateSupport { get; }
        /// <summary> Gets the storage profile. </summary>
        public DevBoxStorageProfile StorageProfile { get; }
        /// <summary> Gets the image reference. </summary>
        public DevBoxImageReference ImageReference { get; }
        /// <summary> Gets the local administrator status. </summary>
        public LocalAdministratorStatus? LocalAdministratorStatus { get; }
        /// <summary> Gets the stop on disconnect. </summary>
        public StopOnDisconnectConfiguration StopOnDisconnect { get; }
        /// <summary> Gets the health status. </summary>
        public PoolHealthStatus HealthStatus { get; }
    }
}
