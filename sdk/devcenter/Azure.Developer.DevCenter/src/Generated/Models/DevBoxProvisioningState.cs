// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.DevCenter.Models
{
    /// <summary> The DevBoxProvisioningState. </summary>
    public readonly partial struct DevBoxProvisioningState : IEquatable<DevBoxProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DevBoxProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DevBoxProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string CreatingValue = "Creating";
        private const string DeletingValue = "Deleting";
        private const string UpdatingValue = "Updating";
        private const string StartingValue = "Starting";
        private const string StoppingValue = "Stopping";
        private const string ProvisioningValue = "Provisioning";
        private const string ProvisionedWithWarningValue = "ProvisionedWithWarning";
        private const string InGracePeriodValue = "InGracePeriod";
        private const string NotProvisionedValue = "NotProvisioned";

        /// <summary> Succeeded. </summary>
        public static DevBoxProvisioningState Succeeded { get; } = new DevBoxProvisioningState(SucceededValue);
        /// <summary> Failed. </summary>
        public static DevBoxProvisioningState Failed { get; } = new DevBoxProvisioningState(FailedValue);
        /// <summary> Canceled. </summary>
        public static DevBoxProvisioningState Canceled { get; } = new DevBoxProvisioningState(CanceledValue);
        /// <summary> Creating. </summary>
        public static DevBoxProvisioningState Creating { get; } = new DevBoxProvisioningState(CreatingValue);
        /// <summary> Deleting. </summary>
        public static DevBoxProvisioningState Deleting { get; } = new DevBoxProvisioningState(DeletingValue);
        /// <summary> Updating. </summary>
        public static DevBoxProvisioningState Updating { get; } = new DevBoxProvisioningState(UpdatingValue);
        /// <summary> Starting. </summary>
        public static DevBoxProvisioningState Starting { get; } = new DevBoxProvisioningState(StartingValue);
        /// <summary> Stopping. </summary>
        public static DevBoxProvisioningState Stopping { get; } = new DevBoxProvisioningState(StoppingValue);
        /// <summary> Provisioning. </summary>
        public static DevBoxProvisioningState Provisioning { get; } = new DevBoxProvisioningState(ProvisioningValue);
        /// <summary> ProvisionedWithWarning. </summary>
        public static DevBoxProvisioningState ProvisionedWithWarning { get; } = new DevBoxProvisioningState(ProvisionedWithWarningValue);
        /// <summary> InGracePeriod. </summary>
        public static DevBoxProvisioningState InGracePeriod { get; } = new DevBoxProvisioningState(InGracePeriodValue);
        /// <summary> NotProvisioned. </summary>
        public static DevBoxProvisioningState NotProvisioned { get; } = new DevBoxProvisioningState(NotProvisionedValue);
        /// <summary> Determines if two <see cref="DevBoxProvisioningState"/> values are the same. </summary>
        public static bool operator ==(DevBoxProvisioningState left, DevBoxProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DevBoxProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(DevBoxProvisioningState left, DevBoxProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DevBoxProvisioningState"/>. </summary>
        public static implicit operator DevBoxProvisioningState(string value) => new DevBoxProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DevBoxProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DevBoxProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
