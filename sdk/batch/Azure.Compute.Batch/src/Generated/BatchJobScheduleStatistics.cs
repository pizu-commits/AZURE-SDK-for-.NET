// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The BatchJobScheduleStatistics. </summary>
    public partial class BatchJobScheduleStatistics
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchJobScheduleStatistics"/>. </summary>
        /// <param name="url"></param>
        /// <param name="startTime"></param>
        /// <param name="lastUpdateTime"></param>
        /// <param name="userCpuTime"></param>
        /// <param name="kernelCpuTime"></param>
        /// <param name="wallClockTime"></param>
        /// <param name="readIOps"></param>
        /// <param name="writeIOps"></param>
        /// <param name="readIOGiB"></param>
        /// <param name="writeIOGiB"></param>
        /// <param name="numSucceededTasks"></param>
        /// <param name="numFailedTasks"></param>
        /// <param name="numTaskRetries"></param>
        /// <param name="waitTime"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/> is null. </exception>
        internal BatchJobScheduleStatistics(string url, DateTimeOffset startTime, DateTimeOffset lastUpdateTime, TimeSpan userCpuTime, TimeSpan kernelCpuTime, TimeSpan wallClockTime, long readIOps, long writeIOps, float readIOGiB, float writeIOGiB, long numSucceededTasks, long numFailedTasks, long numTaskRetries, TimeSpan waitTime)
        {
            Argument.AssertNotNull(url, nameof(url));

            Url = url;
            StartTime = startTime;
            LastUpdateTime = lastUpdateTime;
            UserCpuTime = userCpuTime;
            KernelCpuTime = kernelCpuTime;
            WallClockTime = wallClockTime;
            ReadIOps = readIOps;
            WriteIOps = writeIOps;
            ReadIOGiB = readIOGiB;
            WriteIOGiB = writeIOGiB;
            NumSucceededTasks = numSucceededTasks;
            NumFailedTasks = numFailedTasks;
            NumTaskRetries = numTaskRetries;
            WaitTime = waitTime;
        }

        /// <summary> Initializes a new instance of <see cref="BatchJobScheduleStatistics"/>. </summary>
        /// <param name="url"></param>
        /// <param name="startTime"></param>
        /// <param name="lastUpdateTime"></param>
        /// <param name="userCpuTime"></param>
        /// <param name="kernelCpuTime"></param>
        /// <param name="wallClockTime"></param>
        /// <param name="readIOps"></param>
        /// <param name="writeIOps"></param>
        /// <param name="readIOGiB"></param>
        /// <param name="writeIOGiB"></param>
        /// <param name="numSucceededTasks"></param>
        /// <param name="numFailedTasks"></param>
        /// <param name="numTaskRetries"></param>
        /// <param name="waitTime"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchJobScheduleStatistics(string url, DateTimeOffset startTime, DateTimeOffset lastUpdateTime, TimeSpan userCpuTime, TimeSpan kernelCpuTime, TimeSpan wallClockTime, long readIOps, long writeIOps, float readIOGiB, float writeIOGiB, long numSucceededTasks, long numFailedTasks, long numTaskRetries, TimeSpan waitTime, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Url = url;
            StartTime = startTime;
            LastUpdateTime = lastUpdateTime;
            UserCpuTime = userCpuTime;
            KernelCpuTime = kernelCpuTime;
            WallClockTime = wallClockTime;
            ReadIOps = readIOps;
            WriteIOps = writeIOps;
            ReadIOGiB = readIOGiB;
            WriteIOGiB = writeIOGiB;
            NumSucceededTasks = numSucceededTasks;
            NumFailedTasks = numFailedTasks;
            NumTaskRetries = numTaskRetries;
            WaitTime = waitTime;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BatchJobScheduleStatistics"/> for deserialization. </summary>
        internal BatchJobScheduleStatistics()
        {
        }

        /// <summary> Gets the url. </summary>
        public string Url { get; }
        /// <summary> Gets the start time. </summary>
        public DateTimeOffset StartTime { get; }
        /// <summary> Gets the last update time. </summary>
        public DateTimeOffset LastUpdateTime { get; }
        /// <summary> Gets the user cpu time. </summary>
        public TimeSpan UserCpuTime { get; }
        /// <summary> Gets the kernel cpu time. </summary>
        public TimeSpan KernelCpuTime { get; }
        /// <summary> Gets the wall clock time. </summary>
        public TimeSpan WallClockTime { get; }
        /// <summary> Gets the read i ops. </summary>
        public long ReadIOps { get; }
        /// <summary> Gets the write i ops. </summary>
        public long WriteIOps { get; }
        /// <summary> Gets the read io gi b. </summary>
        public float ReadIOGiB { get; }
        /// <summary> Gets the write io gi b. </summary>
        public float WriteIOGiB { get; }
        /// <summary> Gets the num succeeded tasks. </summary>
        public long NumSucceededTasks { get; }
        /// <summary> Gets the num failed tasks. </summary>
        public long NumFailedTasks { get; }
        /// <summary> Gets the num task retries. </summary>
        public long NumTaskRetries { get; }
        /// <summary> Gets the wait time. </summary>
        public TimeSpan WaitTime { get; }
    }
}
