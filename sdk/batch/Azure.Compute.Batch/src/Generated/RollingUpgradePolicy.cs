// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The RollingUpgradePolicy. </summary>
    public partial class RollingUpgradePolicy
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RollingUpgradePolicy"/>. </summary>
        public RollingUpgradePolicy()
        {
        }

        /// <summary> Initializes a new instance of <see cref="RollingUpgradePolicy"/>. </summary>
        /// <param name="enableCrossZoneUpgrade"></param>
        /// <param name="maxBatchInstancePercent"></param>
        /// <param name="maxUnhealthyInstancePercent"></param>
        /// <param name="maxUnhealthyUpgradedInstancePercent"></param>
        /// <param name="pauseTimeBetweenBatches"></param>
        /// <param name="prioritizeUnhealthyInstances"></param>
        /// <param name="rollbackFailedInstancesOnPolicyBreach"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RollingUpgradePolicy(bool? enableCrossZoneUpgrade, int? maxBatchInstancePercent, int? maxUnhealthyInstancePercent, int? maxUnhealthyUpgradedInstancePercent, TimeSpan? pauseTimeBetweenBatches, bool? prioritizeUnhealthyInstances, bool? rollbackFailedInstancesOnPolicyBreach, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            EnableCrossZoneUpgrade = enableCrossZoneUpgrade;
            MaxBatchInstancePercent = maxBatchInstancePercent;
            MaxUnhealthyInstancePercent = maxUnhealthyInstancePercent;
            MaxUnhealthyUpgradedInstancePercent = maxUnhealthyUpgradedInstancePercent;
            PauseTimeBetweenBatches = pauseTimeBetweenBatches;
            PrioritizeUnhealthyInstances = prioritizeUnhealthyInstances;
            RollbackFailedInstancesOnPolicyBreach = rollbackFailedInstancesOnPolicyBreach;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets the enable cross zone upgrade. </summary>
        public bool? EnableCrossZoneUpgrade { get; set; }
        /// <summary> Gets or sets the max batch instance percent. </summary>
        public int? MaxBatchInstancePercent { get; set; }
        /// <summary> Gets or sets the max unhealthy instance percent. </summary>
        public int? MaxUnhealthyInstancePercent { get; set; }
        /// <summary> Gets or sets the max unhealthy upgraded instance percent. </summary>
        public int? MaxUnhealthyUpgradedInstancePercent { get; set; }
        /// <summary> Gets or sets the pause time between batches. </summary>
        public TimeSpan? PauseTimeBetweenBatches { get; set; }
        /// <summary> Gets or sets the prioritize unhealthy instances. </summary>
        public bool? PrioritizeUnhealthyInstances { get; set; }
        /// <summary> Gets or sets the rollback failed instances on policy breach. </summary>
        public bool? RollbackFailedInstancesOnPolicyBreach { get; set; }
    }
}
