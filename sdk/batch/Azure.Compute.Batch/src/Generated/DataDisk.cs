// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The DataDisk. </summary>
    public partial class DataDisk
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DataDisk"/>. </summary>
        /// <param name="logicalUnitNumber"></param>
        /// <param name="diskSizeGb"></param>
        public DataDisk(int logicalUnitNumber, int diskSizeGb)
        {
            LogicalUnitNumber = logicalUnitNumber;
            DiskSizeGb = diskSizeGb;
        }

        /// <summary> Initializes a new instance of <see cref="DataDisk"/>. </summary>
        /// <param name="logicalUnitNumber"></param>
        /// <param name="caching"></param>
        /// <param name="diskSizeGb"></param>
        /// <param name="storageAccountType"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DataDisk(int logicalUnitNumber, CachingType? caching, int diskSizeGb, StorageAccountType? storageAccountType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            LogicalUnitNumber = logicalUnitNumber;
            Caching = caching;
            DiskSizeGb = diskSizeGb;
            StorageAccountType = storageAccountType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DataDisk"/> for deserialization. </summary>
        internal DataDisk()
        {
        }

        /// <summary> Gets or sets the logical unit number. </summary>
        public int LogicalUnitNumber { get; set; }
        /// <summary> Gets or sets the caching. </summary>
        public CachingType? Caching { get; set; }
        /// <summary> Gets or sets the disk size gb. </summary>
        public int DiskSizeGb { get; set; }
        /// <summary> Gets or sets the storage account type. </summary>
        public StorageAccountType? StorageAccountType { get; set; }
    }
}
