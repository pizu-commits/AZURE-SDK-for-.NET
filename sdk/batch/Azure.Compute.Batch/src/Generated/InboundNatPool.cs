// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The InboundNatPool. </summary>
    public partial class InboundNatPool
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InboundNatPool"/>. </summary>
        /// <param name="name"></param>
        /// <param name="protocol"></param>
        /// <param name="backendPort"></param>
        /// <param name="frontendPortRangeStart"></param>
        /// <param name="frontendPortRangeEnd"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public InboundNatPool(string name, InboundEndpointProtocol protocol, int backendPort, int frontendPortRangeStart, int frontendPortRangeEnd)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
            Protocol = protocol;
            BackendPort = backendPort;
            FrontendPortRangeStart = frontendPortRangeStart;
            FrontendPortRangeEnd = frontendPortRangeEnd;
            NetworkSecurityGroupRules = new ChangeTrackingList<NetworkSecurityGroupRule>();
        }

        /// <summary> Initializes a new instance of <see cref="InboundNatPool"/>. </summary>
        /// <param name="name"></param>
        /// <param name="protocol"></param>
        /// <param name="backendPort"></param>
        /// <param name="frontendPortRangeStart"></param>
        /// <param name="frontendPortRangeEnd"></param>
        /// <param name="networkSecurityGroupRules"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InboundNatPool(string name, InboundEndpointProtocol protocol, int backendPort, int frontendPortRangeStart, int frontendPortRangeEnd, IList<NetworkSecurityGroupRule> networkSecurityGroupRules, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Protocol = protocol;
            BackendPort = backendPort;
            FrontendPortRangeStart = frontendPortRangeStart;
            FrontendPortRangeEnd = frontendPortRangeEnd;
            NetworkSecurityGroupRules = networkSecurityGroupRules;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InboundNatPool"/> for deserialization. </summary>
        internal InboundNatPool()
        {
        }

        /// <summary> Gets or sets the name. </summary>
        public string Name { get; set; }
        /// <summary> Gets or sets the protocol. </summary>
        public InboundEndpointProtocol Protocol { get; set; }
        /// <summary> Gets or sets the backend port. </summary>
        public int BackendPort { get; set; }
        /// <summary> Gets or sets the frontend port range start. </summary>
        public int FrontendPortRangeStart { get; set; }
        /// <summary> Gets or sets the frontend port range end. </summary>
        public int FrontendPortRangeEnd { get; set; }
        /// <summary> Gets the network security group rules. </summary>
        public IList<NetworkSecurityGroupRule> NetworkSecurityGroupRules { get; }
    }
}
