// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The NetworkConfiguration. </summary>
    public partial class NetworkConfiguration
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NetworkConfiguration"/>. </summary>
        public NetworkConfiguration()
        {
        }

        /// <summary> Initializes a new instance of <see cref="NetworkConfiguration"/>. </summary>
        /// <param name="subnetId"></param>
        /// <param name="dynamicVNetAssignmentScope"></param>
        /// <param name="endpointConfiguration"></param>
        /// <param name="publicIpAddressConfiguration"></param>
        /// <param name="enableAcceleratedNetworking"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NetworkConfiguration(string subnetId, DynamicVNetAssignmentScope? dynamicVNetAssignmentScope, BatchPoolEndpointConfiguration endpointConfiguration, PublicIpAddressConfiguration publicIpAddressConfiguration, bool? enableAcceleratedNetworking, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SubnetId = subnetId;
            DynamicVNetAssignmentScope = dynamicVNetAssignmentScope;
            EndpointConfiguration = endpointConfiguration;
            PublicIpAddressConfiguration = publicIpAddressConfiguration;
            EnableAcceleratedNetworking = enableAcceleratedNetworking;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets the subnet id. </summary>
        public string SubnetId { get; set; }
        /// <summary> Gets or sets the dynamic v net assignment scope. </summary>
        public DynamicVNetAssignmentScope? DynamicVNetAssignmentScope { get; set; }
        /// <summary> Gets or sets the endpoint configuration. </summary>
        public BatchPoolEndpointConfiguration EndpointConfiguration { get; set; }
        /// <summary> Gets or sets the public ip address configuration. </summary>
        public PublicIpAddressConfiguration PublicIpAddressConfiguration { get; set; }
        /// <summary> Gets or sets the enable accelerated networking. </summary>
        public bool? EnableAcceleratedNetworking { get; set; }
    }
}
