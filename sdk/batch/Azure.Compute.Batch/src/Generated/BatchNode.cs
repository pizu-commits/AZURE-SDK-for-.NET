// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The BatchNode. </summary>
    public partial class BatchNode
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchNode"/>. </summary>
        internal BatchNode()
        {
            RecentTasks = new ChangeTrackingList<BatchTaskInfo>();
            Errors = new ChangeTrackingList<BatchNodeError>();
        }

        /// <summary> Initializes a new instance of <see cref="BatchNode"/>. </summary>
        /// <param name="id"></param>
        /// <param name="url"></param>
        /// <param name="state"></param>
        /// <param name="schedulingState"></param>
        /// <param name="stateTransitionTime"></param>
        /// <param name="lastBootTime"></param>
        /// <param name="allocationTime"></param>
        /// <param name="ipAddress"></param>
        /// <param name="affinityId"></param>
        /// <param name="vmSize"></param>
        /// <param name="totalTasksRun"></param>
        /// <param name="runningTasksCount"></param>
        /// <param name="runningTaskSlotsCount"></param>
        /// <param name="totalTasksSucceeded"></param>
        /// <param name="recentTasks"></param>
        /// <param name="startTask"></param>
        /// <param name="startTaskInfo"></param>
        /// <param name="errors"></param>
        /// <param name="isDedicated"></param>
        /// <param name="endpointConfiguration"></param>
        /// <param name="nodeAgentInfo"></param>
        /// <param name="virtualMachineInfo"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchNode(string id, string url, BatchNodeState? state, SchedulingState? schedulingState, DateTimeOffset? stateTransitionTime, DateTimeOffset? lastBootTime, DateTimeOffset? allocationTime, string ipAddress, string affinityId, string vmSize, int? totalTasksRun, int? runningTasksCount, int? runningTaskSlotsCount, int? totalTasksSucceeded, IReadOnlyList<BatchTaskInfo> recentTasks, BatchStartTask startTask, BatchStartTaskInfo startTaskInfo, IReadOnlyList<BatchNodeError> errors, bool? isDedicated, BatchNodeEndpointConfiguration endpointConfiguration, BatchNodeAgentInfo nodeAgentInfo, VirtualMachineInfo virtualMachineInfo, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Url = url;
            State = state;
            SchedulingState = schedulingState;
            StateTransitionTime = stateTransitionTime;
            LastBootTime = lastBootTime;
            AllocationTime = allocationTime;
            IpAddress = ipAddress;
            AffinityId = affinityId;
            VmSize = vmSize;
            TotalTasksRun = totalTasksRun;
            RunningTasksCount = runningTasksCount;
            RunningTaskSlotsCount = runningTaskSlotsCount;
            TotalTasksSucceeded = totalTasksSucceeded;
            RecentTasks = recentTasks;
            StartTask = startTask;
            StartTaskInfo = startTaskInfo;
            Errors = errors;
            IsDedicated = isDedicated;
            EndpointConfiguration = endpointConfiguration;
            NodeAgentInfo = nodeAgentInfo;
            VirtualMachineInfo = virtualMachineInfo;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the id. </summary>
        public string Id { get; }
        /// <summary> Gets the url. </summary>
        public string Url { get; }
        /// <summary> Gets the state. </summary>
        public BatchNodeState? State { get; }
        /// <summary> Gets the scheduling state. </summary>
        public SchedulingState? SchedulingState { get; }
        /// <summary> Gets the state transition time. </summary>
        public DateTimeOffset? StateTransitionTime { get; }
        /// <summary> Gets the last boot time. </summary>
        public DateTimeOffset? LastBootTime { get; }
        /// <summary> Gets the allocation time. </summary>
        public DateTimeOffset? AllocationTime { get; }
        /// <summary> Gets the ip address. </summary>
        public string IpAddress { get; }
        /// <summary> Gets the affinity id. </summary>
        public string AffinityId { get; }
        /// <summary> Gets the vm size. </summary>
        public string VmSize { get; }
        /// <summary> Gets the total tasks run. </summary>
        public int? TotalTasksRun { get; }
        /// <summary> Gets the running tasks count. </summary>
        public int? RunningTasksCount { get; }
        /// <summary> Gets the running task slots count. </summary>
        public int? RunningTaskSlotsCount { get; }
        /// <summary> Gets the total tasks succeeded. </summary>
        public int? TotalTasksSucceeded { get; }
        /// <summary> Gets the recent tasks. </summary>
        public IReadOnlyList<BatchTaskInfo> RecentTasks { get; }
        /// <summary> Gets the start task. </summary>
        public BatchStartTask StartTask { get; }
        /// <summary> Gets the start task info. </summary>
        public BatchStartTaskInfo StartTaskInfo { get; }
        /// <summary> Gets the errors. </summary>
        public IReadOnlyList<BatchNodeError> Errors { get; }
        /// <summary> Gets the is dedicated. </summary>
        public bool? IsDedicated { get; }
        /// <summary> Gets the endpoint configuration. </summary>
        public BatchNodeEndpointConfiguration EndpointConfiguration { get; }
        /// <summary> Gets the node agent info. </summary>
        public BatchNodeAgentInfo NodeAgentInfo { get; }
        /// <summary> Gets the virtual machine info. </summary>
        public VirtualMachineInfo VirtualMachineInfo { get; }
    }
}
