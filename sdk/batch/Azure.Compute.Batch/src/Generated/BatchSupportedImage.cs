// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The BatchSupportedImage. </summary>
    public partial class BatchSupportedImage
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchSupportedImage"/>. </summary>
        /// <param name="nodeAgentSkuId"></param>
        /// <param name="imageReference"></param>
        /// <param name="osType"></param>
        /// <param name="verificationType"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="nodeAgentSkuId"/> or <paramref name="imageReference"/> is null. </exception>
        internal BatchSupportedImage(string nodeAgentSkuId, ImageReference imageReference, OSType osType, ImageVerificationType verificationType)
        {
            Argument.AssertNotNull(nodeAgentSkuId, nameof(nodeAgentSkuId));
            Argument.AssertNotNull(imageReference, nameof(imageReference));

            NodeAgentSkuId = nodeAgentSkuId;
            ImageReference = imageReference;
            OsType = osType;
            Capabilities = new ChangeTrackingList<string>();
            VerificationType = verificationType;
        }

        /// <summary> Initializes a new instance of <see cref="BatchSupportedImage"/>. </summary>
        /// <param name="nodeAgentSkuId"></param>
        /// <param name="imageReference"></param>
        /// <param name="osType"></param>
        /// <param name="capabilities"></param>
        /// <param name="batchSupportEndOfLife"></param>
        /// <param name="verificationType"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchSupportedImage(string nodeAgentSkuId, ImageReference imageReference, OSType osType, IReadOnlyList<string> capabilities, DateTimeOffset? batchSupportEndOfLife, ImageVerificationType verificationType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            NodeAgentSkuId = nodeAgentSkuId;
            ImageReference = imageReference;
            OsType = osType;
            Capabilities = capabilities;
            BatchSupportEndOfLife = batchSupportEndOfLife;
            VerificationType = verificationType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BatchSupportedImage"/> for deserialization. </summary>
        internal BatchSupportedImage()
        {
        }

        /// <summary> Gets the node agent sku id. </summary>
        public string NodeAgentSkuId { get; }
        /// <summary> Gets the image reference. </summary>
        public ImageReference ImageReference { get; }
        /// <summary> Gets the os type. </summary>
        public OSType OsType { get; }
        /// <summary> Gets the capabilities. </summary>
        public IReadOnlyList<string> Capabilities { get; }
        /// <summary> Gets the batch support end of life. </summary>
        public DateTimeOffset? BatchSupportEndOfLife { get; }
        /// <summary> Gets the verification type. </summary>
        public ImageVerificationType VerificationType { get; }
    }
}
