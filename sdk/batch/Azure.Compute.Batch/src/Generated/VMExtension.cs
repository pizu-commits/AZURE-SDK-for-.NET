// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The VMExtension. </summary>
    public partial class VMExtension
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VMExtension"/>. </summary>
        /// <param name="name"></param>
        /// <param name="publisher"></param>
        /// <param name="type"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="publisher"/> or <paramref name="type"/> is null. </exception>
        public VMExtension(string name, string publisher, string type)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(publisher, nameof(publisher));
            Argument.AssertNotNull(type, nameof(type));

            Name = name;
            Publisher = publisher;
            Type = type;
            Settings = new ChangeTrackingDictionary<string, string>();
            ProtectedSettings = new ChangeTrackingDictionary<string, string>();
            ProvisionAfterExtensions = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="VMExtension"/>. </summary>
        /// <param name="name"></param>
        /// <param name="publisher"></param>
        /// <param name="type"></param>
        /// <param name="typeHandlerVersion"></param>
        /// <param name="autoUpgradeMinorVersion"></param>
        /// <param name="enableAutomaticUpgrade"></param>
        /// <param name="settings"></param>
        /// <param name="protectedSettings"></param>
        /// <param name="provisionAfterExtensions"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VMExtension(string name, string publisher, string type, string typeHandlerVersion, bool? autoUpgradeMinorVersion, bool? enableAutomaticUpgrade, IDictionary<string, string> settings, IDictionary<string, string> protectedSettings, IList<string> provisionAfterExtensions, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Publisher = publisher;
            Type = type;
            TypeHandlerVersion = typeHandlerVersion;
            AutoUpgradeMinorVersion = autoUpgradeMinorVersion;
            EnableAutomaticUpgrade = enableAutomaticUpgrade;
            Settings = settings;
            ProtectedSettings = protectedSettings;
            ProvisionAfterExtensions = provisionAfterExtensions;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="VMExtension"/> for deserialization. </summary>
        internal VMExtension()
        {
        }

        /// <summary> Gets or sets the name. </summary>
        public string Name { get; set; }
        /// <summary> Gets or sets the publisher. </summary>
        public string Publisher { get; set; }
        /// <summary> Gets or sets the type. </summary>
        public string Type { get; set; }
        /// <summary> Gets or sets the type handler version. </summary>
        public string TypeHandlerVersion { get; set; }
        /// <summary> Gets or sets the auto upgrade minor version. </summary>
        public bool? AutoUpgradeMinorVersion { get; set; }
        /// <summary> Gets or sets the enable automatic upgrade. </summary>
        public bool? EnableAutomaticUpgrade { get; set; }
        /// <summary> Gets the settings. </summary>
        public IDictionary<string, string> Settings { get; }
        /// <summary> Gets the protected settings. </summary>
        public IDictionary<string, string> ProtectedSettings { get; }
        /// <summary> Gets the provision after extensions. </summary>
        public IList<string> ProvisionAfterExtensions { get; }
    }
}
