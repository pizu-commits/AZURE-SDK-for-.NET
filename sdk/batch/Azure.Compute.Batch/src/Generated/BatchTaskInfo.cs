// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The BatchTaskInfo. </summary>
    public partial class BatchTaskInfo
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchTaskInfo"/>. </summary>
        /// <param name="taskState"></param>
        internal BatchTaskInfo(BatchTaskState taskState)
        {
            TaskState = taskState;
        }

        /// <summary> Initializes a new instance of <see cref="BatchTaskInfo"/>. </summary>
        /// <param name="taskUrl"></param>
        /// <param name="jobId"></param>
        /// <param name="taskId"></param>
        /// <param name="subtaskId"></param>
        /// <param name="taskState"></param>
        /// <param name="executionInfo"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchTaskInfo(string taskUrl, string jobId, string taskId, int? subtaskId, BatchTaskState taskState, BatchTaskExecutionInfo executionInfo, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TaskUrl = taskUrl;
            JobId = jobId;
            TaskId = taskId;
            SubtaskId = subtaskId;
            TaskState = taskState;
            ExecutionInfo = executionInfo;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BatchTaskInfo"/> for deserialization. </summary>
        internal BatchTaskInfo()
        {
        }

        /// <summary> Gets the task url. </summary>
        public string TaskUrl { get; }
        /// <summary> Gets the job id. </summary>
        public string JobId { get; }
        /// <summary> Gets the task id. </summary>
        public string TaskId { get; }
        /// <summary> Gets the subtask id. </summary>
        public int? SubtaskId { get; }
        /// <summary> Gets the task state. </summary>
        public BatchTaskState TaskState { get; }
        /// <summary> Gets the execution info. </summary>
        public BatchTaskExecutionInfo ExecutionInfo { get; }
    }
}
