// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The OutputFileBlobContainerDestination. </summary>
    public partial class OutputFileBlobContainerDestination
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="OutputFileBlobContainerDestination"/>. </summary>
        /// <param name="containerUrl"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="containerUrl"/> is null. </exception>
        public OutputFileBlobContainerDestination(string containerUrl)
        {
            Argument.AssertNotNull(containerUrl, nameof(containerUrl));

            ContainerUrl = containerUrl;
            UploadHeaders = new ChangeTrackingList<HttpHeader>();
        }

        /// <summary> Initializes a new instance of <see cref="OutputFileBlobContainerDestination"/>. </summary>
        /// <param name="path"></param>
        /// <param name="containerUrl"></param>
        /// <param name="identityReference"></param>
        /// <param name="uploadHeaders"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal OutputFileBlobContainerDestination(string path, string containerUrl, BatchNodeIdentityReference identityReference, IList<HttpHeader> uploadHeaders, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Path = path;
            ContainerUrl = containerUrl;
            IdentityReference = identityReference;
            UploadHeaders = uploadHeaders;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="OutputFileBlobContainerDestination"/> for deserialization. </summary>
        internal OutputFileBlobContainerDestination()
        {
        }

        /// <summary> Gets or sets the path. </summary>
        public string Path { get; set; }
        /// <summary> Gets or sets the container url. </summary>
        public string ContainerUrl { get; set; }
        /// <summary> Gets or sets the identity reference. </summary>
        public BatchNodeIdentityReference IdentityReference { get; set; }
        /// <summary> Gets the upload headers. </summary>
        public IList<HttpHeader> UploadHeaders { get; }
    }
}
