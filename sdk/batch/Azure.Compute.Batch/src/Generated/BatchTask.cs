// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The BatchTask. </summary>
    public partial class BatchTask
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchTask"/>. </summary>
        public BatchTask()
        {
            ResourceFiles = new ChangeTrackingList<ResourceFile>();
            OutputFiles = new ChangeTrackingList<OutputFile>();
            EnvironmentSettings = new ChangeTrackingList<EnvironmentSetting>();
            ApplicationPackageReferences = new ChangeTrackingList<BatchApplicationPackageReference>();
        }

        /// <summary> Initializes a new instance of <see cref="BatchTask"/>. </summary>
        /// <param name="id"></param>
        /// <param name="displayName"></param>
        /// <param name="url"></param>
        /// <param name="eTag"></param>
        /// <param name="lastModified"></param>
        /// <param name="creationTime"></param>
        /// <param name="exitConditions"></param>
        /// <param name="state"></param>
        /// <param name="stateTransitionTime"></param>
        /// <param name="previousState"></param>
        /// <param name="previousStateTransitionTime"></param>
        /// <param name="commandLine"></param>
        /// <param name="containerSettings"></param>
        /// <param name="resourceFiles"></param>
        /// <param name="outputFiles"></param>
        /// <param name="environmentSettings"></param>
        /// <param name="affinityInfo"></param>
        /// <param name="constraints"></param>
        /// <param name="requiredSlots"></param>
        /// <param name="userIdentity"></param>
        /// <param name="executionInfo"></param>
        /// <param name="nodeInfo"></param>
        /// <param name="multiInstanceSettings"></param>
        /// <param name="stats"></param>
        /// <param name="dependsOn"></param>
        /// <param name="applicationPackageReferences"></param>
        /// <param name="authenticationTokenSettings"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchTask(string id, string displayName, string url, string eTag, DateTimeOffset? lastModified, DateTimeOffset? creationTime, ExitConditions exitConditions, BatchTaskState? state, DateTimeOffset? stateTransitionTime, BatchTaskState? previousState, DateTimeOffset? previousStateTransitionTime, string commandLine, BatchTaskContainerSettings containerSettings, IReadOnlyList<ResourceFile> resourceFiles, IReadOnlyList<OutputFile> outputFiles, IReadOnlyList<EnvironmentSetting> environmentSettings, AffinityInfo affinityInfo, BatchTaskConstraints constraints, int? requiredSlots, UserIdentity userIdentity, BatchTaskExecutionInfo executionInfo, BatchNodeInfo nodeInfo, MultiInstanceSettings multiInstanceSettings, BatchTaskStatistics stats, BatchTaskDependencies dependsOn, IReadOnlyList<BatchApplicationPackageReference> applicationPackageReferences, AuthenticationTokenSettings authenticationTokenSettings, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            DisplayName = displayName;
            Url = url;
            ETag = eTag;
            LastModified = lastModified;
            CreationTime = creationTime;
            ExitConditions = exitConditions;
            State = state;
            StateTransitionTime = stateTransitionTime;
            PreviousState = previousState;
            PreviousStateTransitionTime = previousStateTransitionTime;
            CommandLine = commandLine;
            ContainerSettings = containerSettings;
            ResourceFiles = resourceFiles;
            OutputFiles = outputFiles;
            EnvironmentSettings = environmentSettings;
            AffinityInfo = affinityInfo;
            Constraints = constraints;
            RequiredSlots = requiredSlots;
            UserIdentity = userIdentity;
            ExecutionInfo = executionInfo;
            NodeInfo = nodeInfo;
            MultiInstanceSettings = multiInstanceSettings;
            Stats = stats;
            DependsOn = dependsOn;
            ApplicationPackageReferences = applicationPackageReferences;
            AuthenticationTokenSettings = authenticationTokenSettings;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the id. </summary>
        public string Id { get; }
        /// <summary> Gets the display name. </summary>
        public string DisplayName { get; }
        /// <summary> Gets the url. </summary>
        public string Url { get; }
        /// <summary> Gets the e tag. </summary>
        public string ETag { get; }
        /// <summary> Gets the last modified. </summary>
        public DateTimeOffset? LastModified { get; }
        /// <summary> Gets the creation time. </summary>
        public DateTimeOffset? CreationTime { get; }
        /// <summary> Gets the exit conditions. </summary>
        public ExitConditions ExitConditions { get; }
        /// <summary> Gets the state. </summary>
        public BatchTaskState? State { get; }
        /// <summary> Gets the state transition time. </summary>
        public DateTimeOffset? StateTransitionTime { get; }
        /// <summary> Gets the previous state. </summary>
        public BatchTaskState? PreviousState { get; }
        /// <summary> Gets the previous state transition time. </summary>
        public DateTimeOffset? PreviousStateTransitionTime { get; }
        /// <summary> Gets the command line. </summary>
        public string CommandLine { get; }
        /// <summary> Gets the container settings. </summary>
        public BatchTaskContainerSettings ContainerSettings { get; }
        /// <summary> Gets the resource files. </summary>
        public IReadOnlyList<ResourceFile> ResourceFiles { get; }
        /// <summary> Gets the output files. </summary>
        public IReadOnlyList<OutputFile> OutputFiles { get; }
        /// <summary> Gets the environment settings. </summary>
        public IReadOnlyList<EnvironmentSetting> EnvironmentSettings { get; }
        /// <summary> Gets the affinity info. </summary>
        public AffinityInfo AffinityInfo { get; }
        /// <summary> Gets or sets the constraints. </summary>
        public BatchTaskConstraints Constraints { get; set; }
        /// <summary> Gets the required slots. </summary>
        public int? RequiredSlots { get; }
        /// <summary> Gets the user identity. </summary>
        public UserIdentity UserIdentity { get; }
        /// <summary> Gets the execution info. </summary>
        public BatchTaskExecutionInfo ExecutionInfo { get; }
        /// <summary> Gets the node info. </summary>
        public BatchNodeInfo NodeInfo { get; }
        /// <summary> Gets the multi instance settings. </summary>
        public MultiInstanceSettings MultiInstanceSettings { get; }
        /// <summary> Gets the stats. </summary>
        public BatchTaskStatistics Stats { get; }
        /// <summary> Gets the depends on. </summary>
        public BatchTaskDependencies DependsOn { get; }
        /// <summary> Gets the application package references. </summary>
        public IReadOnlyList<BatchApplicationPackageReference> ApplicationPackageReferences { get; }
        /// <summary> Gets the authentication token settings. </summary>
        public AuthenticationTokenSettings AuthenticationTokenSettings { get; }
    }
}
