// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The VirtualMachineConfiguration. </summary>
    public partial class VirtualMachineConfiguration
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VirtualMachineConfiguration"/>. </summary>
        /// <param name="imageReference"></param>
        /// <param name="nodeAgentSkuId"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="imageReference"/> or <paramref name="nodeAgentSkuId"/> is null. </exception>
        public VirtualMachineConfiguration(ImageReference imageReference, string nodeAgentSkuId)
        {
            Argument.AssertNotNull(imageReference, nameof(imageReference));
            Argument.AssertNotNull(nodeAgentSkuId, nameof(nodeAgentSkuId));

            ImageReference = imageReference;
            NodeAgentSkuId = nodeAgentSkuId;
            DataDisks = new ChangeTrackingList<DataDisk>();
            Extensions = new ChangeTrackingList<VMExtension>();
        }

        /// <summary> Initializes a new instance of <see cref="VirtualMachineConfiguration"/>. </summary>
        /// <param name="imageReference"></param>
        /// <param name="nodeAgentSkuId"></param>
        /// <param name="windowsConfiguration"></param>
        /// <param name="dataDisks"></param>
        /// <param name="licenseType"></param>
        /// <param name="containerConfiguration"></param>
        /// <param name="diskEncryptionConfiguration"></param>
        /// <param name="nodePlacementConfiguration"></param>
        /// <param name="extensions"></param>
        /// <param name="osDisk"></param>
        /// <param name="securityProfile"></param>
        /// <param name="serviceArtifactReference"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VirtualMachineConfiguration(ImageReference imageReference, string nodeAgentSkuId, WindowsConfiguration windowsConfiguration, IList<DataDisk> dataDisks, string licenseType, ContainerConfiguration containerConfiguration, DiskEncryptionConfiguration diskEncryptionConfiguration, BatchNodePlacementConfiguration nodePlacementConfiguration, IList<VMExtension> extensions, OSDisk osDisk, SecurityProfile securityProfile, ServiceArtifactReference serviceArtifactReference, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ImageReference = imageReference;
            NodeAgentSkuId = nodeAgentSkuId;
            WindowsConfiguration = windowsConfiguration;
            DataDisks = dataDisks;
            LicenseType = licenseType;
            ContainerConfiguration = containerConfiguration;
            DiskEncryptionConfiguration = diskEncryptionConfiguration;
            NodePlacementConfiguration = nodePlacementConfiguration;
            Extensions = extensions;
            OsDisk = osDisk;
            SecurityProfile = securityProfile;
            ServiceArtifactReference = serviceArtifactReference;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="VirtualMachineConfiguration"/> for deserialization. </summary>
        internal VirtualMachineConfiguration()
        {
        }

        /// <summary> Gets or sets the image reference. </summary>
        public ImageReference ImageReference { get; set; }
        /// <summary> Gets or sets the node agent sku id. </summary>
        public string NodeAgentSkuId { get; set; }
        /// <summary> Gets or sets the windows configuration. </summary>
        public WindowsConfiguration WindowsConfiguration { get; set; }
        /// <summary> Gets the data disks. </summary>
        public IList<DataDisk> DataDisks { get; }
        /// <summary> Gets or sets the license type. </summary>
        public string LicenseType { get; set; }
        /// <summary> Gets or sets the container configuration. </summary>
        public ContainerConfiguration ContainerConfiguration { get; set; }
        /// <summary> Gets or sets the disk encryption configuration. </summary>
        public DiskEncryptionConfiguration DiskEncryptionConfiguration { get; set; }
        /// <summary> Gets or sets the node placement configuration. </summary>
        public BatchNodePlacementConfiguration NodePlacementConfiguration { get; set; }
        /// <summary> Gets the extensions. </summary>
        public IList<VMExtension> Extensions { get; }
        /// <summary> Gets or sets the os disk. </summary>
        public OSDisk OsDisk { get; set; }
        /// <summary> Gets or sets the security profile. </summary>
        public SecurityProfile SecurityProfile { get; set; }
        /// <summary> Gets or sets the service artifact reference. </summary>
        public ServiceArtifactReference ServiceArtifactReference { get; set; }
    }
}
