// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The BatchJobUpdateContent. </summary>
    public partial class BatchJobUpdateContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchJobUpdateContent"/>. </summary>
        public BatchJobUpdateContent()
        {
            Metadata = new ChangeTrackingList<MetadataItem>();
        }

        /// <summary> Initializes a new instance of <see cref="BatchJobUpdateContent"/>. </summary>
        /// <param name="priority"></param>
        /// <param name="allowTaskPreemption"></param>
        /// <param name="maxParallelTasks"></param>
        /// <param name="constraints"></param>
        /// <param name="poolInfo"></param>
        /// <param name="onAllTasksComplete"></param>
        /// <param name="metadata"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchJobUpdateContent(int? priority, bool? allowTaskPreemption, int? maxParallelTasks, BatchJobConstraints constraints, BatchPoolInfo poolInfo, OnAllBatchTasksComplete? onAllTasksComplete, IList<MetadataItem> metadata, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Priority = priority;
            AllowTaskPreemption = allowTaskPreemption;
            MaxParallelTasks = maxParallelTasks;
            Constraints = constraints;
            PoolInfo = poolInfo;
            OnAllTasksComplete = onAllTasksComplete;
            Metadata = metadata;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets the priority. </summary>
        public int? Priority { get; set; }
        /// <summary> Gets or sets the allow task preemption. </summary>
        public bool? AllowTaskPreemption { get; set; }
        /// <summary> Gets or sets the max parallel tasks. </summary>
        public int? MaxParallelTasks { get; set; }
        /// <summary> Gets or sets the constraints. </summary>
        public BatchJobConstraints Constraints { get; set; }
        /// <summary> Gets or sets the pool info. </summary>
        public BatchPoolInfo PoolInfo { get; set; }
        /// <summary> Gets or sets the on all tasks complete. </summary>
        public OnAllBatchTasksComplete? OnAllTasksComplete { get; set; }
        /// <summary> Gets the metadata. </summary>
        public IList<MetadataItem> Metadata { get; }
    }
}
