// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The BatchJob. </summary>
    public partial class BatchJob
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchJob"/>. </summary>
        /// <param name="poolInfo"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolInfo"/> is null. </exception>
        public BatchJob(BatchPoolInfo poolInfo)
        {
            Argument.AssertNotNull(poolInfo, nameof(poolInfo));

            CommonEnvironmentSettings = new ChangeTrackingList<EnvironmentSetting>();
            PoolInfo = poolInfo;
            Metadata = new ChangeTrackingList<MetadataItem>();
        }

        /// <summary> Initializes a new instance of <see cref="BatchJob"/>. </summary>
        /// <param name="id"></param>
        /// <param name="displayName"></param>
        /// <param name="usesTaskDependencies"></param>
        /// <param name="url"></param>
        /// <param name="eTag"></param>
        /// <param name="lastModified"></param>
        /// <param name="creationTime"></param>
        /// <param name="state"></param>
        /// <param name="stateTransitionTime"></param>
        /// <param name="previousState"></param>
        /// <param name="previousStateTransitionTime"></param>
        /// <param name="priority"></param>
        /// <param name="allowTaskPreemption"></param>
        /// <param name="maxParallelTasks"></param>
        /// <param name="constraints"></param>
        /// <param name="jobManagerTask"></param>
        /// <param name="jobPreparationTask"></param>
        /// <param name="jobReleaseTask"></param>
        /// <param name="commonEnvironmentSettings"></param>
        /// <param name="poolInfo"></param>
        /// <param name="onAllTasksComplete"></param>
        /// <param name="onTaskFailure"></param>
        /// <param name="networkConfiguration"></param>
        /// <param name="metadata"></param>
        /// <param name="executionInfo"></param>
        /// <param name="stats"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchJob(string id, string displayName, bool? usesTaskDependencies, string url, string eTag, DateTimeOffset? lastModified, DateTimeOffset? creationTime, BatchJobState? state, DateTimeOffset? stateTransitionTime, BatchJobState? previousState, DateTimeOffset? previousStateTransitionTime, int? priority, bool? allowTaskPreemption, int? maxParallelTasks, BatchJobConstraints constraints, BatchJobManagerTask jobManagerTask, BatchJobPreparationTask jobPreparationTask, BatchJobReleaseTask jobReleaseTask, IReadOnlyList<EnvironmentSetting> commonEnvironmentSettings, BatchPoolInfo poolInfo, OnAllBatchTasksComplete? onAllTasksComplete, OnBatchTaskFailure? onTaskFailure, BatchJobNetworkConfiguration networkConfiguration, IList<MetadataItem> metadata, BatchJobExecutionInfo executionInfo, BatchJobStatistics stats, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            DisplayName = displayName;
            UsesTaskDependencies = usesTaskDependencies;
            Url = url;
            ETag = eTag;
            LastModified = lastModified;
            CreationTime = creationTime;
            State = state;
            StateTransitionTime = stateTransitionTime;
            PreviousState = previousState;
            PreviousStateTransitionTime = previousStateTransitionTime;
            Priority = priority;
            AllowTaskPreemption = allowTaskPreemption;
            MaxParallelTasks = maxParallelTasks;
            Constraints = constraints;
            JobManagerTask = jobManagerTask;
            JobPreparationTask = jobPreparationTask;
            JobReleaseTask = jobReleaseTask;
            CommonEnvironmentSettings = commonEnvironmentSettings;
            PoolInfo = poolInfo;
            OnAllTasksComplete = onAllTasksComplete;
            OnTaskFailure = onTaskFailure;
            NetworkConfiguration = networkConfiguration;
            Metadata = metadata;
            ExecutionInfo = executionInfo;
            Stats = stats;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BatchJob"/> for deserialization. </summary>
        internal BatchJob()
        {
        }

        /// <summary> Gets the id. </summary>
        public string Id { get; }
        /// <summary> Gets the display name. </summary>
        public string DisplayName { get; }
        /// <summary> Gets the uses task dependencies. </summary>
        public bool? UsesTaskDependencies { get; }
        /// <summary> Gets the url. </summary>
        public string Url { get; }
        /// <summary> Gets the e tag. </summary>
        public string ETag { get; }
        /// <summary> Gets the last modified. </summary>
        public DateTimeOffset? LastModified { get; }
        /// <summary> Gets the creation time. </summary>
        public DateTimeOffset? CreationTime { get; }
        /// <summary> Gets the state. </summary>
        public BatchJobState? State { get; }
        /// <summary> Gets the state transition time. </summary>
        public DateTimeOffset? StateTransitionTime { get; }
        /// <summary> Gets the previous state. </summary>
        public BatchJobState? PreviousState { get; }
        /// <summary> Gets the previous state transition time. </summary>
        public DateTimeOffset? PreviousStateTransitionTime { get; }
        /// <summary> Gets or sets the priority. </summary>
        public int? Priority { get; set; }
        /// <summary> Gets or sets the allow task preemption. </summary>
        public bool? AllowTaskPreemption { get; set; }
        /// <summary> Gets or sets the max parallel tasks. </summary>
        public int? MaxParallelTasks { get; set; }
        /// <summary> Gets or sets the constraints. </summary>
        public BatchJobConstraints Constraints { get; set; }
        /// <summary> Gets the job manager task. </summary>
        public BatchJobManagerTask JobManagerTask { get; }
        /// <summary> Gets the job preparation task. </summary>
        public BatchJobPreparationTask JobPreparationTask { get; }
        /// <summary> Gets the job release task. </summary>
        public BatchJobReleaseTask JobReleaseTask { get; }
        /// <summary> Gets the common environment settings. </summary>
        public IReadOnlyList<EnvironmentSetting> CommonEnvironmentSettings { get; }
        /// <summary> Gets or sets the pool info. </summary>
        public BatchPoolInfo PoolInfo { get; set; }
        /// <summary> Gets or sets the on all tasks complete. </summary>
        public OnAllBatchTasksComplete? OnAllTasksComplete { get; set; }
        /// <summary> Gets the on task failure. </summary>
        public OnBatchTaskFailure? OnTaskFailure { get; }
        /// <summary> Gets the network configuration. </summary>
        public BatchJobNetworkConfiguration NetworkConfiguration { get; }
        /// <summary> Gets the metadata. </summary>
        public IList<MetadataItem> Metadata { get; }
        /// <summary> Gets the execution info. </summary>
        public BatchJobExecutionInfo ExecutionInfo { get; }
        /// <summary> Gets the stats. </summary>
        public BatchJobStatistics Stats { get; }
    }
}
