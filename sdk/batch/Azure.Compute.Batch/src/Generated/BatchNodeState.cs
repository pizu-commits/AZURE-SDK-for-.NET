// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Compute.Batch
{
    /// <summary> The BatchNodeState. </summary>
    public readonly partial struct BatchNodeState : IEquatable<BatchNodeState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BatchNodeState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BatchNodeState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string IdleValue = "idle";
        private const string RebootingValue = "rebooting";
        private const string ReimagingValue = "reimaging";
        private const string RunningValue = "running";
        private const string UnusableValue = "unusable";
        private const string CreatingValue = "creating";
        private const string StartingValue = "starting";
        private const string WaitingForStartTaskValue = "waitingforstarttask";
        private const string StartTaskFailedValue = "starttaskfailed";
        private const string UnknownValue = "unknown";
        private const string LeavingPoolValue = "leavingpool";
        private const string OfflineValue = "offline";
        private const string PreemptedValue = "preempted";
        private const string UpgradingOSValue = "upgradingos";

        /// <summary> idle. </summary>
        public static BatchNodeState Idle { get; } = new BatchNodeState(IdleValue);
        /// <summary> rebooting. </summary>
        public static BatchNodeState Rebooting { get; } = new BatchNodeState(RebootingValue);
        /// <summary> reimaging. </summary>
        public static BatchNodeState Reimaging { get; } = new BatchNodeState(ReimagingValue);
        /// <summary> running. </summary>
        public static BatchNodeState Running { get; } = new BatchNodeState(RunningValue);
        /// <summary> unusable. </summary>
        public static BatchNodeState Unusable { get; } = new BatchNodeState(UnusableValue);
        /// <summary> creating. </summary>
        public static BatchNodeState Creating { get; } = new BatchNodeState(CreatingValue);
        /// <summary> starting. </summary>
        public static BatchNodeState Starting { get; } = new BatchNodeState(StartingValue);
        /// <summary> waitingforstarttask. </summary>
        public static BatchNodeState WaitingForStartTask { get; } = new BatchNodeState(WaitingForStartTaskValue);
        /// <summary> starttaskfailed. </summary>
        public static BatchNodeState StartTaskFailed { get; } = new BatchNodeState(StartTaskFailedValue);
        /// <summary> unknown. </summary>
        public static BatchNodeState Unknown { get; } = new BatchNodeState(UnknownValue);
        /// <summary> leavingpool. </summary>
        public static BatchNodeState LeavingPool { get; } = new BatchNodeState(LeavingPoolValue);
        /// <summary> offline. </summary>
        public static BatchNodeState Offline { get; } = new BatchNodeState(OfflineValue);
        /// <summary> preempted. </summary>
        public static BatchNodeState Preempted { get; } = new BatchNodeState(PreemptedValue);
        /// <summary> upgradingos. </summary>
        public static BatchNodeState UpgradingOS { get; } = new BatchNodeState(UpgradingOSValue);
        /// <summary> Determines if two <see cref="BatchNodeState"/> values are the same. </summary>
        public static bool operator ==(BatchNodeState left, BatchNodeState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BatchNodeState"/> values are not the same. </summary>
        public static bool operator !=(BatchNodeState left, BatchNodeState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="BatchNodeState"/>. </summary>
        public static implicit operator BatchNodeState(string value) => new BatchNodeState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BatchNodeState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BatchNodeState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
