// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The BatchJobSchedule. </summary>
    public partial class BatchJobSchedule
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchJobSchedule"/>. </summary>
        /// <param name="jobSpecification"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobSpecification"/> is null. </exception>
        public BatchJobSchedule(BatchJobSpecification jobSpecification)
        {
            Argument.AssertNotNull(jobSpecification, nameof(jobSpecification));

            JobSpecification = jobSpecification;
            Metadata = new ChangeTrackingList<MetadataItem>();
        }

        /// <summary> Initializes a new instance of <see cref="BatchJobSchedule"/>. </summary>
        /// <param name="id"></param>
        /// <param name="displayName"></param>
        /// <param name="url"></param>
        /// <param name="eTag"></param>
        /// <param name="lastModified"></param>
        /// <param name="creationTime"></param>
        /// <param name="state"></param>
        /// <param name="stateTransitionTime"></param>
        /// <param name="previousState"></param>
        /// <param name="previousStateTransitionTime"></param>
        /// <param name="schedule"></param>
        /// <param name="jobSpecification"></param>
        /// <param name="executionInfo"></param>
        /// <param name="metadata"></param>
        /// <param name="stats"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchJobSchedule(string id, string displayName, string url, string eTag, DateTimeOffset? lastModified, DateTimeOffset? creationTime, BatchJobScheduleState? state, DateTimeOffset? stateTransitionTime, BatchJobScheduleState? previousState, DateTimeOffset? previousStateTransitionTime, BatchJobScheduleConfiguration schedule, BatchJobSpecification jobSpecification, BatchJobScheduleExecutionInfo executionInfo, IList<MetadataItem> metadata, BatchJobScheduleStatistics stats, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            DisplayName = displayName;
            Url = url;
            ETag = eTag;
            LastModified = lastModified;
            CreationTime = creationTime;
            State = state;
            StateTransitionTime = stateTransitionTime;
            PreviousState = previousState;
            PreviousStateTransitionTime = previousStateTransitionTime;
            Schedule = schedule;
            JobSpecification = jobSpecification;
            ExecutionInfo = executionInfo;
            Metadata = metadata;
            Stats = stats;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BatchJobSchedule"/> for deserialization. </summary>
        internal BatchJobSchedule()
        {
        }

        /// <summary> Gets the id. </summary>
        public string Id { get; }
        /// <summary> Gets the display name. </summary>
        public string DisplayName { get; }
        /// <summary> Gets the url. </summary>
        public string Url { get; }
        /// <summary> Gets the e tag. </summary>
        public string ETag { get; }
        /// <summary> Gets the last modified. </summary>
        public DateTimeOffset? LastModified { get; }
        /// <summary> Gets the creation time. </summary>
        public DateTimeOffset? CreationTime { get; }
        /// <summary> Gets the state. </summary>
        public BatchJobScheduleState? State { get; }
        /// <summary> Gets the state transition time. </summary>
        public DateTimeOffset? StateTransitionTime { get; }
        /// <summary> Gets the previous state. </summary>
        public BatchJobScheduleState? PreviousState { get; }
        /// <summary> Gets the previous state transition time. </summary>
        public DateTimeOffset? PreviousStateTransitionTime { get; }
        /// <summary> Gets or sets the schedule. </summary>
        public BatchJobScheduleConfiguration Schedule { get; set; }
        /// <summary> Gets or sets the job specification. </summary>
        public BatchJobSpecification JobSpecification { get; set; }
        /// <summary> Gets the execution info. </summary>
        public BatchJobScheduleExecutionInfo ExecutionInfo { get; }
        /// <summary> Gets the metadata. </summary>
        public IList<MetadataItem> Metadata { get; }
        /// <summary> Gets the stats. </summary>
        public BatchJobScheduleStatistics Stats { get; }
    }
}
