// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Compute.Batch
{
    /// <summary> The BatchTaskAddStatus. </summary>
    public readonly partial struct BatchTaskAddStatus : IEquatable<BatchTaskAddStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BatchTaskAddStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BatchTaskAddStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SuccessValue = "success";
        private const string ClientErrorValue = "clienterror";
        private const string ServerErrorValue = "servererror";

        /// <summary> success. </summary>
        public static BatchTaskAddStatus Success { get; } = new BatchTaskAddStatus(SuccessValue);
        /// <summary> clienterror. </summary>
        public static BatchTaskAddStatus ClientError { get; } = new BatchTaskAddStatus(ClientErrorValue);
        /// <summary> servererror. </summary>
        public static BatchTaskAddStatus ServerError { get; } = new BatchTaskAddStatus(ServerErrorValue);
        /// <summary> Determines if two <see cref="BatchTaskAddStatus"/> values are the same. </summary>
        public static bool operator ==(BatchTaskAddStatus left, BatchTaskAddStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BatchTaskAddStatus"/> values are not the same. </summary>
        public static bool operator !=(BatchTaskAddStatus left, BatchTaskAddStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="BatchTaskAddStatus"/>. </summary>
        public static implicit operator BatchTaskAddStatus(string value) => new BatchTaskAddStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BatchTaskAddStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BatchTaskAddStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
