// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The BatchPoolCreateContent. </summary>
    public partial class BatchPoolCreateContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchPoolCreateContent"/>. </summary>
        /// <param name="id"></param>
        /// <param name="vmSize"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="vmSize"/> is null. </exception>
        public BatchPoolCreateContent(string id, string vmSize)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(vmSize, nameof(vmSize));

            Id = id;
            VmSize = vmSize;
            ResourceTags = new ChangeTrackingDictionary<string, string>();
            ApplicationPackageReferences = new ChangeTrackingList<BatchApplicationPackageReference>();
            UserAccounts = new ChangeTrackingList<UserAccount>();
            Metadata = new ChangeTrackingList<MetadataItem>();
            MountConfiguration = new ChangeTrackingList<MountConfiguration>();
        }

        /// <summary> Initializes a new instance of <see cref="BatchPoolCreateContent"/>. </summary>
        /// <param name="id"></param>
        /// <param name="displayName"></param>
        /// <param name="vmSize"></param>
        /// <param name="virtualMachineConfiguration"></param>
        /// <param name="resizeTimeout"></param>
        /// <param name="resourceTags"></param>
        /// <param name="targetDedicatedNodes"></param>
        /// <param name="targetLowPriorityNodes"></param>
        /// <param name="enableAutoScale"></param>
        /// <param name="autoScaleFormula"></param>
        /// <param name="autoScaleEvaluationInterval"></param>
        /// <param name="enableInterNodeCommunication"></param>
        /// <param name="networkConfiguration"></param>
        /// <param name="startTask"></param>
        /// <param name="applicationPackageReferences"></param>
        /// <param name="taskSlotsPerNode"></param>
        /// <param name="taskSchedulingPolicy"></param>
        /// <param name="userAccounts"></param>
        /// <param name="metadata"></param>
        /// <param name="mountConfiguration"></param>
        /// <param name="targetNodeCommunicationMode"></param>
        /// <param name="upgradePolicy"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchPoolCreateContent(string id, string displayName, string vmSize, VirtualMachineConfiguration virtualMachineConfiguration, TimeSpan? resizeTimeout, IDictionary<string, string> resourceTags, int? targetDedicatedNodes, int? targetLowPriorityNodes, bool? enableAutoScale, string autoScaleFormula, TimeSpan? autoScaleEvaluationInterval, bool? enableInterNodeCommunication, NetworkConfiguration networkConfiguration, BatchStartTask startTask, IList<BatchApplicationPackageReference> applicationPackageReferences, int? taskSlotsPerNode, BatchTaskSchedulingPolicy taskSchedulingPolicy, IList<UserAccount> userAccounts, IList<MetadataItem> metadata, IList<MountConfiguration> mountConfiguration, BatchNodeCommunicationMode? targetNodeCommunicationMode, UpgradePolicy upgradePolicy, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            DisplayName = displayName;
            VmSize = vmSize;
            VirtualMachineConfiguration = virtualMachineConfiguration;
            ResizeTimeout = resizeTimeout;
            ResourceTags = resourceTags;
            TargetDedicatedNodes = targetDedicatedNodes;
            TargetLowPriorityNodes = targetLowPriorityNodes;
            EnableAutoScale = enableAutoScale;
            AutoScaleFormula = autoScaleFormula;
            AutoScaleEvaluationInterval = autoScaleEvaluationInterval;
            EnableInterNodeCommunication = enableInterNodeCommunication;
            NetworkConfiguration = networkConfiguration;
            StartTask = startTask;
            ApplicationPackageReferences = applicationPackageReferences;
            TaskSlotsPerNode = taskSlotsPerNode;
            TaskSchedulingPolicy = taskSchedulingPolicy;
            UserAccounts = userAccounts;
            Metadata = metadata;
            MountConfiguration = mountConfiguration;
            TargetNodeCommunicationMode = targetNodeCommunicationMode;
            UpgradePolicy = upgradePolicy;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BatchPoolCreateContent"/> for deserialization. </summary>
        internal BatchPoolCreateContent()
        {
        }

        /// <summary> Gets the id. </summary>
        public string Id { get; }
        /// <summary> Gets or sets the display name. </summary>
        public string DisplayName { get; set; }
        /// <summary> Gets the vm size. </summary>
        public string VmSize { get; }
        /// <summary> Gets or sets the virtual machine configuration. </summary>
        public VirtualMachineConfiguration VirtualMachineConfiguration { get; set; }
        /// <summary> Gets or sets the resize timeout. </summary>
        public TimeSpan? ResizeTimeout { get; set; }
        /// <summary> Gets the resource tags. </summary>
        public IDictionary<string, string> ResourceTags { get; }
        /// <summary> Gets or sets the target dedicated nodes. </summary>
        public int? TargetDedicatedNodes { get; set; }
        /// <summary> Gets or sets the target low priority nodes. </summary>
        public int? TargetLowPriorityNodes { get; set; }
        /// <summary> Gets or sets the enable auto scale. </summary>
        public bool? EnableAutoScale { get; set; }
        /// <summary> Gets or sets the auto scale formula. </summary>
        public string AutoScaleFormula { get; set; }
        /// <summary> Gets or sets the auto scale evaluation interval. </summary>
        public TimeSpan? AutoScaleEvaluationInterval { get; set; }
        /// <summary> Gets or sets the enable inter node communication. </summary>
        public bool? EnableInterNodeCommunication { get; set; }
        /// <summary> Gets or sets the network configuration. </summary>
        public NetworkConfiguration NetworkConfiguration { get; set; }
        /// <summary> Gets or sets the start task. </summary>
        public BatchStartTask StartTask { get; set; }
        /// <summary> Gets the application package references. </summary>
        public IList<BatchApplicationPackageReference> ApplicationPackageReferences { get; }
        /// <summary> Gets or sets the task slots per node. </summary>
        public int? TaskSlotsPerNode { get; set; }
        /// <summary> Gets or sets the task scheduling policy. </summary>
        public BatchTaskSchedulingPolicy TaskSchedulingPolicy { get; set; }
        /// <summary> Gets the user accounts. </summary>
        public IList<UserAccount> UserAccounts { get; }
        /// <summary> Gets the metadata. </summary>
        public IList<MetadataItem> Metadata { get; }
        /// <summary> Gets the mount configuration. </summary>
        public IList<MountConfiguration> MountConfiguration { get; }
        /// <summary> Gets or sets the target node communication mode. </summary>
        public BatchNodeCommunicationMode? TargetNodeCommunicationMode { get; set; }
        /// <summary> Gets or sets the upgrade policy. </summary>
        public UpgradePolicy UpgradePolicy { get; set; }
    }
}
