// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The BatchNodeInfo. </summary>
    public partial class BatchNodeInfo
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchNodeInfo"/>. </summary>
        internal BatchNodeInfo()
        {
        }

        /// <summary> Initializes a new instance of <see cref="BatchNodeInfo"/>. </summary>
        /// <param name="affinityId"></param>
        /// <param name="nodeUrl"></param>
        /// <param name="poolId"></param>
        /// <param name="nodeId"></param>
        /// <param name="taskRootDirectory"></param>
        /// <param name="taskRootDirectoryUrl"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchNodeInfo(string affinityId, string nodeUrl, string poolId, string nodeId, string taskRootDirectory, string taskRootDirectoryUrl, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AffinityId = affinityId;
            NodeUrl = nodeUrl;
            PoolId = poolId;
            NodeId = nodeId;
            TaskRootDirectory = taskRootDirectory;
            TaskRootDirectoryUrl = taskRootDirectoryUrl;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the affinity id. </summary>
        public string AffinityId { get; }
        /// <summary> Gets the node url. </summary>
        public string NodeUrl { get; }
        /// <summary> Gets the pool id. </summary>
        public string PoolId { get; }
        /// <summary> Gets the node id. </summary>
        public string NodeId { get; }
        /// <summary> Gets the task root directory. </summary>
        public string TaskRootDirectory { get; }
        /// <summary> Gets the task root directory url. </summary>
        public string TaskRootDirectoryUrl { get; }
    }
}
