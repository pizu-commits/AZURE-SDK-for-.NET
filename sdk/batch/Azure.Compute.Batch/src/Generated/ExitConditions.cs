// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The ExitConditions. </summary>
    public partial class ExitConditions
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ExitConditions"/>. </summary>
        public ExitConditions()
        {
            ExitCodes = new ChangeTrackingList<ExitCodeMapping>();
            ExitCodeRanges = new ChangeTrackingList<ExitCodeRangeMapping>();
        }

        /// <summary> Initializes a new instance of <see cref="ExitConditions"/>. </summary>
        /// <param name="exitCodes"></param>
        /// <param name="exitCodeRanges"></param>
        /// <param name="preProcessingError"></param>
        /// <param name="fileUploadError"></param>
        /// <param name="default"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ExitConditions(IList<ExitCodeMapping> exitCodes, IList<ExitCodeRangeMapping> exitCodeRanges, ExitOptions preProcessingError, ExitOptions fileUploadError, ExitOptions @default, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ExitCodes = exitCodes;
            ExitCodeRanges = exitCodeRanges;
            PreProcessingError = preProcessingError;
            FileUploadError = fileUploadError;
            Default = @default;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the exit codes. </summary>
        public IList<ExitCodeMapping> ExitCodes { get; }
        /// <summary> Gets the exit code ranges. </summary>
        public IList<ExitCodeRangeMapping> ExitCodeRanges { get; }
        /// <summary> Gets or sets the pre processing error. </summary>
        public ExitOptions PreProcessingError { get; set; }
        /// <summary> Gets or sets the file upload error. </summary>
        public ExitOptions FileUploadError { get; set; }
        /// <summary> Gets or sets the default. </summary>
        public ExitOptions Default { get; set; }
    }
}
