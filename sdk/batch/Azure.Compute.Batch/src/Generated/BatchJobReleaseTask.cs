// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The BatchJobReleaseTask. </summary>
    public partial class BatchJobReleaseTask
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchJobReleaseTask"/>. </summary>
        /// <param name="commandLine"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="commandLine"/> is null. </exception>
        public BatchJobReleaseTask(string commandLine)
        {
            Argument.AssertNotNull(commandLine, nameof(commandLine));

            CommandLine = commandLine;
            ResourceFiles = new ChangeTrackingList<ResourceFile>();
            EnvironmentSettings = new ChangeTrackingList<EnvironmentSetting>();
        }

        /// <summary> Initializes a new instance of <see cref="BatchJobReleaseTask"/>. </summary>
        /// <param name="id"></param>
        /// <param name="commandLine"></param>
        /// <param name="containerSettings"></param>
        /// <param name="resourceFiles"></param>
        /// <param name="environmentSettings"></param>
        /// <param name="maxWallClockTime"></param>
        /// <param name="retentionTime"></param>
        /// <param name="userIdentity"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchJobReleaseTask(string id, string commandLine, BatchTaskContainerSettings containerSettings, IList<ResourceFile> resourceFiles, IList<EnvironmentSetting> environmentSettings, TimeSpan? maxWallClockTime, TimeSpan? retentionTime, UserIdentity userIdentity, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            CommandLine = commandLine;
            ContainerSettings = containerSettings;
            ResourceFiles = resourceFiles;
            EnvironmentSettings = environmentSettings;
            MaxWallClockTime = maxWallClockTime;
            RetentionTime = retentionTime;
            UserIdentity = userIdentity;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BatchJobReleaseTask"/> for deserialization. </summary>
        internal BatchJobReleaseTask()
        {
        }

        /// <summary> Gets or sets the id. </summary>
        public string Id { get; set; }
        /// <summary> Gets or sets the command line. </summary>
        public string CommandLine { get; set; }
        /// <summary> Gets or sets the container settings. </summary>
        public BatchTaskContainerSettings ContainerSettings { get; set; }
        /// <summary> Gets the resource files. </summary>
        public IList<ResourceFile> ResourceFiles { get; }
        /// <summary> Gets the environment settings. </summary>
        public IList<EnvironmentSetting> EnvironmentSettings { get; }
        /// <summary> Gets or sets the max wall clock time. </summary>
        public TimeSpan? MaxWallClockTime { get; set; }
        /// <summary> Gets or sets the retention time. </summary>
        public TimeSpan? RetentionTime { get; set; }
        /// <summary> Gets or sets the user identity. </summary>
        public UserIdentity UserIdentity { get; set; }
    }
}
