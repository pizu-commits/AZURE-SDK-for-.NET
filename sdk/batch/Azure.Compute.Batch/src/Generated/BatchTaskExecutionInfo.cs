// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The BatchTaskExecutionInfo. </summary>
    public partial class BatchTaskExecutionInfo
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchTaskExecutionInfo"/>. </summary>
        /// <param name="retryCount"></param>
        /// <param name="requeueCount"></param>
        internal BatchTaskExecutionInfo(int retryCount, int requeueCount)
        {
            RetryCount = retryCount;
            RequeueCount = requeueCount;
        }

        /// <summary> Initializes a new instance of <see cref="BatchTaskExecutionInfo"/>. </summary>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="exitCode"></param>
        /// <param name="containerInfo"></param>
        /// <param name="failureInfo"></param>
        /// <param name="retryCount"></param>
        /// <param name="lastRetryTime"></param>
        /// <param name="requeueCount"></param>
        /// <param name="lastRequeueTime"></param>
        /// <param name="result"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchTaskExecutionInfo(DateTimeOffset? startTime, DateTimeOffset? endTime, int? exitCode, BatchTaskContainerExecutionInfo containerInfo, BatchTaskFailureInfo failureInfo, int retryCount, DateTimeOffset? lastRetryTime, int requeueCount, DateTimeOffset? lastRequeueTime, BatchTaskExecutionResult? result, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            StartTime = startTime;
            EndTime = endTime;
            ExitCode = exitCode;
            ContainerInfo = containerInfo;
            FailureInfo = failureInfo;
            RetryCount = retryCount;
            LastRetryTime = lastRetryTime;
            RequeueCount = requeueCount;
            LastRequeueTime = lastRequeueTime;
            Result = result;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BatchTaskExecutionInfo"/> for deserialization. </summary>
        internal BatchTaskExecutionInfo()
        {
        }

        /// <summary> Gets the start time. </summary>
        public DateTimeOffset? StartTime { get; }
        /// <summary> Gets the end time. </summary>
        public DateTimeOffset? EndTime { get; }
        /// <summary> Gets the exit code. </summary>
        public int? ExitCode { get; }
        /// <summary> Gets the container info. </summary>
        public BatchTaskContainerExecutionInfo ContainerInfo { get; }
        /// <summary> Gets the failure info. </summary>
        public BatchTaskFailureInfo FailureInfo { get; }
        /// <summary> Gets the retry count. </summary>
        public int RetryCount { get; }
        /// <summary> Gets the last retry time. </summary>
        public DateTimeOffset? LastRetryTime { get; }
        /// <summary> Gets the requeue count. </summary>
        public int RequeueCount { get; }
        /// <summary> Gets the last requeue time. </summary>
        public DateTimeOffset? LastRequeueTime { get; }
        /// <summary> Gets the result. </summary>
        public BatchTaskExecutionResult? Result { get; }
    }
}
