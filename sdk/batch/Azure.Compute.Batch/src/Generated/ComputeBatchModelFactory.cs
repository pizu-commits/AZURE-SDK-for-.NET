// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Compute.Batch
{
    /// <summary> Model factory for models. </summary>
    public static partial class ComputeBatchModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Batch.BatchApplication"/>. </summary>
        /// <param name="id"></param>
        /// <param name="displayName"></param>
        /// <param name="versions"></param>
        /// <returns> A new <see cref="Batch.BatchApplication"/> instance for mocking. </returns>
        public static BatchApplication BatchApplication(string id = null, string displayName = null, IEnumerable<string> versions = null)
        {
            versions ??= new List<string>();

            return new BatchApplication(id, displayName, versions?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchError"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <param name="values"></param>
        /// <returns> A new <see cref="Batch.BatchError"/> instance for mocking. </returns>
        public static BatchError BatchError(string code = null, BatchErrorMessage message = null, IEnumerable<BatchErrorDetail> values = null)
        {
            values ??= new List<BatchErrorDetail>();

            return new BatchError(code, message, values?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchErrorMessage"/>. </summary>
        /// <param name="lang"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Batch.BatchErrorMessage"/> instance for mocking. </returns>
        public static BatchErrorMessage BatchErrorMessage(string lang = null, string value = null)
        {
            return new BatchErrorMessage(lang, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchErrorDetail"/>. </summary>
        /// <param name="key"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Batch.BatchErrorDetail"/> instance for mocking. </returns>
        public static BatchErrorDetail BatchErrorDetail(string key = null, string value = null)
        {
            return new BatchErrorDetail(key, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchPoolUsageMetrics"/>. </summary>
        /// <param name="poolId"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="vmSize"></param>
        /// <param name="totalCoreHours"></param>
        /// <returns> A new <see cref="Batch.BatchPoolUsageMetrics"/> instance for mocking. </returns>
        public static BatchPoolUsageMetrics BatchPoolUsageMetrics(string poolId = null, DateTimeOffset startTime = default, DateTimeOffset endTime = default, string vmSize = null, float totalCoreHours = default)
        {
            return new BatchPoolUsageMetrics(
                poolId,
                startTime,
                endTime,
                vmSize,
                totalCoreHours,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchPoolCreateContent"/>. </summary>
        /// <param name="id"></param>
        /// <param name="displayName"></param>
        /// <param name="vmSize"></param>
        /// <param name="virtualMachineConfiguration"></param>
        /// <param name="resizeTimeout"></param>
        /// <param name="resourceTags"></param>
        /// <param name="targetDedicatedNodes"></param>
        /// <param name="targetLowPriorityNodes"></param>
        /// <param name="enableAutoScale"></param>
        /// <param name="autoScaleFormula"></param>
        /// <param name="autoScaleEvaluationInterval"></param>
        /// <param name="enableInterNodeCommunication"></param>
        /// <param name="networkConfiguration"></param>
        /// <param name="startTask"></param>
        /// <param name="applicationPackageReferences"></param>
        /// <param name="taskSlotsPerNode"></param>
        /// <param name="taskSchedulingPolicy"></param>
        /// <param name="userAccounts"></param>
        /// <param name="metadata"></param>
        /// <param name="mountConfiguration"></param>
        /// <param name="targetNodeCommunicationMode"></param>
        /// <param name="upgradePolicy"></param>
        /// <returns> A new <see cref="Batch.BatchPoolCreateContent"/> instance for mocking. </returns>
        public static BatchPoolCreateContent BatchPoolCreateContent(string id = null, string displayName = null, string vmSize = null, VirtualMachineConfiguration virtualMachineConfiguration = null, TimeSpan? resizeTimeout = null, IDictionary<string, string> resourceTags = null, int? targetDedicatedNodes = null, int? targetLowPriorityNodes = null, bool? enableAutoScale = null, string autoScaleFormula = null, TimeSpan? autoScaleEvaluationInterval = null, bool? enableInterNodeCommunication = null, NetworkConfiguration networkConfiguration = null, BatchStartTask startTask = null, IEnumerable<BatchApplicationPackageReference> applicationPackageReferences = null, int? taskSlotsPerNode = null, BatchTaskSchedulingPolicy taskSchedulingPolicy = null, IEnumerable<UserAccount> userAccounts = null, IEnumerable<MetadataItem> metadata = null, IEnumerable<MountConfiguration> mountConfiguration = null, BatchNodeCommunicationMode? targetNodeCommunicationMode = null, UpgradePolicy upgradePolicy = null)
        {
            resourceTags ??= new Dictionary<string, string>();
            applicationPackageReferences ??= new List<BatchApplicationPackageReference>();
            userAccounts ??= new List<UserAccount>();
            metadata ??= new List<MetadataItem>();
            mountConfiguration ??= new List<MountConfiguration>();

            return new BatchPoolCreateContent(
                id,
                displayName,
                vmSize,
                virtualMachineConfiguration,
                resizeTimeout,
                resourceTags,
                targetDedicatedNodes,
                targetLowPriorityNodes,
                enableAutoScale,
                autoScaleFormula,
                autoScaleEvaluationInterval,
                enableInterNodeCommunication,
                networkConfiguration,
                startTask,
                applicationPackageReferences?.ToList(),
                taskSlotsPerNode,
                taskSchedulingPolicy,
                userAccounts?.ToList(),
                metadata?.ToList(),
                mountConfiguration?.ToList(),
                targetNodeCommunicationMode,
                upgradePolicy,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.ImageReference"/>. </summary>
        /// <param name="publisher"></param>
        /// <param name="offer"></param>
        /// <param name="sku"></param>
        /// <param name="version"></param>
        /// <param name="virtualMachineImageId"></param>
        /// <param name="exactVersion"></param>
        /// <returns> A new <see cref="Batch.ImageReference"/> instance for mocking. </returns>
        public static ImageReference ImageReference(string publisher = null, string offer = null, string sku = null, string version = null, string virtualMachineImageId = null, string exactVersion = null)
        {
            return new ImageReference(
                publisher,
                offer,
                sku,
                version,
                virtualMachineImageId,
                exactVersion,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchPool"/>. </summary>
        /// <param name="id"></param>
        /// <param name="displayName"></param>
        /// <param name="url"></param>
        /// <param name="eTag"></param>
        /// <param name="lastModified"></param>
        /// <param name="creationTime"></param>
        /// <param name="state"></param>
        /// <param name="stateTransitionTime"></param>
        /// <param name="allocationState"></param>
        /// <param name="allocationStateTransitionTime"></param>
        /// <param name="vmSize"></param>
        /// <param name="virtualMachineConfiguration"></param>
        /// <param name="resizeTimeout"></param>
        /// <param name="resizeErrors"></param>
        /// <param name="resourceTags"></param>
        /// <param name="currentDedicatedNodes"></param>
        /// <param name="currentLowPriorityNodes"></param>
        /// <param name="targetDedicatedNodes"></param>
        /// <param name="targetLowPriorityNodes"></param>
        /// <param name="enableAutoScale"></param>
        /// <param name="autoScaleFormula"></param>
        /// <param name="autoScaleEvaluationInterval"></param>
        /// <param name="autoScaleRun"></param>
        /// <param name="enableInterNodeCommunication"></param>
        /// <param name="networkConfiguration"></param>
        /// <param name="startTask"></param>
        /// <param name="applicationPackageReferences"></param>
        /// <param name="taskSlotsPerNode"></param>
        /// <param name="taskSchedulingPolicy"></param>
        /// <param name="userAccounts"></param>
        /// <param name="metadata"></param>
        /// <param name="stats"></param>
        /// <param name="mountConfiguration"></param>
        /// <param name="identity"></param>
        /// <param name="targetNodeCommunicationMode"></param>
        /// <param name="currentNodeCommunicationMode"></param>
        /// <param name="upgradePolicy"></param>
        /// <returns> A new <see cref="Batch.BatchPool"/> instance for mocking. </returns>
        public static BatchPool BatchPool(string id = null, string displayName = null, string url = null, string eTag = null, DateTimeOffset? lastModified = null, DateTimeOffset? creationTime = null, BatchPoolState? state = null, DateTimeOffset? stateTransitionTime = null, AllocationState? allocationState = null, DateTimeOffset? allocationStateTransitionTime = null, string vmSize = null, VirtualMachineConfiguration virtualMachineConfiguration = null, TimeSpan? resizeTimeout = null, IEnumerable<ResizeError> resizeErrors = null, IReadOnlyDictionary<string, string> resourceTags = null, int? currentDedicatedNodes = null, int? currentLowPriorityNodes = null, int? targetDedicatedNodes = null, int? targetLowPriorityNodes = null, bool? enableAutoScale = null, string autoScaleFormula = null, TimeSpan? autoScaleEvaluationInterval = null, AutoScaleRun autoScaleRun = null, bool? enableInterNodeCommunication = null, NetworkConfiguration networkConfiguration = null, BatchStartTask startTask = null, IEnumerable<BatchApplicationPackageReference> applicationPackageReferences = null, int? taskSlotsPerNode = null, BatchTaskSchedulingPolicy taskSchedulingPolicy = null, IEnumerable<UserAccount> userAccounts = null, IEnumerable<MetadataItem> metadata = null, BatchPoolStatistics stats = null, IEnumerable<MountConfiguration> mountConfiguration = null, BatchPoolIdentity identity = null, BatchNodeCommunicationMode? targetNodeCommunicationMode = null, BatchNodeCommunicationMode? currentNodeCommunicationMode = null, UpgradePolicy upgradePolicy = null)
        {
            resizeErrors ??= new List<ResizeError>();
            resourceTags ??= new Dictionary<string, string>();
            applicationPackageReferences ??= new List<BatchApplicationPackageReference>();
            userAccounts ??= new List<UserAccount>();
            metadata ??= new List<MetadataItem>();
            mountConfiguration ??= new List<MountConfiguration>();

            return new BatchPool(
                id,
                displayName,
                url,
                eTag,
                lastModified,
                creationTime,
                state,
                stateTransitionTime,
                allocationState,
                allocationStateTransitionTime,
                vmSize,
                virtualMachineConfiguration,
                resizeTimeout,
                resizeErrors?.ToList(),
                resourceTags,
                currentDedicatedNodes,
                currentLowPriorityNodes,
                targetDedicatedNodes,
                targetLowPriorityNodes,
                enableAutoScale,
                autoScaleFormula,
                autoScaleEvaluationInterval,
                autoScaleRun,
                enableInterNodeCommunication,
                networkConfiguration,
                startTask,
                applicationPackageReferences?.ToList(),
                taskSlotsPerNode,
                taskSchedulingPolicy,
                userAccounts?.ToList(),
                metadata?.ToList(),
                stats,
                mountConfiguration?.ToList(),
                identity,
                targetNodeCommunicationMode,
                currentNodeCommunicationMode,
                upgradePolicy,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.ResizeError"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <param name="values"></param>
        /// <returns> A new <see cref="Batch.ResizeError"/> instance for mocking. </returns>
        public static ResizeError ResizeError(string code = null, string message = null, IEnumerable<NameValuePair> values = null)
        {
            values ??= new List<NameValuePair>();

            return new ResizeError(code, message, values?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.NameValuePair"/>. </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Batch.NameValuePair"/> instance for mocking. </returns>
        public static NameValuePair NameValuePair(string name = null, string value = null)
        {
            return new NameValuePair(name, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.AutoScaleRun"/>. </summary>
        /// <param name="timestamp"></param>
        /// <param name="results"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Batch.AutoScaleRun"/> instance for mocking. </returns>
        public static AutoScaleRun AutoScaleRun(DateTimeOffset timestamp = default, string results = null, AutoScaleRunError error = null)
        {
            return new AutoScaleRun(timestamp, results, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.AutoScaleRunError"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <param name="values"></param>
        /// <returns> A new <see cref="Batch.AutoScaleRunError"/> instance for mocking. </returns>
        public static AutoScaleRunError AutoScaleRunError(string code = null, string message = null, IEnumerable<NameValuePair> values = null)
        {
            values ??= new List<NameValuePair>();

            return new AutoScaleRunError(code, message, values?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchPoolStatistics"/>. </summary>
        /// <param name="url"></param>
        /// <param name="startTime"></param>
        /// <param name="lastUpdateTime"></param>
        /// <param name="usageStats"></param>
        /// <param name="resourceStats"></param>
        /// <returns> A new <see cref="Batch.BatchPoolStatistics"/> instance for mocking. </returns>
        public static BatchPoolStatistics BatchPoolStatistics(string url = null, DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, BatchPoolUsageStatistics usageStats = null, BatchPoolResourceStatistics resourceStats = null)
        {
            return new BatchPoolStatistics(
                url,
                startTime,
                lastUpdateTime,
                usageStats,
                resourceStats,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchPoolUsageStatistics"/>. </summary>
        /// <param name="startTime"></param>
        /// <param name="lastUpdateTime"></param>
        /// <param name="dedicatedCoreTime"></param>
        /// <returns> A new <see cref="Batch.BatchPoolUsageStatistics"/> instance for mocking. </returns>
        public static BatchPoolUsageStatistics BatchPoolUsageStatistics(DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, TimeSpan dedicatedCoreTime = default)
        {
            return new BatchPoolUsageStatistics(startTime, lastUpdateTime, dedicatedCoreTime, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchPoolResourceStatistics"/>. </summary>
        /// <param name="startTime"></param>
        /// <param name="lastUpdateTime"></param>
        /// <param name="avgCpuPercentage"></param>
        /// <param name="avgMemoryGiB"></param>
        /// <param name="peakMemoryGiB"></param>
        /// <param name="avgDiskGiB"></param>
        /// <param name="peakDiskGiB"></param>
        /// <param name="diskReadIOps"></param>
        /// <param name="diskWriteIOps"></param>
        /// <param name="diskReadGiB"></param>
        /// <param name="diskWriteGiB"></param>
        /// <param name="networkReadGiB"></param>
        /// <param name="networkWriteGiB"></param>
        /// <returns> A new <see cref="Batch.BatchPoolResourceStatistics"/> instance for mocking. </returns>
        public static BatchPoolResourceStatistics BatchPoolResourceStatistics(DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, float avgCpuPercentage = default, float avgMemoryGiB = default, float peakMemoryGiB = default, float avgDiskGiB = default, float peakDiskGiB = default, long diskReadIOps = default, long diskWriteIOps = default, float diskReadGiB = default, float diskWriteGiB = default, float networkReadGiB = default, float networkWriteGiB = default)
        {
            return new BatchPoolResourceStatistics(
                startTime,
                lastUpdateTime,
                avgCpuPercentage,
                avgMemoryGiB,
                peakMemoryGiB,
                avgDiskGiB,
                peakDiskGiB,
                diskReadIOps,
                diskWriteIOps,
                diskReadGiB,
                diskWriteGiB,
                networkReadGiB,
                networkWriteGiB,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchPoolIdentity"/>. </summary>
        /// <param name="type"></param>
        /// <param name="userAssignedIdentities"></param>
        /// <returns> A new <see cref="Batch.BatchPoolIdentity"/> instance for mocking. </returns>
        public static BatchPoolIdentity BatchPoolIdentity(BatchPoolIdentityType type = default, IEnumerable<UserAssignedIdentity> userAssignedIdentities = null)
        {
            userAssignedIdentities ??= new List<UserAssignedIdentity>();

            return new BatchPoolIdentity(type, userAssignedIdentities?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.UserAssignedIdentity"/>. </summary>
        /// <param name="resourceId"></param>
        /// <param name="clientId"></param>
        /// <param name="principalId"></param>
        /// <returns> A new <see cref="Batch.UserAssignedIdentity"/> instance for mocking. </returns>
        public static UserAssignedIdentity UserAssignedIdentity(string resourceId = null, string clientId = null, string principalId = null)
        {
            return new UserAssignedIdentity(resourceId, clientId, principalId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchSupportedImage"/>. </summary>
        /// <param name="nodeAgentSkuId"></param>
        /// <param name="imageReference"></param>
        /// <param name="osType"></param>
        /// <param name="capabilities"></param>
        /// <param name="batchSupportEndOfLife"></param>
        /// <param name="verificationType"></param>
        /// <returns> A new <see cref="Batch.BatchSupportedImage"/> instance for mocking. </returns>
        public static BatchSupportedImage BatchSupportedImage(string nodeAgentSkuId = null, ImageReference imageReference = null, OSType osType = default, IEnumerable<string> capabilities = null, DateTimeOffset? batchSupportEndOfLife = null, ImageVerificationType verificationType = default)
        {
            capabilities ??= new List<string>();

            return new BatchSupportedImage(
                nodeAgentSkuId,
                imageReference,
                osType,
                capabilities?.ToList(),
                batchSupportEndOfLife,
                verificationType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchPoolNodeCounts"/>. </summary>
        /// <param name="poolId"></param>
        /// <param name="dedicated"></param>
        /// <param name="lowPriority"></param>
        /// <returns> A new <see cref="Batch.BatchPoolNodeCounts"/> instance for mocking. </returns>
        public static BatchPoolNodeCounts BatchPoolNodeCounts(string poolId = null, BatchNodeCounts dedicated = null, BatchNodeCounts lowPriority = null)
        {
            return new BatchPoolNodeCounts(poolId, dedicated, lowPriority, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchNodeCounts"/>. </summary>
        /// <param name="creating"></param>
        /// <param name="idle"></param>
        /// <param name="offline"></param>
        /// <param name="preempted"></param>
        /// <param name="rebooting"></param>
        /// <param name="reimaging"></param>
        /// <param name="running"></param>
        /// <param name="starting"></param>
        /// <param name="startTaskFailed"></param>
        /// <param name="leavingPool"></param>
        /// <param name="unknown"></param>
        /// <param name="unusable"></param>
        /// <param name="waitingForStartTask"></param>
        /// <param name="total"></param>
        /// <param name="upgradingOs"></param>
        /// <returns> A new <see cref="Batch.BatchNodeCounts"/> instance for mocking. </returns>
        public static BatchNodeCounts BatchNodeCounts(int creating = default, int idle = default, int offline = default, int preempted = default, int rebooting = default, int reimaging = default, int running = default, int starting = default, int startTaskFailed = default, int leavingPool = default, int unknown = default, int unusable = default, int waitingForStartTask = default, int total = default, int upgradingOs = default)
        {
            return new BatchNodeCounts(
                creating,
                idle,
                offline,
                preempted,
                rebooting,
                reimaging,
                running,
                starting,
                startTaskFailed,
                leavingPool,
                unknown,
                unusable,
                waitingForStartTask,
                total,
                upgradingOs,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchJob"/>. </summary>
        /// <param name="id"></param>
        /// <param name="displayName"></param>
        /// <param name="usesTaskDependencies"></param>
        /// <param name="url"></param>
        /// <param name="eTag"></param>
        /// <param name="lastModified"></param>
        /// <param name="creationTime"></param>
        /// <param name="state"></param>
        /// <param name="stateTransitionTime"></param>
        /// <param name="previousState"></param>
        /// <param name="previousStateTransitionTime"></param>
        /// <param name="priority"></param>
        /// <param name="allowTaskPreemption"></param>
        /// <param name="maxParallelTasks"></param>
        /// <param name="constraints"></param>
        /// <param name="jobManagerTask"></param>
        /// <param name="jobPreparationTask"></param>
        /// <param name="jobReleaseTask"></param>
        /// <param name="commonEnvironmentSettings"></param>
        /// <param name="poolInfo"></param>
        /// <param name="onAllTasksComplete"></param>
        /// <param name="onTaskFailure"></param>
        /// <param name="networkConfiguration"></param>
        /// <param name="metadata"></param>
        /// <param name="executionInfo"></param>
        /// <param name="stats"></param>
        /// <returns> A new <see cref="Batch.BatchJob"/> instance for mocking. </returns>
        public static BatchJob BatchJob(string id = null, string displayName = null, bool? usesTaskDependencies = null, string url = null, string eTag = null, DateTimeOffset? lastModified = null, DateTimeOffset? creationTime = null, BatchJobState? state = null, DateTimeOffset? stateTransitionTime = null, BatchJobState? previousState = null, DateTimeOffset? previousStateTransitionTime = null, int? priority = null, bool? allowTaskPreemption = null, int? maxParallelTasks = null, BatchJobConstraints constraints = null, BatchJobManagerTask jobManagerTask = null, BatchJobPreparationTask jobPreparationTask = null, BatchJobReleaseTask jobReleaseTask = null, IEnumerable<EnvironmentSetting> commonEnvironmentSettings = null, BatchPoolInfo poolInfo = null, OnAllBatchTasksComplete? onAllTasksComplete = null, OnBatchTaskFailure? onTaskFailure = null, BatchJobNetworkConfiguration networkConfiguration = null, IEnumerable<MetadataItem> metadata = null, BatchJobExecutionInfo executionInfo = null, BatchJobStatistics stats = null)
        {
            commonEnvironmentSettings ??= new List<EnvironmentSetting>();
            metadata ??= new List<MetadataItem>();

            return new BatchJob(
                id,
                displayName,
                usesTaskDependencies,
                url,
                eTag,
                lastModified,
                creationTime,
                state,
                stateTransitionTime,
                previousState,
                previousStateTransitionTime,
                priority,
                allowTaskPreemption,
                maxParallelTasks,
                constraints,
                jobManagerTask,
                jobPreparationTask,
                jobReleaseTask,
                commonEnvironmentSettings?.ToList(),
                poolInfo,
                onAllTasksComplete,
                onTaskFailure,
                networkConfiguration,
                metadata?.ToList(),
                executionInfo,
                stats,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchJobExecutionInfo"/>. </summary>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="poolId"></param>
        /// <param name="schedulingError"></param>
        /// <param name="terminationReason"></param>
        /// <returns> A new <see cref="Batch.BatchJobExecutionInfo"/> instance for mocking. </returns>
        public static BatchJobExecutionInfo BatchJobExecutionInfo(DateTimeOffset startTime = default, DateTimeOffset? endTime = null, string poolId = null, BatchJobSchedulingError schedulingError = null, string terminationReason = null)
        {
            return new BatchJobExecutionInfo(
                startTime,
                endTime,
                poolId,
                schedulingError,
                terminationReason,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchJobSchedulingError"/>. </summary>
        /// <param name="category"></param>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <param name="details"></param>
        /// <returns> A new <see cref="Batch.BatchJobSchedulingError"/> instance for mocking. </returns>
        public static BatchJobSchedulingError BatchJobSchedulingError(ErrorCategory category = default, string code = null, string message = null, IEnumerable<NameValuePair> details = null)
        {
            details ??= new List<NameValuePair>();

            return new BatchJobSchedulingError(category, code, message, details?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchJobStatistics"/>. </summary>
        /// <param name="url"></param>
        /// <param name="startTime"></param>
        /// <param name="lastUpdateTime"></param>
        /// <param name="userCpuTime"></param>
        /// <param name="kernelCpuTime"></param>
        /// <param name="wallClockTime"></param>
        /// <param name="readIOps"></param>
        /// <param name="writeIOps"></param>
        /// <param name="readIOGiB"></param>
        /// <param name="writeIOGiB"></param>
        /// <param name="numSucceededTasks"></param>
        /// <param name="numFailedTasks"></param>
        /// <param name="numTaskRetries"></param>
        /// <param name="waitTime"></param>
        /// <returns> A new <see cref="Batch.BatchJobStatistics"/> instance for mocking. </returns>
        public static BatchJobStatistics BatchJobStatistics(string url = null, DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, TimeSpan userCpuTime = default, TimeSpan kernelCpuTime = default, TimeSpan wallClockTime = default, long readIOps = default, long writeIOps = default, float readIOGiB = default, float writeIOGiB = default, long numSucceededTasks = default, long numFailedTasks = default, long numTaskRetries = default, TimeSpan waitTime = default)
        {
            return new BatchJobStatistics(
                url,
                startTime,
                lastUpdateTime,
                userCpuTime,
                kernelCpuTime,
                wallClockTime,
                readIOps,
                writeIOps,
                readIOGiB,
                writeIOGiB,
                numSucceededTasks,
                numFailedTasks,
                numTaskRetries,
                waitTime,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchJobCreateContent"/>. </summary>
        /// <param name="id"></param>
        /// <param name="displayName"></param>
        /// <param name="usesTaskDependencies"></param>
        /// <param name="priority"></param>
        /// <param name="allowTaskPreemption"></param>
        /// <param name="maxParallelTasks"></param>
        /// <param name="constraints"></param>
        /// <param name="jobManagerTask"></param>
        /// <param name="jobPreparationTask"></param>
        /// <param name="jobReleaseTask"></param>
        /// <param name="commonEnvironmentSettings"></param>
        /// <param name="poolInfo"></param>
        /// <param name="onAllTasksComplete"></param>
        /// <param name="onTaskFailure"></param>
        /// <param name="networkConfiguration"></param>
        /// <param name="metadata"></param>
        /// <returns> A new <see cref="Batch.BatchJobCreateContent"/> instance for mocking. </returns>
        public static BatchJobCreateContent BatchJobCreateContent(string id = null, string displayName = null, bool? usesTaskDependencies = null, int? priority = null, bool? allowTaskPreemption = null, int? maxParallelTasks = null, BatchJobConstraints constraints = null, BatchJobManagerTask jobManagerTask = null, BatchJobPreparationTask jobPreparationTask = null, BatchJobReleaseTask jobReleaseTask = null, IEnumerable<EnvironmentSetting> commonEnvironmentSettings = null, BatchPoolInfo poolInfo = null, OnAllBatchTasksComplete? onAllTasksComplete = null, OnBatchTaskFailure? onTaskFailure = null, BatchJobNetworkConfiguration networkConfiguration = null, IEnumerable<MetadataItem> metadata = null)
        {
            commonEnvironmentSettings ??= new List<EnvironmentSetting>();
            metadata ??= new List<MetadataItem>();

            return new BatchJobCreateContent(
                id,
                displayName,
                usesTaskDependencies,
                priority,
                allowTaskPreemption,
                maxParallelTasks,
                constraints,
                jobManagerTask,
                jobPreparationTask,
                jobReleaseTask,
                commonEnvironmentSettings?.ToList(),
                poolInfo,
                onAllTasksComplete,
                onTaskFailure,
                networkConfiguration,
                metadata?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchJobPreparationAndReleaseTaskStatus"/>. </summary>
        /// <param name="poolId"></param>
        /// <param name="nodeId"></param>
        /// <param name="nodeUrl"></param>
        /// <param name="jobPreparationTaskExecutionInfo"></param>
        /// <param name="jobReleaseTaskExecutionInfo"></param>
        /// <returns> A new <see cref="Batch.BatchJobPreparationAndReleaseTaskStatus"/> instance for mocking. </returns>
        public static BatchJobPreparationAndReleaseTaskStatus BatchJobPreparationAndReleaseTaskStatus(string poolId = null, string nodeId = null, string nodeUrl = null, BatchJobPreparationTaskExecutionInfo jobPreparationTaskExecutionInfo = null, BatchJobReleaseTaskExecutionInfo jobReleaseTaskExecutionInfo = null)
        {
            return new BatchJobPreparationAndReleaseTaskStatus(
                poolId,
                nodeId,
                nodeUrl,
                jobPreparationTaskExecutionInfo,
                jobReleaseTaskExecutionInfo,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchJobPreparationTaskExecutionInfo"/>. </summary>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="state"></param>
        /// <param name="taskRootDirectory"></param>
        /// <param name="taskRootDirectoryUrl"></param>
        /// <param name="exitCode"></param>
        /// <param name="containerInfo"></param>
        /// <param name="failureInfo"></param>
        /// <param name="retryCount"></param>
        /// <param name="lastRetryTime"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="Batch.BatchJobPreparationTaskExecutionInfo"/> instance for mocking. </returns>
        public static BatchJobPreparationTaskExecutionInfo BatchJobPreparationTaskExecutionInfo(DateTimeOffset startTime = default, DateTimeOffset? endTime = null, BatchJobPreparationTaskState state = default, string taskRootDirectory = null, string taskRootDirectoryUrl = null, int? exitCode = null, BatchTaskContainerExecutionInfo containerInfo = null, BatchTaskFailureInfo failureInfo = null, int retryCount = default, DateTimeOffset? lastRetryTime = null, BatchTaskExecutionResult? result = null)
        {
            return new BatchJobPreparationTaskExecutionInfo(
                startTime,
                endTime,
                state,
                taskRootDirectory,
                taskRootDirectoryUrl,
                exitCode,
                containerInfo,
                failureInfo,
                retryCount,
                lastRetryTime,
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchTaskContainerExecutionInfo"/>. </summary>
        /// <param name="containerId"></param>
        /// <param name="state"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Batch.BatchTaskContainerExecutionInfo"/> instance for mocking. </returns>
        public static BatchTaskContainerExecutionInfo BatchTaskContainerExecutionInfo(string containerId = null, string state = null, string error = null)
        {
            return new BatchTaskContainerExecutionInfo(containerId, state, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchTaskFailureInfo"/>. </summary>
        /// <param name="category"></param>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <param name="details"></param>
        /// <returns> A new <see cref="Batch.BatchTaskFailureInfo"/> instance for mocking. </returns>
        public static BatchTaskFailureInfo BatchTaskFailureInfo(ErrorCategory category = default, string code = null, string message = null, IEnumerable<NameValuePair> details = null)
        {
            details ??= new List<NameValuePair>();

            return new BatchTaskFailureInfo(category, code, message, details?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchJobReleaseTaskExecutionInfo"/>. </summary>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="state"></param>
        /// <param name="taskRootDirectory"></param>
        /// <param name="taskRootDirectoryUrl"></param>
        /// <param name="exitCode"></param>
        /// <param name="containerInfo"></param>
        /// <param name="failureInfo"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="Batch.BatchJobReleaseTaskExecutionInfo"/> instance for mocking. </returns>
        public static BatchJobReleaseTaskExecutionInfo BatchJobReleaseTaskExecutionInfo(DateTimeOffset startTime = default, DateTimeOffset? endTime = null, BatchJobReleaseTaskState state = default, string taskRootDirectory = null, string taskRootDirectoryUrl = null, int? exitCode = null, BatchTaskContainerExecutionInfo containerInfo = null, BatchTaskFailureInfo failureInfo = null, BatchTaskExecutionResult? result = null)
        {
            return new BatchJobReleaseTaskExecutionInfo(
                startTime,
                endTime,
                state,
                taskRootDirectory,
                taskRootDirectoryUrl,
                exitCode,
                containerInfo,
                failureInfo,
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchTaskCountsResult"/>. </summary>
        /// <param name="taskCounts"></param>
        /// <param name="taskSlotCounts"></param>
        /// <returns> A new <see cref="Batch.BatchTaskCountsResult"/> instance for mocking. </returns>
        public static BatchTaskCountsResult BatchTaskCountsResult(BatchTaskCounts taskCounts = null, BatchTaskSlotCounts taskSlotCounts = null)
        {
            return new BatchTaskCountsResult(taskCounts, taskSlotCounts, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchTaskCounts"/>. </summary>
        /// <param name="active"></param>
        /// <param name="running"></param>
        /// <param name="completed"></param>
        /// <param name="succeeded"></param>
        /// <param name="failed"></param>
        /// <returns> A new <see cref="Batch.BatchTaskCounts"/> instance for mocking. </returns>
        public static BatchTaskCounts BatchTaskCounts(int active = default, int running = default, int completed = default, int succeeded = default, int failed = default)
        {
            return new BatchTaskCounts(
                active,
                running,
                completed,
                succeeded,
                failed,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchTaskSlotCounts"/>. </summary>
        /// <param name="active"></param>
        /// <param name="running"></param>
        /// <param name="completed"></param>
        /// <param name="succeeded"></param>
        /// <param name="failed"></param>
        /// <returns> A new <see cref="Batch.BatchTaskSlotCounts"/> instance for mocking. </returns>
        public static BatchTaskSlotCounts BatchTaskSlotCounts(int active = default, int running = default, int completed = default, int succeeded = default, int failed = default)
        {
            return new BatchTaskSlotCounts(
                active,
                running,
                completed,
                succeeded,
                failed,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchJobSchedule"/>. </summary>
        /// <param name="id"></param>
        /// <param name="displayName"></param>
        /// <param name="url"></param>
        /// <param name="eTag"></param>
        /// <param name="lastModified"></param>
        /// <param name="creationTime"></param>
        /// <param name="state"></param>
        /// <param name="stateTransitionTime"></param>
        /// <param name="previousState"></param>
        /// <param name="previousStateTransitionTime"></param>
        /// <param name="schedule"></param>
        /// <param name="jobSpecification"></param>
        /// <param name="executionInfo"></param>
        /// <param name="metadata"></param>
        /// <param name="stats"></param>
        /// <returns> A new <see cref="Batch.BatchJobSchedule"/> instance for mocking. </returns>
        public static BatchJobSchedule BatchJobSchedule(string id = null, string displayName = null, string url = null, string eTag = null, DateTimeOffset? lastModified = null, DateTimeOffset? creationTime = null, BatchJobScheduleState? state = null, DateTimeOffset? stateTransitionTime = null, BatchJobScheduleState? previousState = null, DateTimeOffset? previousStateTransitionTime = null, BatchJobScheduleConfiguration schedule = null, BatchJobSpecification jobSpecification = null, BatchJobScheduleExecutionInfo executionInfo = null, IEnumerable<MetadataItem> metadata = null, BatchJobScheduleStatistics stats = null)
        {
            metadata ??= new List<MetadataItem>();

            return new BatchJobSchedule(
                id,
                displayName,
                url,
                eTag,
                lastModified,
                creationTime,
                state,
                stateTransitionTime,
                previousState,
                previousStateTransitionTime,
                schedule,
                jobSpecification,
                executionInfo,
                metadata?.ToList(),
                stats,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchJobScheduleExecutionInfo"/>. </summary>
        /// <param name="nextRunTime"></param>
        /// <param name="recentJob"></param>
        /// <param name="endTime"></param>
        /// <returns> A new <see cref="Batch.BatchJobScheduleExecutionInfo"/> instance for mocking. </returns>
        public static BatchJobScheduleExecutionInfo BatchJobScheduleExecutionInfo(DateTimeOffset? nextRunTime = null, RecentBatchJob recentJob = null, DateTimeOffset? endTime = null)
        {
            return new BatchJobScheduleExecutionInfo(nextRunTime, recentJob, endTime, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.RecentBatchJob"/>. </summary>
        /// <param name="id"></param>
        /// <param name="url"></param>
        /// <returns> A new <see cref="Batch.RecentBatchJob"/> instance for mocking. </returns>
        public static RecentBatchJob RecentBatchJob(string id = null, string url = null)
        {
            return new RecentBatchJob(id, url, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchJobScheduleStatistics"/>. </summary>
        /// <param name="url"></param>
        /// <param name="startTime"></param>
        /// <param name="lastUpdateTime"></param>
        /// <param name="userCpuTime"></param>
        /// <param name="kernelCpuTime"></param>
        /// <param name="wallClockTime"></param>
        /// <param name="readIOps"></param>
        /// <param name="writeIOps"></param>
        /// <param name="readIOGiB"></param>
        /// <param name="writeIOGiB"></param>
        /// <param name="numSucceededTasks"></param>
        /// <param name="numFailedTasks"></param>
        /// <param name="numTaskRetries"></param>
        /// <param name="waitTime"></param>
        /// <returns> A new <see cref="Batch.BatchJobScheduleStatistics"/> instance for mocking. </returns>
        public static BatchJobScheduleStatistics BatchJobScheduleStatistics(string url = null, DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, TimeSpan userCpuTime = default, TimeSpan kernelCpuTime = default, TimeSpan wallClockTime = default, long readIOps = default, long writeIOps = default, float readIOGiB = default, float writeIOGiB = default, long numSucceededTasks = default, long numFailedTasks = default, long numTaskRetries = default, TimeSpan waitTime = default)
        {
            return new BatchJobScheduleStatistics(
                url,
                startTime,
                lastUpdateTime,
                userCpuTime,
                kernelCpuTime,
                wallClockTime,
                readIOps,
                writeIOps,
                readIOGiB,
                writeIOGiB,
                numSucceededTasks,
                numFailedTasks,
                numTaskRetries,
                waitTime,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchJobScheduleCreateContent"/>. </summary>
        /// <param name="id"></param>
        /// <param name="displayName"></param>
        /// <param name="schedule"></param>
        /// <param name="jobSpecification"></param>
        /// <param name="metadata"></param>
        /// <returns> A new <see cref="Batch.BatchJobScheduleCreateContent"/> instance for mocking. </returns>
        public static BatchJobScheduleCreateContent BatchJobScheduleCreateContent(string id = null, string displayName = null, BatchJobScheduleConfiguration schedule = null, BatchJobSpecification jobSpecification = null, IEnumerable<MetadataItem> metadata = null)
        {
            metadata ??= new List<MetadataItem>();

            return new BatchJobScheduleCreateContent(
                id,
                displayName,
                schedule,
                jobSpecification,
                metadata?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchTaskCreateContent"/>. </summary>
        /// <param name="id"></param>
        /// <param name="displayName"></param>
        /// <param name="exitConditions"></param>
        /// <param name="commandLine"></param>
        /// <param name="containerSettings"></param>
        /// <param name="resourceFiles"></param>
        /// <param name="outputFiles"></param>
        /// <param name="environmentSettings"></param>
        /// <param name="affinityInfo"></param>
        /// <param name="constraints"></param>
        /// <param name="requiredSlots"></param>
        /// <param name="userIdentity"></param>
        /// <param name="multiInstanceSettings"></param>
        /// <param name="dependsOn"></param>
        /// <param name="applicationPackageReferences"></param>
        /// <param name="authenticationTokenSettings"></param>
        /// <returns> A new <see cref="Batch.BatchTaskCreateContent"/> instance for mocking. </returns>
        public static BatchTaskCreateContent BatchTaskCreateContent(string id = null, string displayName = null, ExitConditions exitConditions = null, string commandLine = null, BatchTaskContainerSettings containerSettings = null, IEnumerable<ResourceFile> resourceFiles = null, IEnumerable<OutputFile> outputFiles = null, IEnumerable<EnvironmentSetting> environmentSettings = null, AffinityInfo affinityInfo = null, BatchTaskConstraints constraints = null, int? requiredSlots = null, UserIdentity userIdentity = null, MultiInstanceSettings multiInstanceSettings = null, BatchTaskDependencies dependsOn = null, IEnumerable<BatchApplicationPackageReference> applicationPackageReferences = null, AuthenticationTokenSettings authenticationTokenSettings = null)
        {
            resourceFiles ??= new List<ResourceFile>();
            outputFiles ??= new List<OutputFile>();
            environmentSettings ??= new List<EnvironmentSetting>();
            applicationPackageReferences ??= new List<BatchApplicationPackageReference>();

            return new BatchTaskCreateContent(
                id,
                displayName,
                exitConditions,
                commandLine,
                containerSettings,
                resourceFiles?.ToList(),
                outputFiles?.ToList(),
                environmentSettings?.ToList(),
                affinityInfo,
                constraints,
                requiredSlots,
                userIdentity,
                multiInstanceSettings,
                dependsOn,
                applicationPackageReferences?.ToList(),
                authenticationTokenSettings,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchTask"/>. </summary>
        /// <param name="id"></param>
        /// <param name="displayName"></param>
        /// <param name="url"></param>
        /// <param name="eTag"></param>
        /// <param name="lastModified"></param>
        /// <param name="creationTime"></param>
        /// <param name="exitConditions"></param>
        /// <param name="state"></param>
        /// <param name="stateTransitionTime"></param>
        /// <param name="previousState"></param>
        /// <param name="previousStateTransitionTime"></param>
        /// <param name="commandLine"></param>
        /// <param name="containerSettings"></param>
        /// <param name="resourceFiles"></param>
        /// <param name="outputFiles"></param>
        /// <param name="environmentSettings"></param>
        /// <param name="affinityInfo"></param>
        /// <param name="constraints"></param>
        /// <param name="requiredSlots"></param>
        /// <param name="userIdentity"></param>
        /// <param name="executionInfo"></param>
        /// <param name="nodeInfo"></param>
        /// <param name="multiInstanceSettings"></param>
        /// <param name="stats"></param>
        /// <param name="dependsOn"></param>
        /// <param name="applicationPackageReferences"></param>
        /// <param name="authenticationTokenSettings"></param>
        /// <returns> A new <see cref="Batch.BatchTask"/> instance for mocking. </returns>
        public static BatchTask BatchTask(string id = null, string displayName = null, string url = null, string eTag = null, DateTimeOffset? lastModified = null, DateTimeOffset? creationTime = null, ExitConditions exitConditions = null, BatchTaskState? state = null, DateTimeOffset? stateTransitionTime = null, BatchTaskState? previousState = null, DateTimeOffset? previousStateTransitionTime = null, string commandLine = null, BatchTaskContainerSettings containerSettings = null, IEnumerable<ResourceFile> resourceFiles = null, IEnumerable<OutputFile> outputFiles = null, IEnumerable<EnvironmentSetting> environmentSettings = null, AffinityInfo affinityInfo = null, BatchTaskConstraints constraints = null, int? requiredSlots = null, UserIdentity userIdentity = null, BatchTaskExecutionInfo executionInfo = null, BatchNodeInfo nodeInfo = null, MultiInstanceSettings multiInstanceSettings = null, BatchTaskStatistics stats = null, BatchTaskDependencies dependsOn = null, IEnumerable<BatchApplicationPackageReference> applicationPackageReferences = null, AuthenticationTokenSettings authenticationTokenSettings = null)
        {
            resourceFiles ??= new List<ResourceFile>();
            outputFiles ??= new List<OutputFile>();
            environmentSettings ??= new List<EnvironmentSetting>();
            applicationPackageReferences ??= new List<BatchApplicationPackageReference>();

            return new BatchTask(
                id,
                displayName,
                url,
                eTag,
                lastModified,
                creationTime,
                exitConditions,
                state,
                stateTransitionTime,
                previousState,
                previousStateTransitionTime,
                commandLine,
                containerSettings,
                resourceFiles?.ToList(),
                outputFiles?.ToList(),
                environmentSettings?.ToList(),
                affinityInfo,
                constraints,
                requiredSlots,
                userIdentity,
                executionInfo,
                nodeInfo,
                multiInstanceSettings,
                stats,
                dependsOn,
                applicationPackageReferences?.ToList(),
                authenticationTokenSettings,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchTaskExecutionInfo"/>. </summary>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="exitCode"></param>
        /// <param name="containerInfo"></param>
        /// <param name="failureInfo"></param>
        /// <param name="retryCount"></param>
        /// <param name="lastRetryTime"></param>
        /// <param name="requeueCount"></param>
        /// <param name="lastRequeueTime"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="Batch.BatchTaskExecutionInfo"/> instance for mocking. </returns>
        public static BatchTaskExecutionInfo BatchTaskExecutionInfo(DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, int? exitCode = null, BatchTaskContainerExecutionInfo containerInfo = null, BatchTaskFailureInfo failureInfo = null, int retryCount = default, DateTimeOffset? lastRetryTime = null, int requeueCount = default, DateTimeOffset? lastRequeueTime = null, BatchTaskExecutionResult? result = null)
        {
            return new BatchTaskExecutionInfo(
                startTime,
                endTime,
                exitCode,
                containerInfo,
                failureInfo,
                retryCount,
                lastRetryTime,
                requeueCount,
                lastRequeueTime,
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchNodeInfo"/>. </summary>
        /// <param name="affinityId"></param>
        /// <param name="nodeUrl"></param>
        /// <param name="poolId"></param>
        /// <param name="nodeId"></param>
        /// <param name="taskRootDirectory"></param>
        /// <param name="taskRootDirectoryUrl"></param>
        /// <returns> A new <see cref="Batch.BatchNodeInfo"/> instance for mocking. </returns>
        public static BatchNodeInfo BatchNodeInfo(string affinityId = null, string nodeUrl = null, string poolId = null, string nodeId = null, string taskRootDirectory = null, string taskRootDirectoryUrl = null)
        {
            return new BatchNodeInfo(
                affinityId,
                nodeUrl,
                poolId,
                nodeId,
                taskRootDirectory,
                taskRootDirectoryUrl,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchTaskStatistics"/>. </summary>
        /// <param name="url"></param>
        /// <param name="startTime"></param>
        /// <param name="lastUpdateTime"></param>
        /// <param name="userCpuTime"></param>
        /// <param name="kernelCpuTime"></param>
        /// <param name="wallClockTime"></param>
        /// <param name="readIOps"></param>
        /// <param name="writeIOps"></param>
        /// <param name="readIOGiB"></param>
        /// <param name="writeIOGiB"></param>
        /// <param name="waitTime"></param>
        /// <returns> A new <see cref="Batch.BatchTaskStatistics"/> instance for mocking. </returns>
        public static BatchTaskStatistics BatchTaskStatistics(string url = null, DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, TimeSpan userCpuTime = default, TimeSpan kernelCpuTime = default, TimeSpan wallClockTime = default, long readIOps = default, long writeIOps = default, float readIOGiB = default, float writeIOGiB = default, TimeSpan waitTime = default)
        {
            return new BatchTaskStatistics(
                url,
                startTime,
                lastUpdateTime,
                userCpuTime,
                kernelCpuTime,
                wallClockTime,
                readIOps,
                writeIOps,
                readIOGiB,
                writeIOGiB,
                waitTime,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchTaskAddCollectionResult"/>. </summary>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Batch.BatchTaskAddCollectionResult"/> instance for mocking. </returns>
        public static BatchTaskAddCollectionResult BatchTaskAddCollectionResult(IEnumerable<BatchTaskAddResult> value = null)
        {
            value ??= new List<BatchTaskAddResult>();

            return new BatchTaskAddCollectionResult(value?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchTaskAddResult"/>. </summary>
        /// <param name="status"></param>
        /// <param name="taskId"></param>
        /// <param name="eTag"></param>
        /// <param name="lastModified"></param>
        /// <param name="location"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Batch.BatchTaskAddResult"/> instance for mocking. </returns>
        public static BatchTaskAddResult BatchTaskAddResult(BatchTaskAddStatus status = default, string taskId = null, string eTag = null, DateTimeOffset? lastModified = null, string location = null, BatchError error = null)
        {
            return new BatchTaskAddResult(
                status,
                taskId,
                eTag,
                lastModified,
                location,
                error,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchSubtask"/>. </summary>
        /// <param name="id"></param>
        /// <param name="nodeInfo"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="exitCode"></param>
        /// <param name="containerInfo"></param>
        /// <param name="failureInfo"></param>
        /// <param name="state"></param>
        /// <param name="stateTransitionTime"></param>
        /// <param name="previousState"></param>
        /// <param name="previousStateTransitionTime"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="Batch.BatchSubtask"/> instance for mocking. </returns>
        public static BatchSubtask BatchSubtask(int? id = null, BatchNodeInfo nodeInfo = null, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, int? exitCode = null, BatchTaskContainerExecutionInfo containerInfo = null, BatchTaskFailureInfo failureInfo = null, BatchSubtaskState? state = null, DateTimeOffset? stateTransitionTime = null, BatchSubtaskState? previousState = null, DateTimeOffset? previousStateTransitionTime = null, BatchTaskExecutionResult? result = null)
        {
            return new BatchSubtask(
                id,
                nodeInfo,
                startTime,
                endTime,
                exitCode,
                containerInfo,
                failureInfo,
                state,
                stateTransitionTime,
                previousState,
                previousStateTransitionTime,
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchNodeFile"/>. </summary>
        /// <param name="name"></param>
        /// <param name="url"></param>
        /// <param name="isDirectory"></param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Batch.BatchNodeFile"/> instance for mocking. </returns>
        public static BatchNodeFile BatchNodeFile(string name = null, string url = null, bool? isDirectory = null, FileProperties properties = null)
        {
            return new BatchNodeFile(name, url, isDirectory, properties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.FileProperties"/>. </summary>
        /// <param name="creationTime"></param>
        /// <param name="lastModified"></param>
        /// <param name="contentLength"></param>
        /// <param name="contentType"></param>
        /// <param name="fileMode"></param>
        /// <returns> A new <see cref="Batch.FileProperties"/> instance for mocking. </returns>
        public static FileProperties FileProperties(DateTimeOffset? creationTime = null, DateTimeOffset lastModified = default, long contentLength = default, string contentType = null, string fileMode = null)
        {
            return new FileProperties(
                creationTime,
                lastModified,
                contentLength,
                contentType,
                fileMode,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchNodeUserCreateContent"/>. </summary>
        /// <param name="name"></param>
        /// <param name="isAdmin"></param>
        /// <param name="expiryTime"></param>
        /// <param name="password"></param>
        /// <param name="sshPublicKey"></param>
        /// <returns> A new <see cref="Batch.BatchNodeUserCreateContent"/> instance for mocking. </returns>
        public static BatchNodeUserCreateContent BatchNodeUserCreateContent(string name = null, bool? isAdmin = null, DateTimeOffset? expiryTime = null, string password = null, string sshPublicKey = null)
        {
            return new BatchNodeUserCreateContent(
                name,
                isAdmin,
                expiryTime,
                password,
                sshPublicKey,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchNode"/>. </summary>
        /// <param name="id"></param>
        /// <param name="url"></param>
        /// <param name="state"></param>
        /// <param name="schedulingState"></param>
        /// <param name="stateTransitionTime"></param>
        /// <param name="lastBootTime"></param>
        /// <param name="allocationTime"></param>
        /// <param name="ipAddress"></param>
        /// <param name="affinityId"></param>
        /// <param name="vmSize"></param>
        /// <param name="totalTasksRun"></param>
        /// <param name="runningTasksCount"></param>
        /// <param name="runningTaskSlotsCount"></param>
        /// <param name="totalTasksSucceeded"></param>
        /// <param name="recentTasks"></param>
        /// <param name="startTask"></param>
        /// <param name="startTaskInfo"></param>
        /// <param name="errors"></param>
        /// <param name="isDedicated"></param>
        /// <param name="endpointConfiguration"></param>
        /// <param name="nodeAgentInfo"></param>
        /// <param name="virtualMachineInfo"></param>
        /// <returns> A new <see cref="Batch.BatchNode"/> instance for mocking. </returns>
        public static BatchNode BatchNode(string id = null, string url = null, BatchNodeState? state = null, SchedulingState? schedulingState = null, DateTimeOffset? stateTransitionTime = null, DateTimeOffset? lastBootTime = null, DateTimeOffset? allocationTime = null, string ipAddress = null, string affinityId = null, string vmSize = null, int? totalTasksRun = null, int? runningTasksCount = null, int? runningTaskSlotsCount = null, int? totalTasksSucceeded = null, IEnumerable<BatchTaskInfo> recentTasks = null, BatchStartTask startTask = null, BatchStartTaskInfo startTaskInfo = null, IEnumerable<BatchNodeError> errors = null, bool? isDedicated = null, BatchNodeEndpointConfiguration endpointConfiguration = null, BatchNodeAgentInfo nodeAgentInfo = null, VirtualMachineInfo virtualMachineInfo = null)
        {
            recentTasks ??= new List<BatchTaskInfo>();
            errors ??= new List<BatchNodeError>();

            return new BatchNode(
                id,
                url,
                state,
                schedulingState,
                stateTransitionTime,
                lastBootTime,
                allocationTime,
                ipAddress,
                affinityId,
                vmSize,
                totalTasksRun,
                runningTasksCount,
                runningTaskSlotsCount,
                totalTasksSucceeded,
                recentTasks?.ToList(),
                startTask,
                startTaskInfo,
                errors?.ToList(),
                isDedicated,
                endpointConfiguration,
                nodeAgentInfo,
                virtualMachineInfo,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchTaskInfo"/>. </summary>
        /// <param name="taskUrl"></param>
        /// <param name="jobId"></param>
        /// <param name="taskId"></param>
        /// <param name="subtaskId"></param>
        /// <param name="taskState"></param>
        /// <param name="executionInfo"></param>
        /// <returns> A new <see cref="Batch.BatchTaskInfo"/> instance for mocking. </returns>
        public static BatchTaskInfo BatchTaskInfo(string taskUrl = null, string jobId = null, string taskId = null, int? subtaskId = null, BatchTaskState taskState = default, BatchTaskExecutionInfo executionInfo = null)
        {
            return new BatchTaskInfo(
                taskUrl,
                jobId,
                taskId,
                subtaskId,
                taskState,
                executionInfo,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchStartTaskInfo"/>. </summary>
        /// <param name="state"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="exitCode"></param>
        /// <param name="containerInfo"></param>
        /// <param name="failureInfo"></param>
        /// <param name="retryCount"></param>
        /// <param name="lastRetryTime"></param>
        /// <param name="result"></param>
        /// <returns> A new <see cref="Batch.BatchStartTaskInfo"/> instance for mocking. </returns>
        public static BatchStartTaskInfo BatchStartTaskInfo(BatchStartTaskState state = default, DateTimeOffset startTime = default, DateTimeOffset? endTime = null, int? exitCode = null, BatchTaskContainerExecutionInfo containerInfo = null, BatchTaskFailureInfo failureInfo = null, int retryCount = default, DateTimeOffset? lastRetryTime = null, BatchTaskExecutionResult? result = null)
        {
            return new BatchStartTaskInfo(
                state,
                startTime,
                endTime,
                exitCode,
                containerInfo,
                failureInfo,
                retryCount,
                lastRetryTime,
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchNodeError"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <param name="errorDetails"></param>
        /// <returns> A new <see cref="Batch.BatchNodeError"/> instance for mocking. </returns>
        public static BatchNodeError BatchNodeError(string code = null, string message = null, IEnumerable<NameValuePair> errorDetails = null)
        {
            errorDetails ??= new List<NameValuePair>();

            return new BatchNodeError(code, message, errorDetails?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchNodeEndpointConfiguration"/>. </summary>
        /// <param name="inboundEndpoints"></param>
        /// <returns> A new <see cref="Batch.BatchNodeEndpointConfiguration"/> instance for mocking. </returns>
        public static BatchNodeEndpointConfiguration BatchNodeEndpointConfiguration(IEnumerable<InboundEndpoint> inboundEndpoints = null)
        {
            inboundEndpoints ??= new List<InboundEndpoint>();

            return new BatchNodeEndpointConfiguration(inboundEndpoints?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.InboundEndpoint"/>. </summary>
        /// <param name="name"></param>
        /// <param name="protocol"></param>
        /// <param name="publicIpAddress"></param>
        /// <param name="publicFQDN"></param>
        /// <param name="frontendPort"></param>
        /// <param name="backendPort"></param>
        /// <returns> A new <see cref="Batch.InboundEndpoint"/> instance for mocking. </returns>
        public static InboundEndpoint InboundEndpoint(string name = null, InboundEndpointProtocol protocol = default, string publicIpAddress = null, string publicFQDN = null, int frontendPort = default, int backendPort = default)
        {
            return new InboundEndpoint(
                name,
                protocol,
                publicIpAddress,
                publicFQDN,
                frontendPort,
                backendPort,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchNodeAgentInfo"/>. </summary>
        /// <param name="version"></param>
        /// <param name="lastUpdateTime"></param>
        /// <returns> A new <see cref="Batch.BatchNodeAgentInfo"/> instance for mocking. </returns>
        public static BatchNodeAgentInfo BatchNodeAgentInfo(string version = null, DateTimeOffset lastUpdateTime = default)
        {
            return new BatchNodeAgentInfo(version, lastUpdateTime, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.VirtualMachineInfo"/>. </summary>
        /// <param name="imageReference"></param>
        /// <param name="scaleSetVmResourceId"></param>
        /// <returns> A new <see cref="Batch.VirtualMachineInfo"/> instance for mocking. </returns>
        public static VirtualMachineInfo VirtualMachineInfo(ImageReference imageReference = null, string scaleSetVmResourceId = null)
        {
            return new VirtualMachineInfo(imageReference, scaleSetVmResourceId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchNodeRemoteLoginSettings"/>. </summary>
        /// <param name="remoteLoginIpAddress"></param>
        /// <param name="remoteLoginPort"></param>
        /// <returns> A new <see cref="Batch.BatchNodeRemoteLoginSettings"/> instance for mocking. </returns>
        public static BatchNodeRemoteLoginSettings BatchNodeRemoteLoginSettings(string remoteLoginIpAddress = null, int remoteLoginPort = default)
        {
            return new BatchNodeRemoteLoginSettings(remoteLoginIpAddress, remoteLoginPort, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.UploadBatchServiceLogsContent"/>. </summary>
        /// <param name="containerUrl"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="identityReference"></param>
        /// <returns> A new <see cref="Batch.UploadBatchServiceLogsContent"/> instance for mocking. </returns>
        public static UploadBatchServiceLogsContent UploadBatchServiceLogsContent(string containerUrl = null, DateTimeOffset startTime = default, DateTimeOffset? endTime = null, BatchNodeIdentityReference identityReference = null)
        {
            return new UploadBatchServiceLogsContent(containerUrl, startTime, endTime, identityReference, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.UploadBatchServiceLogsResult"/>. </summary>
        /// <param name="virtualDirectoryName"></param>
        /// <param name="numberOfFilesUploaded"></param>
        /// <returns> A new <see cref="Batch.UploadBatchServiceLogsResult"/> instance for mocking. </returns>
        public static UploadBatchServiceLogsResult UploadBatchServiceLogsResult(string virtualDirectoryName = null, int numberOfFilesUploaded = default)
        {
            return new UploadBatchServiceLogsResult(virtualDirectoryName, numberOfFilesUploaded, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.BatchNodeVMExtension"/>. </summary>
        /// <param name="provisioningState"></param>
        /// <param name="vmExtension"></param>
        /// <param name="instanceView"></param>
        /// <returns> A new <see cref="Batch.BatchNodeVMExtension"/> instance for mocking. </returns>
        public static BatchNodeVMExtension BatchNodeVMExtension(string provisioningState = null, VMExtension vmExtension = null, VMExtensionInstanceView instanceView = null)
        {
            return new BatchNodeVMExtension(provisioningState, vmExtension, instanceView, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.VMExtensionInstanceView"/>. </summary>
        /// <param name="name"></param>
        /// <param name="statuses"></param>
        /// <param name="subStatuses"></param>
        /// <returns> A new <see cref="Batch.VMExtensionInstanceView"/> instance for mocking. </returns>
        public static VMExtensionInstanceView VMExtensionInstanceView(string name = null, IEnumerable<InstanceViewStatus> statuses = null, IEnumerable<InstanceViewStatus> subStatuses = null)
        {
            statuses ??= new List<InstanceViewStatus>();
            subStatuses ??= new List<InstanceViewStatus>();

            return new VMExtensionInstanceView(name, statuses?.ToList(), subStatuses?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Batch.InstanceViewStatus"/>. </summary>
        /// <param name="code"></param>
        /// <param name="displayStatus"></param>
        /// <param name="level"></param>
        /// <param name="message"></param>
        /// <param name="time"></param>
        /// <returns> A new <see cref="Batch.InstanceViewStatus"/> instance for mocking. </returns>
        public static InstanceViewStatus InstanceViewStatus(string code = null, string displayStatus = null, StatusLevelTypes? level = null, string message = null, DateTimeOffset? time = null)
        {
            return new InstanceViewStatus(
                code,
                displayStatus,
                level,
                message,
                time,
                serializedAdditionalRawData: null);
        }
    }
}
