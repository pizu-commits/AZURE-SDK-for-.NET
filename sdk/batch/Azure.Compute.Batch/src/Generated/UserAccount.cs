// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The UserAccount. </summary>
    public partial class UserAccount
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="UserAccount"/>. </summary>
        /// <param name="name"></param>
        /// <param name="password"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="password"/> is null. </exception>
        public UserAccount(string name, string password)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(password, nameof(password));

            Name = name;
            Password = password;
        }

        /// <summary> Initializes a new instance of <see cref="UserAccount"/>. </summary>
        /// <param name="name"></param>
        /// <param name="password"></param>
        /// <param name="elevationLevel"></param>
        /// <param name="linuxUserConfiguration"></param>
        /// <param name="windowsUserConfiguration"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal UserAccount(string name, string password, ElevationLevel? elevationLevel, LinuxUserConfiguration linuxUserConfiguration, WindowsUserConfiguration windowsUserConfiguration, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Password = password;
            ElevationLevel = elevationLevel;
            LinuxUserConfiguration = linuxUserConfiguration;
            WindowsUserConfiguration = windowsUserConfiguration;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="UserAccount"/> for deserialization. </summary>
        internal UserAccount()
        {
        }

        /// <summary> Gets or sets the name. </summary>
        public string Name { get; set; }
        /// <summary> Gets or sets the password. </summary>
        public string Password { get; set; }
        /// <summary> Gets or sets the elevation level. </summary>
        public ElevationLevel? ElevationLevel { get; set; }
        /// <summary> Gets or sets the linux user configuration. </summary>
        public LinuxUserConfiguration LinuxUserConfiguration { get; set; }
        /// <summary> Gets or sets the windows user configuration. </summary>
        public WindowsUserConfiguration WindowsUserConfiguration { get; set; }
    }
}
