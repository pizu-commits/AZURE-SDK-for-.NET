// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Vision.ImageAnalysis
{
    /// <summary> The ImageAnalysisResult. </summary>
    public partial class ImageAnalysisResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ImageAnalysisResult"/>. </summary>
        /// <param name="metadata"></param>
        /// <param name="modelVersion"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="metadata"/> or <paramref name="modelVersion"/> is null. </exception>
        internal ImageAnalysisResult(ImageMetadata metadata, string modelVersion)
        {
            Argument.AssertNotNull(metadata, nameof(metadata));
            Argument.AssertNotNull(modelVersion, nameof(modelVersion));

            Metadata = metadata;
            ModelVersion = modelVersion;
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysisResult"/>. </summary>
        /// <param name="caption"></param>
        /// <param name="denseCaptions"></param>
        /// <param name="metadata"></param>
        /// <param name="modelVersion"></param>
        /// <param name="objects"></param>
        /// <param name="people"></param>
        /// <param name="read"></param>
        /// <param name="smartCrops"></param>
        /// <param name="tags"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ImageAnalysisResult(CaptionResult caption, DenseCaptionsResult denseCaptions, ImageMetadata metadata, string modelVersion, ObjectsResult objects, PeopleResult people, ReadResult read, SmartCropsResult smartCrops, TagsResult tags, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Caption = caption;
            DenseCaptions = denseCaptions;
            Metadata = metadata;
            ModelVersion = modelVersion;
            Objects = objects;
            People = people;
            Read = read;
            SmartCrops = smartCrops;
            Tags = tags;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysisResult"/> for deserialization. </summary>
        internal ImageAnalysisResult()
        {
        }

        /// <summary> Gets the caption. </summary>
        public CaptionResult Caption { get; }
        /// <summary> Gets the dense captions. </summary>
        public DenseCaptionsResult DenseCaptions { get; }
        /// <summary> Gets the metadata. </summary>
        public ImageMetadata Metadata { get; }
        /// <summary> Gets the model version. </summary>
        public string ModelVersion { get; }
        /// <summary> Gets the objects. </summary>
        public ObjectsResult Objects { get; }
        /// <summary> Gets the people. </summary>
        public PeopleResult People { get; }
        /// <summary> Gets the read. </summary>
        public ReadResult Read { get; }
        /// <summary> Gets the smart crops. </summary>
        public SmartCropsResult SmartCrops { get; }
        /// <summary> Gets the tags. </summary>
        public TagsResult Tags { get; }
    }
}
