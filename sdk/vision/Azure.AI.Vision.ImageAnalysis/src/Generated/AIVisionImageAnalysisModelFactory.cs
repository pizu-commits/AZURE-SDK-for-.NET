// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Vision.ImageAnalysis
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIVisionImageAnalysisModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.ImageAnalysisResult"/>. </summary>
        /// <param name="caption"></param>
        /// <param name="denseCaptions"></param>
        /// <param name="metadata"></param>
        /// <param name="modelVersion"></param>
        /// <param name="objects"></param>
        /// <param name="people"></param>
        /// <param name="read"></param>
        /// <param name="smartCrops"></param>
        /// <param name="tags"></param>
        /// <returns> A new <see cref="ImageAnalysis.ImageAnalysisResult"/> instance for mocking. </returns>
        public static ImageAnalysisResult ImageAnalysisResult(CaptionResult caption = null, DenseCaptionsResult denseCaptions = null, ImageMetadata metadata = null, string modelVersion = null, ObjectsResult objects = null, PeopleResult people = null, ReadResult read = null, SmartCropsResult smartCrops = null, TagsResult tags = null)
        {
            return new ImageAnalysisResult(
                caption,
                denseCaptions,
                metadata,
                modelVersion,
                objects,
                people,
                read,
                smartCrops,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.CaptionResult"/>. </summary>
        /// <param name="confidence"></param>
        /// <param name="text"></param>
        /// <returns> A new <see cref="ImageAnalysis.CaptionResult"/> instance for mocking. </returns>
        public static CaptionResult CaptionResult(float confidence = default, string text = null)
        {
            return new CaptionResult(confidence, text, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DenseCaptionsResult"/>. </summary>
        /// <param name="values"></param>
        /// <returns> A new <see cref="ImageAnalysis.DenseCaptionsResult"/> instance for mocking. </returns>
        public static DenseCaptionsResult DenseCaptionsResult(IEnumerable<DenseCaption> values = null)
        {
            values ??= new List<DenseCaption>();

            return new DenseCaptionsResult(values?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DenseCaption"/>. </summary>
        /// <param name="confidence"></param>
        /// <param name="text"></param>
        /// <param name="boundingBox"></param>
        /// <returns> A new <see cref="ImageAnalysis.DenseCaption"/> instance for mocking. </returns>
        public static DenseCaption DenseCaption(float confidence = default, string text = null, ImageBoundingBox boundingBox = null)
        {
            return new DenseCaption(confidence, text, boundingBox, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.ImageBoundingBox"/>. </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <returns> A new <see cref="ImageAnalysis.ImageBoundingBox"/> instance for mocking. </returns>
        public static ImageBoundingBox ImageBoundingBox(int x = default, int y = default, int width = default, int height = default)
        {
            return new ImageBoundingBox(x, y, width, height, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.ImageMetadata"/>. </summary>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <returns> A new <see cref="ImageAnalysis.ImageMetadata"/> instance for mocking. </returns>
        public static ImageMetadata ImageMetadata(int height = default, int width = default)
        {
            return new ImageMetadata(height, width, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.ObjectsResult"/>. </summary>
        /// <param name="values"></param>
        /// <returns> A new <see cref="ImageAnalysis.ObjectsResult"/> instance for mocking. </returns>
        public static ObjectsResult ObjectsResult(IEnumerable<DetectedObject> values = null)
        {
            values ??= new List<DetectedObject>();

            return new ObjectsResult(values?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DetectedObject"/>. </summary>
        /// <param name="boundingBox"></param>
        /// <param name="tags"></param>
        /// <returns> A new <see cref="ImageAnalysis.DetectedObject"/> instance for mocking. </returns>
        public static DetectedObject DetectedObject(ImageBoundingBox boundingBox = null, IEnumerable<DetectedTag> tags = null)
        {
            tags ??= new List<DetectedTag>();

            return new DetectedObject(boundingBox, tags?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DetectedTag"/>. </summary>
        /// <param name="confidence"></param>
        /// <param name="name"></param>
        /// <returns> A new <see cref="ImageAnalysis.DetectedTag"/> instance for mocking. </returns>
        public static DetectedTag DetectedTag(float confidence = default, string name = null)
        {
            return new DetectedTag(confidence, name, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.PeopleResult"/>. </summary>
        /// <param name="values"></param>
        /// <returns> A new <see cref="ImageAnalysis.PeopleResult"/> instance for mocking. </returns>
        public static PeopleResult PeopleResult(IEnumerable<DetectedPerson> values = null)
        {
            values ??= new List<DetectedPerson>();

            return new PeopleResult(values?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DetectedPerson"/>. </summary>
        /// <param name="boundingBox"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="ImageAnalysis.DetectedPerson"/> instance for mocking. </returns>
        public static DetectedPerson DetectedPerson(ImageBoundingBox boundingBox = null, float confidence = default)
        {
            return new DetectedPerson(boundingBox, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.ReadResult"/>. </summary>
        /// <param name="blocks"></param>
        /// <returns> A new <see cref="ImageAnalysis.ReadResult"/> instance for mocking. </returns>
        public static ReadResult ReadResult(IEnumerable<DetectedTextBlock> blocks = null)
        {
            blocks ??= new List<DetectedTextBlock>();

            return new ReadResult(blocks?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DetectedTextBlock"/>. </summary>
        /// <param name="lines"></param>
        /// <returns> A new <see cref="ImageAnalysis.DetectedTextBlock"/> instance for mocking. </returns>
        public static DetectedTextBlock DetectedTextBlock(IEnumerable<DetectedTextLine> lines = null)
        {
            lines ??= new List<DetectedTextLine>();

            return new DetectedTextBlock(lines?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DetectedTextLine"/>. </summary>
        /// <param name="text"></param>
        /// <param name="boundingPolygon"></param>
        /// <param name="words"></param>
        /// <returns> A new <see cref="ImageAnalysis.DetectedTextLine"/> instance for mocking. </returns>
        public static DetectedTextLine DetectedTextLine(string text = null, IEnumerable<ImagePoint> boundingPolygon = null, IEnumerable<DetectedTextWord> words = null)
        {
            boundingPolygon ??= new List<ImagePoint>();
            words ??= new List<DetectedTextWord>();

            return new DetectedTextLine(text, boundingPolygon?.ToList(), words?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.ImagePoint"/>. </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns> A new <see cref="ImageAnalysis.ImagePoint"/> instance for mocking. </returns>
        public static ImagePoint ImagePoint(int x = default, int y = default)
        {
            return new ImagePoint(x, y, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DetectedTextWord"/>. </summary>
        /// <param name="text"></param>
        /// <param name="boundingPolygon"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="ImageAnalysis.DetectedTextWord"/> instance for mocking. </returns>
        public static DetectedTextWord DetectedTextWord(string text = null, IEnumerable<ImagePoint> boundingPolygon = null, float confidence = default)
        {
            boundingPolygon ??= new List<ImagePoint>();

            return new DetectedTextWord(text, boundingPolygon?.ToList(), confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.SmartCropsResult"/>. </summary>
        /// <param name="values"></param>
        /// <returns> A new <see cref="ImageAnalysis.SmartCropsResult"/> instance for mocking. </returns>
        public static SmartCropsResult SmartCropsResult(IEnumerable<CropRegion> values = null)
        {
            values ??= new List<CropRegion>();

            return new SmartCropsResult(values?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.CropRegion"/>. </summary>
        /// <param name="aspectRatio"></param>
        /// <param name="boundingBox"></param>
        /// <returns> A new <see cref="ImageAnalysis.CropRegion"/> instance for mocking. </returns>
        public static CropRegion CropRegion(float aspectRatio = default, ImageBoundingBox boundingBox = null)
        {
            return new CropRegion(aspectRatio, boundingBox, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.TagsResult"/>. </summary>
        /// <param name="values"></param>
        /// <returns> A new <see cref="ImageAnalysis.TagsResult"/> instance for mocking. </returns>
        public static TagsResult TagsResult(IEnumerable<DetectedTag> values = null)
        {
            values ??= new List<DetectedTag>();

            return new TagsResult(values?.ToList(), serializedAdditionalRawData: null);
        }
    }
}
