// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DeveloperHub.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DeveloperHub.Samples
{
    public partial class Sample_WorkflowResource
    {
        // List Workflows
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetWorkflows_ListWorkflows()
        {
            // Generated from example definition: specification/developerhub/resource-manager/Microsoft.DevHub/preview/2024-05-01-preview/examples/Workflow_List.json
            // this example is just showing the usage of "Workflow_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (WorkflowResource item in subscriptionResource.GetWorkflowsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WorkflowData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get Workflow
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetWorkflow()
        {
            // Generated from example definition: specification/developerhub/resource-manager/Microsoft.DevHub/preview/2024-05-01-preview/examples/Workflow_Get.json
            // this example is just showing the usage of "Workflow_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WorkflowResource created on azure
            // for more information of creating WorkflowResource, please refer to the document of WorkflowResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "resourceGroup1";
            string workflowName = "workflow1";
            ResourceIdentifier workflowResourceId = WorkflowResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workflowName);
            WorkflowResource workflow = client.GetWorkflowResource(workflowResourceId);

            // invoke the operation
            WorkflowResource result = await workflow.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkflowData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete Workflow
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteWorkflow()
        {
            // Generated from example definition: specification/developerhub/resource-manager/Microsoft.DevHub/preview/2024-05-01-preview/examples/Workflow_Delete.json
            // this example is just showing the usage of "Workflow_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WorkflowResource created on azure
            // for more information of creating WorkflowResource, please refer to the document of WorkflowResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "resourceGroup1";
            string workflowName = "workflow1";
            ResourceIdentifier workflowResourceId = WorkflowResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workflowName);
            WorkflowResource workflow = client.GetWorkflowResource(workflowResourceId);

            // invoke the operation
            ArmOperation<DeleteWorkflowResult> lro = await workflow.DeleteAsync(WaitUntil.Completed);
            DeleteWorkflowResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // Update Managed Cluster Tags
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateManagedClusterTags()
        {
            // Generated from example definition: specification/developerhub/resource-manager/Microsoft.DevHub/preview/2024-05-01-preview/examples/Workflow_UpdateTags.json
            // this example is just showing the usage of "Workflow_UpdateTags" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WorkflowResource created on azure
            // for more information of creating WorkflowResource, please refer to the document of WorkflowResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "resourceGroup1";
            string workflowName = "workflow1";
            ResourceIdentifier workflowResourceId = WorkflowResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workflowName);
            WorkflowResource workflow = client.GetWorkflowResource(workflowResourceId);

            // invoke the operation
            TagsObject tagsObject = new TagsObject()
            {
                Tags =
{
["promote"] = "false",
["resourceEnv"] = "testing",
},
            };
            WorkflowResource result = await workflow.UpdateAsync(tagsObject);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkflowData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
