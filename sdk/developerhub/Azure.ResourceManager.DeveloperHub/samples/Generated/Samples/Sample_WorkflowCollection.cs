// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DeveloperHub.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DeveloperHub.Samples
{
    public partial class Sample_WorkflowCollection
    {
        // List Workflows
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListWorkflows()
        {
            // Generated from example definition: specification/developerhub/resource-manager/Microsoft.DevHub/preview/2024-05-01-preview/examples/Workflow_ListByResourceGroup.json
            // this example is just showing the usage of "Workflow_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "resourceGroup1";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this WorkflowResource
            WorkflowCollection collection = resourceGroupResource.GetWorkflows();

            // invoke the operation and iterate over the result
            string managedClusterResource = "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resourceGroup1/providers/Microsoft.ContainerService/managedClusters/cluster1";
            await foreach (WorkflowResource item in collection.GetAllAsync(managedClusterResource: managedClusterResource))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WorkflowData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get Workflow
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetWorkflow()
        {
            // Generated from example definition: specification/developerhub/resource-manager/Microsoft.DevHub/preview/2024-05-01-preview/examples/Workflow_Get.json
            // this example is just showing the usage of "Workflow_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "resourceGroup1";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this WorkflowResource
            WorkflowCollection collection = resourceGroupResource.GetWorkflows();

            // invoke the operation
            string workflowName = "workflow1";
            WorkflowResource result = await collection.GetAsync(workflowName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkflowData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get Workflow
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetWorkflow()
        {
            // Generated from example definition: specification/developerhub/resource-manager/Microsoft.DevHub/preview/2024-05-01-preview/examples/Workflow_Get.json
            // this example is just showing the usage of "Workflow_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "resourceGroup1";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this WorkflowResource
            WorkflowCollection collection = resourceGroupResource.GetWorkflows();

            // invoke the operation
            string workflowName = "workflow1";
            bool result = await collection.ExistsAsync(workflowName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get Workflow
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_GetWorkflow()
        {
            // Generated from example definition: specification/developerhub/resource-manager/Microsoft.DevHub/preview/2024-05-01-preview/examples/Workflow_Get.json
            // this example is just showing the usage of "Workflow_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "resourceGroup1";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this WorkflowResource
            WorkflowCollection collection = resourceGroupResource.GetWorkflows();

            // invoke the operation
            string workflowName = "workflow1";
            NullableResponse<WorkflowResource> response = await collection.GetIfExistsAsync(workflowName);
            WorkflowResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WorkflowData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // Create Workflow
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateWorkflow()
        {
            // Generated from example definition: specification/developerhub/resource-manager/Microsoft.DevHub/preview/2024-05-01-preview/examples/Workflow_CreateOrUpdate.json
            // this example is just showing the usage of "Workflow_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "resourceGroup1";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this WorkflowResource
            WorkflowCollection collection = resourceGroupResource.GetWorkflows();

            // invoke the operation
            string workflowName = "workflow1";
            WorkflowData data = new WorkflowData(new AzureLocation("location1"))
            {
                NamespacePropertiesArtifactGenerationPropertiesNamespace = "namespace1",
                RepositoryOwner = "owner1",
                RepositoryName = "repo1",
                BranchName = "branch1",
                Dockerfile = "repo1/images/Dockerfile",
                DockerBuildContext = "repo1/src/",
                DeploymentProperties = new DeploymentProperties()
                {
                    ManifestType = ManifestType.Kube,
                    KubeManifestLocations =
{
"/src/manifests/"
},
                    Overrides =
{
["key1"] = "value1",
},
                },
                NamespacePropertiesGithubWorkflowProfileNamespace = "namespace1",
                Acr = new ACR()
                {
                    AcrSubscriptionId = "00000000-0000-0000-0000-000000000000",
                    AcrResourceGroup = "resourceGroup1",
                    AcrRegistryName = "registry1",
                    AcrRepositoryName = "repo1",
                },
                OidcCredentials = new GitHubWorkflowProfileOidcCredentials()
                {
                    AzureClientId = "12345678-3456-7890-5678-012345678901",
                    AzureTenantId = "66666666-3456-7890-5678-012345678901",
                },
                AksResourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resourceGroup1/providers/Microsoft.ContainerService/managedClusters/cluster1",
                Tags =
{
["appname"] = "testApp",
},
            };
            ArmOperation<WorkflowResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, workflowName, data);
            WorkflowResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkflowData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Workflow With Artifact Generation
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateWorkflowWithArtifactGeneration()
        {
            // Generated from example definition: specification/developerhub/resource-manager/Microsoft.DevHub/preview/2024-05-01-preview/examples/Workflow_CreateOrUpdate_WithArtifactGen.json
            // this example is just showing the usage of "Workflow_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "resourceGroup1";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this WorkflowResource
            WorkflowCollection collection = resourceGroupResource.GetWorkflows();

            // invoke the operation
            string workflowName = "workflow1";
            WorkflowData data = new WorkflowData(new AzureLocation("location1"))
            {
                GenerationLanguage = GenerationLanguage.Javascript,
                LanguageVersion = "14",
                Port = "80",
                AppName = "my-app",
                DockerfileOutputDirectory = "./",
                ManifestOutputDirectory = "./",
                DockerfileGenerationMode = DockerfileGenerationMode.Enabled,
                ManifestGenerationMode = ManifestGenerationMode.Enabled,
                ManifestType = GenerationManifestType.Kube,
                ImageName = "myimage",
                NamespacePropertiesArtifactGenerationPropertiesNamespace = "my-namespace",
                ImageTag = "latest",
                RepositoryOwner = "owner1",
                RepositoryName = "repo1",
                BranchName = "branch1",
                Dockerfile = "repo1/images/Dockerfile",
                DockerBuildContext = "repo1/src/",
                DeploymentProperties = new DeploymentProperties()
                {
                    ManifestType = ManifestType.Kube,
                    KubeManifestLocations =
{
"/src/manifests/"
},
                    Overrides =
{
["key1"] = "value1",
},
                },
                NamespacePropertiesGithubWorkflowProfileNamespace = "my-namespace",
                Acr = new ACR()
                {
                    AcrSubscriptionId = "00000000-0000-0000-0000-000000000000",
                    AcrResourceGroup = "resourceGroup1",
                    AcrRegistryName = "registry1",
                    AcrRepositoryName = "repo1",
                },
                OidcCredentials = new GitHubWorkflowProfileOidcCredentials()
                {
                    AzureClientId = "12345678-3456-7890-5678-012345678901",
                    AzureTenantId = "66666666-3456-7890-5678-012345678901",
                },
                AksResourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resourceGroup1/providers/Microsoft.ContainerService/managedClusters/cluster1",
                Tags =
{
["appname"] = "testApp",
},
            };
            ArmOperation<WorkflowResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, workflowName, data);
            WorkflowResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkflowData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
