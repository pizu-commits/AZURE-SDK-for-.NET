// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.DeveloperHub.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DeveloperHub
{
    /// <summary>
    /// A Class representing a GitHubOAuthResponse along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct a <see cref="GitHubOAuthResponseResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetGitHubOAuthResponseResource method.
    /// Otherwise you can get one from its parent resource <see cref="SubscriptionResource"/> using the GetGitHubOAuthResponse method.
    /// </summary>
    public partial class GitHubOAuthResponseResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="GitHubOAuthResponseResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="location"> The location. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, AzureLocation location)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/githuboauth/default";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _gitHubOAuthResponseClientDiagnostics;
        private readonly DeveloperHubServiceRestOperations _gitHubOAuthResponseRestClient;
        private readonly GitHubOAuthResponseData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.DevHub/locations/githuboauth";

        /// <summary> Initializes a new instance of the <see cref="GitHubOAuthResponseResource"/> class for mocking. </summary>
        protected GitHubOAuthResponseResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="GitHubOAuthResponseResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal GitHubOAuthResponseResource(ArmClient client, GitHubOAuthResponseData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="GitHubOAuthResponseResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal GitHubOAuthResponseResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _gitHubOAuthResponseClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DeveloperHub", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string gitHubOAuthResponseApiVersion);
            _gitHubOAuthResponseRestClient = new DeveloperHubServiceRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, gitHubOAuthResponseApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual GitHubOAuthResponseData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Callback URL to hit once authenticated with GitHub App to have the service store the OAuth token.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/githuboauth/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GitHubOAuthCallback</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GitHubOAuthResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="code"> The code response from authenticating the GitHub App. </param>
        /// <param name="state"> The state response from authenticating the GitHub App. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="code"/> or <paramref name="state"/> is null. </exception>
        public virtual async Task<Response<GitHubOAuthResponseResource>> GetAsync(string code, string state, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(code, nameof(code));
            Argument.AssertNotNull(state, nameof(state));

            using var scope = _gitHubOAuthResponseClientDiagnostics.CreateScope("GitHubOAuthResponseResource.Get");
            scope.Start();
            try
            {
                var response = await _gitHubOAuthResponseRestClient.GitHubOAuthCallbackAsync(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), code, state, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GitHubOAuthResponseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Callback URL to hit once authenticated with GitHub App to have the service store the OAuth token.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/githuboauth/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GitHubOAuthCallback</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GitHubOAuthResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="code"> The code response from authenticating the GitHub App. </param>
        /// <param name="state"> The state response from authenticating the GitHub App. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="code"/> or <paramref name="state"/> is null. </exception>
        public virtual Response<GitHubOAuthResponseResource> Get(string code, string state, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(code, nameof(code));
            Argument.AssertNotNull(state, nameof(state));

            using var scope = _gitHubOAuthResponseClientDiagnostics.CreateScope("GitHubOAuthResponseResource.Get");
            scope.Start();
            try
            {
                var response = _gitHubOAuthResponseRestClient.GitHubOAuthCallback(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), code, state, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GitHubOAuthResponseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets GitHubOAuth info used to authenticate users with the Developer Hub GitHub App.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/githuboauth/default/getGitHubOAuthInfo</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GitHubOAuth</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GitHubOAuthResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The <see cref="GitHubOAuthCallContent"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<GitHubOAuthInfoResult>> GitHubOAuthAsync(GitHubOAuthCallContent content = null, CancellationToken cancellationToken = default)
        {
            using var scope = _gitHubOAuthResponseClientDiagnostics.CreateScope("GitHubOAuthResponseResource.GitHubOAuth");
            scope.Start();
            try
            {
                var response = await _gitHubOAuthResponseRestClient.GitHubOAuthAsync(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets GitHubOAuth info used to authenticate users with the Developer Hub GitHub App.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/githuboauth/default/getGitHubOAuthInfo</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GitHubOAuth</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GitHubOAuthResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The <see cref="GitHubOAuthCallContent"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<GitHubOAuthInfoResult> GitHubOAuth(GitHubOAuthCallContent content = null, CancellationToken cancellationToken = default)
        {
            using var scope = _gitHubOAuthResponseClientDiagnostics.CreateScope("GitHubOAuthResponseResource.GitHubOAuth");
            scope.Start();
            try
            {
                var response = _gitHubOAuthResponseRestClient.GitHubOAuth(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
