// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.DeveloperHub.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DeveloperHub
{
    /// <summary>
    /// A class representing the Workflow data model.
    /// Resource representation of a workflow
    /// </summary>
    public partial class WorkflowData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="WorkflowData"/>. </summary>
        /// <param name="location"> The location. </param>
        public WorkflowData(AzureLocation location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of <see cref="WorkflowData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="generationLanguage"> The programming language used. </param>
        /// <param name="languageVersion"> The version of the language image used for execution in the generated dockerfile. </param>
        /// <param name="builderVersion"> The version of the language image used for building the code in the generated dockerfile. </param>
        /// <param name="port"> The port the application is exposed on. </param>
        /// <param name="appName"> The name of the app. </param>
        /// <param name="dockerfileOutputDirectory"> The directory to output the generated Dockerfile to. </param>
        /// <param name="manifestOutputDirectory"> The directory to output the generated manifests to. </param>
        /// <param name="dockerfileGenerationMode"> The mode of generation to be used for generating Dockerfiles. </param>
        /// <param name="manifestGenerationMode"> The mode of generation to be used for generating Manifest. </param>
        /// <param name="manifestType"> Determines the type of manifests to be generated. </param>
        /// <param name="imageName"> The name of the image to be generated. </param>
        /// <param name="namespacePropertiesArtifactGenerationPropertiesNamespace"> The namespace to deploy the application to. </param>
        /// <param name="imageTag"> The tag to apply to the generated image. </param>
        /// <param name="repositoryOwner"> Repository Owner. </param>
        /// <param name="repositoryName"> Repository Name. </param>
        /// <param name="branchName"> Repository Branch Name. </param>
        /// <param name="dockerfile"> Path to the Dockerfile within the repository. </param>
        /// <param name="dockerBuildContext"> Path to Dockerfile Build Context within the repository. </param>
        /// <param name="deploymentProperties"></param>
        /// <param name="namespacePropertiesGithubWorkflowProfileNamespace"> Kubernetes namespace the application is deployed to. </param>
        /// <param name="acr"> Information on the azure container registry. </param>
        /// <param name="oidcCredentials"> The fields needed for OIDC with GitHub. </param>
        /// <param name="aksResourceId"> The Azure Kubernetes Cluster Resource the application will be deployed to. </param>
        /// <param name="prURL"> The URL to the Pull Request submitted against the users repository. </param>
        /// <param name="pullNumber"> The number associated with the submitted pull request. </param>
        /// <param name="prStatus"> The status of the Pull Request submitted against the users repository. </param>
        /// <param name="lastWorkflowRun"></param>
        /// <param name="authStatus"> Determines the authorization status of requests. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal WorkflowData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, GenerationLanguage? generationLanguage, string languageVersion, string builderVersion, string port, string appName, string dockerfileOutputDirectory, string manifestOutputDirectory, DockerfileGenerationMode? dockerfileGenerationMode, ManifestGenerationMode? manifestGenerationMode, GenerationManifestType? manifestType, string imageName, string namespacePropertiesArtifactGenerationPropertiesNamespace, string imageTag, string repositoryOwner, string repositoryName, string branchName, string dockerfile, string dockerBuildContext, DeploymentProperties deploymentProperties, string namespacePropertiesGithubWorkflowProfileNamespace, ACR acr, GitHubWorkflowProfileOidcCredentials oidcCredentials, string aksResourceId, string prURL, int? pullNumber, PullRequestStatus? prStatus, WorkflowRun lastWorkflowRun, AuthorizationStatus? authStatus, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            GenerationLanguage = generationLanguage;
            LanguageVersion = languageVersion;
            BuilderVersion = builderVersion;
            Port = port;
            AppName = appName;
            DockerfileOutputDirectory = dockerfileOutputDirectory;
            ManifestOutputDirectory = manifestOutputDirectory;
            DockerfileGenerationMode = dockerfileGenerationMode;
            ManifestGenerationMode = manifestGenerationMode;
            ManifestType = manifestType;
            ImageName = imageName;
            NamespacePropertiesArtifactGenerationPropertiesNamespace = namespacePropertiesArtifactGenerationPropertiesNamespace;
            ImageTag = imageTag;
            RepositoryOwner = repositoryOwner;
            RepositoryName = repositoryName;
            BranchName = branchName;
            Dockerfile = dockerfile;
            DockerBuildContext = dockerBuildContext;
            DeploymentProperties = deploymentProperties;
            NamespacePropertiesGithubWorkflowProfileNamespace = namespacePropertiesGithubWorkflowProfileNamespace;
            Acr = acr;
            OidcCredentials = oidcCredentials;
            AksResourceId = aksResourceId;
            PrURL = prURL;
            PullNumber = pullNumber;
            PrStatus = prStatus;
            LastWorkflowRun = lastWorkflowRun;
            AuthStatus = authStatus;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="WorkflowData"/> for deserialization. </summary>
        internal WorkflowData()
        {
        }

        /// <summary> The programming language used. </summary>
        public GenerationLanguage? GenerationLanguage { get; set; }
        /// <summary> The version of the language image used for execution in the generated dockerfile. </summary>
        public string LanguageVersion { get; set; }
        /// <summary> The version of the language image used for building the code in the generated dockerfile. </summary>
        public string BuilderVersion { get; set; }
        /// <summary> The port the application is exposed on. </summary>
        public string Port { get; set; }
        /// <summary> The name of the app. </summary>
        public string AppName { get; set; }
        /// <summary> The directory to output the generated Dockerfile to. </summary>
        public string DockerfileOutputDirectory { get; set; }
        /// <summary> The directory to output the generated manifests to. </summary>
        public string ManifestOutputDirectory { get; set; }
        /// <summary> The mode of generation to be used for generating Dockerfiles. </summary>
        public DockerfileGenerationMode? DockerfileGenerationMode { get; set; }
        /// <summary> The mode of generation to be used for generating Manifest. </summary>
        public ManifestGenerationMode? ManifestGenerationMode { get; set; }
        /// <summary> Determines the type of manifests to be generated. </summary>
        public GenerationManifestType? ManifestType { get; set; }
        /// <summary> The name of the image to be generated. </summary>
        public string ImageName { get; set; }
        /// <summary> The namespace to deploy the application to. </summary>
        public string NamespacePropertiesArtifactGenerationPropertiesNamespace { get; set; }
        /// <summary> The tag to apply to the generated image. </summary>
        public string ImageTag { get; set; }
        /// <summary> Repository Owner. </summary>
        public string RepositoryOwner { get; set; }
        /// <summary> Repository Name. </summary>
        public string RepositoryName { get; set; }
        /// <summary> Repository Branch Name. </summary>
        public string BranchName { get; set; }
        /// <summary> Path to the Dockerfile within the repository. </summary>
        public string Dockerfile { get; set; }
        /// <summary> Path to Dockerfile Build Context within the repository. </summary>
        public string DockerBuildContext { get; set; }
        /// <summary> Gets or sets the deployment properties. </summary>
        public DeploymentProperties DeploymentProperties { get; set; }
        /// <summary> Kubernetes namespace the application is deployed to. </summary>
        public string NamespacePropertiesGithubWorkflowProfileNamespace { get; set; }
        /// <summary> Information on the azure container registry. </summary>
        public ACR Acr { get; set; }
        /// <summary> The fields needed for OIDC with GitHub. </summary>
        public GitHubWorkflowProfileOidcCredentials OidcCredentials { get; set; }
        /// <summary> The Azure Kubernetes Cluster Resource the application will be deployed to. </summary>
        public string AksResourceId { get; set; }
        /// <summary> The URL to the Pull Request submitted against the users repository. </summary>
        public string PrURL { get; }
        /// <summary> The number associated with the submitted pull request. </summary>
        public int? PullNumber { get; }
        /// <summary> The status of the Pull Request submitted against the users repository. </summary>
        public PullRequestStatus? PrStatus { get; }
        /// <summary> Gets or sets the last workflow run. </summary>
        public WorkflowRun LastWorkflowRun { get; set; }
        /// <summary> Determines the authorization status of requests. </summary>
        public AuthorizationStatus? AuthStatus { get; }
    }
}
