// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DeveloperHub.Models
{
    public partial class ArtifactGenerationProperties : IUtf8JsonSerializable, IJsonModel<ArtifactGenerationProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ArtifactGenerationProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ArtifactGenerationProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ArtifactGenerationProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ArtifactGenerationProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(GenerationLanguage))
            {
                writer.WritePropertyName("generationLanguage"u8);
                writer.WriteStringValue(GenerationLanguage.Value.ToString());
            }
            if (Optional.IsDefined(LanguageVersion))
            {
                writer.WritePropertyName("languageVersion"u8);
                writer.WriteStringValue(LanguageVersion);
            }
            if (Optional.IsDefined(BuilderVersion))
            {
                writer.WritePropertyName("builderVersion"u8);
                writer.WriteStringValue(BuilderVersion);
            }
            if (Optional.IsDefined(Port))
            {
                writer.WritePropertyName("port"u8);
                writer.WriteStringValue(Port);
            }
            if (Optional.IsDefined(AppName))
            {
                writer.WritePropertyName("appName"u8);
                writer.WriteStringValue(AppName);
            }
            if (Optional.IsDefined(DockerfileOutputDirectory))
            {
                writer.WritePropertyName("dockerfileOutputDirectory"u8);
                writer.WriteStringValue(DockerfileOutputDirectory);
            }
            if (Optional.IsDefined(ManifestOutputDirectory))
            {
                writer.WritePropertyName("manifestOutputDirectory"u8);
                writer.WriteStringValue(ManifestOutputDirectory);
            }
            if (Optional.IsDefined(DockerfileGenerationMode))
            {
                writer.WritePropertyName("dockerfileGenerationMode"u8);
                writer.WriteStringValue(DockerfileGenerationMode.Value.ToString());
            }
            if (Optional.IsDefined(ManifestGenerationMode))
            {
                writer.WritePropertyName("manifestGenerationMode"u8);
                writer.WriteStringValue(ManifestGenerationMode.Value.ToString());
            }
            if (Optional.IsDefined(ManifestType))
            {
                writer.WritePropertyName("manifestType"u8);
                writer.WriteStringValue(ManifestType.Value.ToString());
            }
            if (Optional.IsDefined(ImageName))
            {
                writer.WritePropertyName("imageName"u8);
                writer.WriteStringValue(ImageName);
            }
            if (Optional.IsDefined(Namespace))
            {
                writer.WritePropertyName("namespace"u8);
                writer.WriteStringValue(Namespace);
            }
            if (Optional.IsDefined(ImageTag))
            {
                writer.WritePropertyName("imageTag"u8);
                writer.WriteStringValue(ImageTag);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ArtifactGenerationProperties IJsonModel<ArtifactGenerationProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ArtifactGenerationProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ArtifactGenerationProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeArtifactGenerationProperties(document.RootElement, options);
        }

        internal static ArtifactGenerationProperties DeserializeArtifactGenerationProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            GenerationLanguage? generationLanguage = default;
            string languageVersion = default;
            string builderVersion = default;
            string port = default;
            string appName = default;
            string dockerfileOutputDirectory = default;
            string manifestOutputDirectory = default;
            DockerfileGenerationMode? dockerfileGenerationMode = default;
            ManifestGenerationMode? manifestGenerationMode = default;
            GenerationManifestType? manifestType = default;
            string imageName = default;
            string @namespace = default;
            string imageTag = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("generationLanguage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    generationLanguage = new GenerationLanguage(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("languageVersion"u8))
                {
                    languageVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("builderVersion"u8))
                {
                    builderVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("port"u8))
                {
                    port = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("appName"u8))
                {
                    appName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dockerfileOutputDirectory"u8))
                {
                    dockerfileOutputDirectory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("manifestOutputDirectory"u8))
                {
                    manifestOutputDirectory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dockerfileGenerationMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dockerfileGenerationMode = new DockerfileGenerationMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("manifestGenerationMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    manifestGenerationMode = new ManifestGenerationMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("manifestType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    manifestType = new GenerationManifestType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("imageName"u8))
                {
                    imageName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("namespace"u8))
                {
                    @namespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("imageTag"u8))
                {
                    imageTag = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ArtifactGenerationProperties(
                generationLanguage,
                languageVersion,
                builderVersion,
                port,
                appName,
                dockerfileOutputDirectory,
                manifestOutputDirectory,
                dockerfileGenerationMode,
                manifestGenerationMode,
                manifestType,
                imageName,
                @namespace,
                imageTag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ArtifactGenerationProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ArtifactGenerationProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ArtifactGenerationProperties)} does not support writing '{options.Format}' format.");
            }
        }

        ArtifactGenerationProperties IPersistableModel<ArtifactGenerationProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ArtifactGenerationProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeArtifactGenerationProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ArtifactGenerationProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ArtifactGenerationProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
