// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeveloperHub.Models
{
    /// <summary> Properties of a IacTemplate. </summary>
    public partial class IacTemplateProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="IacTemplateProperties"/>. </summary>
        public IacTemplateProperties()
        {
            TemplateDetails = new ChangeTrackingList<IacTemplateDetails>();
        }

        /// <summary> Initializes a new instance of <see cref="IacTemplateProperties"/>. </summary>
        /// <param name="templateName"> Template Name. </param>
        /// <param name="sourceResourceId"> the source store of the template. </param>
        /// <param name="instanceStage"> the source stage of the template. </param>
        /// <param name="instanceName"> the sample instance name of the template. </param>
        /// <param name="templateDetails"></param>
        /// <param name="quickStartTemplateType"> Determines the authorization status of requests. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal IacTemplateProperties(string templateName, string sourceResourceId, string instanceStage, string instanceName, IList<IacTemplateDetails> templateDetails, QuickStartTemplateType? quickStartTemplateType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TemplateName = templateName;
            SourceResourceId = sourceResourceId;
            InstanceStage = instanceStage;
            InstanceName = instanceName;
            TemplateDetails = templateDetails;
            QuickStartTemplateType = quickStartTemplateType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Template Name. </summary>
        public string TemplateName { get; set; }
        /// <summary> the source store of the template. </summary>
        public string SourceResourceId { get; set; }
        /// <summary> the source stage of the template. </summary>
        public string InstanceStage { get; set; }
        /// <summary> the sample instance name of the template. </summary>
        public string InstanceName { get; set; }
        /// <summary> Gets the template details. </summary>
        public IList<IacTemplateDetails> TemplateDetails { get; }
        /// <summary> Determines the authorization status of requests. </summary>
        public QuickStartTemplateType? QuickStartTemplateType { get; set; }
    }
}
