// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeveloperHub.Models
{
    /// <summary> Properties used for generating artifacts such as Dockerfiles and manifests. </summary>
    public partial class ArtifactGenerationProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ArtifactGenerationProperties"/>. </summary>
        public ArtifactGenerationProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ArtifactGenerationProperties"/>. </summary>
        /// <param name="generationLanguage"> The programming language used. </param>
        /// <param name="languageVersion"> The version of the language image used for execution in the generated dockerfile. </param>
        /// <param name="builderVersion"> The version of the language image used for building the code in the generated dockerfile. </param>
        /// <param name="port"> The port the application is exposed on. </param>
        /// <param name="appName"> The name of the app. </param>
        /// <param name="dockerfileOutputDirectory"> The directory to output the generated Dockerfile to. </param>
        /// <param name="manifestOutputDirectory"> The directory to output the generated manifests to. </param>
        /// <param name="dockerfileGenerationMode"> The mode of generation to be used for generating Dockerfiles. </param>
        /// <param name="manifestGenerationMode"> The mode of generation to be used for generating Manifest. </param>
        /// <param name="manifestType"> Determines the type of manifests to be generated. </param>
        /// <param name="imageName"> The name of the image to be generated. </param>
        /// <param name="namespace"> The namespace to deploy the application to. </param>
        /// <param name="imageTag"> The tag to apply to the generated image. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ArtifactGenerationProperties(GenerationLanguage? generationLanguage, string languageVersion, string builderVersion, string port, string appName, string dockerfileOutputDirectory, string manifestOutputDirectory, DockerfileGenerationMode? dockerfileGenerationMode, ManifestGenerationMode? manifestGenerationMode, GenerationManifestType? manifestType, string imageName, string @namespace, string imageTag, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            GenerationLanguage = generationLanguage;
            LanguageVersion = languageVersion;
            BuilderVersion = builderVersion;
            Port = port;
            AppName = appName;
            DockerfileOutputDirectory = dockerfileOutputDirectory;
            ManifestOutputDirectory = manifestOutputDirectory;
            DockerfileGenerationMode = dockerfileGenerationMode;
            ManifestGenerationMode = manifestGenerationMode;
            ManifestType = manifestType;
            ImageName = imageName;
            Namespace = @namespace;
            ImageTag = imageTag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The programming language used. </summary>
        public GenerationLanguage? GenerationLanguage { get; set; }
        /// <summary> The version of the language image used for execution in the generated dockerfile. </summary>
        public string LanguageVersion { get; set; }
        /// <summary> The version of the language image used for building the code in the generated dockerfile. </summary>
        public string BuilderVersion { get; set; }
        /// <summary> The port the application is exposed on. </summary>
        public string Port { get; set; }
        /// <summary> The name of the app. </summary>
        public string AppName { get; set; }
        /// <summary> The directory to output the generated Dockerfile to. </summary>
        public string DockerfileOutputDirectory { get; set; }
        /// <summary> The directory to output the generated manifests to. </summary>
        public string ManifestOutputDirectory { get; set; }
        /// <summary> The mode of generation to be used for generating Dockerfiles. </summary>
        public DockerfileGenerationMode? DockerfileGenerationMode { get; set; }
        /// <summary> The mode of generation to be used for generating Manifest. </summary>
        public ManifestGenerationMode? ManifestGenerationMode { get; set; }
        /// <summary> Determines the type of manifests to be generated. </summary>
        public GenerationManifestType? ManifestType { get; set; }
        /// <summary> The name of the image to be generated. </summary>
        public string ImageName { get; set; }
        /// <summary> The namespace to deploy the application to. </summary>
        public string Namespace { get; set; }
        /// <summary> The tag to apply to the generated image. </summary>
        public string ImageTag { get; set; }
    }
}
