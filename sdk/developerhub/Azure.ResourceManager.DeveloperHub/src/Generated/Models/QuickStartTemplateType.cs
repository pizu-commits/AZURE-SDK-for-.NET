// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DeveloperHub.Models
{
    /// <summary> Determines the authorization status of requests. </summary>
    public readonly partial struct QuickStartTemplateType : IEquatable<QuickStartTemplateType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="QuickStartTemplateType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public QuickStartTemplateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string HCIValue = "HCI";
        private const string HciaksValue = "HCIAKS";
        private const string HciarcvmValue = "HCIARCVM";
        private const string ALLValue = "ALL";

        /// <summary> The template has not use quick start template. </summary>
        public static QuickStartTemplateType None { get; } = new QuickStartTemplateType(NoneValue);
        /// <summary> The template use quick start template of HCI. </summary>
        public static QuickStartTemplateType HCI { get; } = new QuickStartTemplateType(HCIValue);
        /// <summary> The template use quick start template of HCI and AKS. </summary>
        public static QuickStartTemplateType Hciaks { get; } = new QuickStartTemplateType(HciaksValue);
        /// <summary> The template use quick start template of HCI and ArcVM. </summary>
        public static QuickStartTemplateType Hciarcvm { get; } = new QuickStartTemplateType(HciarcvmValue);
        /// <summary> The template use quick start template of All supported products. </summary>
        public static QuickStartTemplateType ALL { get; } = new QuickStartTemplateType(ALLValue);
        /// <summary> Determines if two <see cref="QuickStartTemplateType"/> values are the same. </summary>
        public static bool operator ==(QuickStartTemplateType left, QuickStartTemplateType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="QuickStartTemplateType"/> values are not the same. </summary>
        public static bool operator !=(QuickStartTemplateType left, QuickStartTemplateType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="QuickStartTemplateType"/>. </summary>
        public static implicit operator QuickStartTemplateType(string value) => new QuickStartTemplateType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is QuickStartTemplateType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(QuickStartTemplateType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
