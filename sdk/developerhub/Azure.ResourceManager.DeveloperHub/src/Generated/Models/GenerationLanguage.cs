// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DeveloperHub.Models
{
    /// <summary> The programming language used. </summary>
    public readonly partial struct GenerationLanguage : IEquatable<GenerationLanguage>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="GenerationLanguage"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public GenerationLanguage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ClojureValue = "clojure";
        private const string CsharpValue = "csharp";
        private const string ErlangValue = "erlang";
        private const string GoValue = "go";
        private const string GomoduleValue = "gomodule";
        private const string GradleValue = "gradle";
        private const string JavaValue = "java";
        private const string JavascriptValue = "javascript";
        private const string PhpValue = "php";
        private const string PythonValue = "python";
        private const string RubyValue = "ruby";
        private const string RustValue = "rust";
        private const string SwiftValue = "swift";

        /// <summary> clojure language. </summary>
        public static GenerationLanguage Clojure { get; } = new GenerationLanguage(ClojureValue);
        /// <summary> csharp language. </summary>
        public static GenerationLanguage Csharp { get; } = new GenerationLanguage(CsharpValue);
        /// <summary> erlang language. </summary>
        public static GenerationLanguage Erlang { get; } = new GenerationLanguage(ErlangValue);
        /// <summary> go language. </summary>
        public static GenerationLanguage Go { get; } = new GenerationLanguage(GoValue);
        /// <summary> gomodule language. </summary>
        public static GenerationLanguage Gomodule { get; } = new GenerationLanguage(GomoduleValue);
        /// <summary> gradle language. </summary>
        public static GenerationLanguage Gradle { get; } = new GenerationLanguage(GradleValue);
        /// <summary> java language. </summary>
        public static GenerationLanguage Java { get; } = new GenerationLanguage(JavaValue);
        /// <summary> javascript language. </summary>
        public static GenerationLanguage Javascript { get; } = new GenerationLanguage(JavascriptValue);
        /// <summary> php language. </summary>
        public static GenerationLanguage Php { get; } = new GenerationLanguage(PhpValue);
        /// <summary> python language. </summary>
        public static GenerationLanguage Python { get; } = new GenerationLanguage(PythonValue);
        /// <summary> ruby language. </summary>
        public static GenerationLanguage Ruby { get; } = new GenerationLanguage(RubyValue);
        /// <summary> rust language. </summary>
        public static GenerationLanguage Rust { get; } = new GenerationLanguage(RustValue);
        /// <summary> swift language. </summary>
        public static GenerationLanguage Swift { get; } = new GenerationLanguage(SwiftValue);
        /// <summary> Determines if two <see cref="GenerationLanguage"/> values are the same. </summary>
        public static bool operator ==(GenerationLanguage left, GenerationLanguage right) => left.Equals(right);
        /// <summary> Determines if two <see cref="GenerationLanguage"/> values are not the same. </summary>
        public static bool operator !=(GenerationLanguage left, GenerationLanguage right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="GenerationLanguage"/>. </summary>
        public static implicit operator GenerationLanguage(string value) => new GenerationLanguage(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is GenerationLanguage other && Equals(other);
        /// <inheritdoc />
        public bool Equals(GenerationLanguage other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
