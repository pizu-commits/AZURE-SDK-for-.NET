// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DeveloperHub.Models
{
    /// <summary> Determines the type of manifests to be generated. </summary>
    public readonly partial struct GenerationManifestType : IEquatable<GenerationManifestType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="GenerationManifestType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public GenerationManifestType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HelmValue = "helm";
        private const string KubeValue = "kube";

        /// <summary> Helm manifests. </summary>
        public static GenerationManifestType Helm { get; } = new GenerationManifestType(HelmValue);
        /// <summary> Kubernetes manifests. </summary>
        public static GenerationManifestType Kube { get; } = new GenerationManifestType(KubeValue);
        /// <summary> Determines if two <see cref="GenerationManifestType"/> values are the same. </summary>
        public static bool operator ==(GenerationManifestType left, GenerationManifestType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="GenerationManifestType"/> values are not the same. </summary>
        public static bool operator !=(GenerationManifestType left, GenerationManifestType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="GenerationManifestType"/>. </summary>
        public static implicit operator GenerationManifestType(string value) => new GenerationManifestType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is GenerationManifestType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(GenerationManifestType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
