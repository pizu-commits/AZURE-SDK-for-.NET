// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.DeveloperHub.Models;

namespace Azure.ResourceManager.DeveloperHub.Mocking
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    public partial class MockableDeveloperHubSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _gitHubOAuthResponseClientDiagnostics;
        private DeveloperHubServiceRestOperations _gitHubOAuthResponseRestClient;
        private ClientDiagnostics _workflowClientDiagnostics;
        private WorkflowRestOperations _workflowRestClient;
        private ClientDiagnostics _iacProfileClientDiagnostics;
        private IacProfilesRestOperations _iacProfileRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableDeveloperHubSubscriptionResource"/> class for mocking. </summary>
        protected MockableDeveloperHubSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableDeveloperHubSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableDeveloperHubSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics GitHubOAuthResponseClientDiagnostics => _gitHubOAuthResponseClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.DeveloperHub", GitHubOAuthResponseResource.ResourceType.Namespace, Diagnostics);
        private DeveloperHubServiceRestOperations GitHubOAuthResponseRestClient => _gitHubOAuthResponseRestClient ??= new DeveloperHubServiceRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(GitHubOAuthResponseResource.ResourceType));
        private ClientDiagnostics WorkflowClientDiagnostics => _workflowClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.DeveloperHub", WorkflowResource.ResourceType.Namespace, Diagnostics);
        private WorkflowRestOperations WorkflowRestClient => _workflowRestClient ??= new WorkflowRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(WorkflowResource.ResourceType));
        private ClientDiagnostics IacProfileClientDiagnostics => _iacProfileClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.DeveloperHub", IacProfileResource.ResourceType.Namespace, Diagnostics);
        private IacProfilesRestOperations IacProfileRestClient => _iacProfileRestClient ??= new IacProfilesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(IacProfileResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of GitHubOAuthResponseResources in the SubscriptionResource. </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <returns> An object representing collection of GitHubOAuthResponseResources and their operations over a GitHubOAuthResponseResource. </returns>
        public virtual GitHubOAuthResponseCollection GetGitHubOAuthResponses(AzureLocation location)
        {
            return new GitHubOAuthResponseCollection(Client, Id, location);
        }

        /// <summary>
        /// Callback URL to hit once authenticated with GitHub App to have the service store the OAuth token.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/githuboauth/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GitHubOAuthCallback</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GitHubOAuthResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="code"> The code response from authenticating the GitHub App. </param>
        /// <param name="state"> The state response from authenticating the GitHub App. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="code"/> or <paramref name="state"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<GitHubOAuthResponseResource>> GetGitHubOAuthResponseAsync(AzureLocation location, string code, string state, CancellationToken cancellationToken = default)
        {
            return await GetGitHubOAuthResponses(location).GetAsync(code, state, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Callback URL to hit once authenticated with GitHub App to have the service store the OAuth token.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/githuboauth/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GitHubOAuthCallback</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GitHubOAuthResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="code"> The code response from authenticating the GitHub App. </param>
        /// <param name="state"> The state response from authenticating the GitHub App. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="code"/> or <paramref name="state"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<GitHubOAuthResponseResource> GetGitHubOAuthResponse(AzureLocation location, string code, string state, CancellationToken cancellationToken = default)
        {
            return GetGitHubOAuthResponses(location).Get(code, state, cancellationToken);
        }

        /// <summary>
        /// Generate preview dockerfile and manifests.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/generatePreviewArtifacts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GeneratePreviewArtifacts</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GitHubOAuthResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="artifactGenerationProperties"> The <see cref="ArtifactGenerationProperties"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="artifactGenerationProperties"/> is null. </exception>
        public virtual async Task<Response<IReadOnlyDictionary<string, string>>> GeneratePreviewArtifactsAsync(ArtifactGenerationProperties artifactGenerationProperties, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(artifactGenerationProperties, nameof(artifactGenerationProperties));

            using var scope = GitHubOAuthResponseClientDiagnostics.CreateScope("MockableDeveloperHubSubscriptionResource.GeneratePreviewArtifacts");
            scope.Start();
            try
            {
                var response = await GitHubOAuthResponseRestClient.GeneratePreviewArtifactsAsync(Id.SubscriptionId, new AzureLocation("eastus"), artifactGenerationProperties, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Generate preview dockerfile and manifests.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/generatePreviewArtifacts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GeneratePreviewArtifacts</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GitHubOAuthResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="artifactGenerationProperties"> The <see cref="ArtifactGenerationProperties"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="artifactGenerationProperties"/> is null. </exception>
        public virtual Response<IReadOnlyDictionary<string, string>> GeneratePreviewArtifacts(ArtifactGenerationProperties artifactGenerationProperties, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(artifactGenerationProperties, nameof(artifactGenerationProperties));

            using var scope = GitHubOAuthResponseClientDiagnostics.CreateScope("MockableDeveloperHubSubscriptionResource.GeneratePreviewArtifacts");
            scope.Start();
            try
            {
                var response = GitHubOAuthResponseRestClient.GeneratePreviewArtifacts(Id.SubscriptionId, new AzureLocation("eastus"), artifactGenerationProperties, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of workflows associated with the specified subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/workflows</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WorkflowResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkflowResource> GetWorkflowsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => WorkflowRestClient.CreateListRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => WorkflowRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new WorkflowResource(Client, WorkflowData.DeserializeWorkflowData(e)), WorkflowClientDiagnostics, Pipeline, "MockableDeveloperHubSubscriptionResource.GetWorkflows", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets a list of workflows associated with the specified subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/workflows</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WorkflowResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkflowResource> GetWorkflows(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => WorkflowRestClient.CreateListRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => WorkflowRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new WorkflowResource(Client, WorkflowData.DeserializeWorkflowData(e)), WorkflowClientDiagnostics, Pipeline, "MockableDeveloperHubSubscriptionResource.GetWorkflows", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets a list of IacProfiles associated with the specified subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/iacProfiles</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>IacProfiles_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="IacProfileResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IacProfileResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<IacProfileResource> GetIacProfilesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => IacProfileRestClient.CreateListRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => IacProfileRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new IacProfileResource(Client, IacProfileData.DeserializeIacProfileData(e)), IacProfileClientDiagnostics, Pipeline, "MockableDeveloperHubSubscriptionResource.GetIacProfiles", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets a list of IacProfiles associated with the specified subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/iacProfiles</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>IacProfiles_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="IacProfileResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IacProfileResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<IacProfileResource> GetIacProfiles(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => IacProfileRestClient.CreateListRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => IacProfileRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new IacProfileResource(Client, IacProfileData.DeserializeIacProfileData(e)), IacProfileClientDiagnostics, Pipeline, "MockableDeveloperHubSubscriptionResource.GetIacProfiles", "value", "nextLink", cancellationToken);
        }
    }
}
