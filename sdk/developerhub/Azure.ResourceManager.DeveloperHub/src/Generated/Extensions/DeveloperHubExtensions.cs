// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.DeveloperHub.Mocking;
using Azure.ResourceManager.DeveloperHub.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DeveloperHub
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.DeveloperHub. </summary>
    public static partial class DeveloperHubExtensions
    {
        private static MockableDeveloperHubArmClient GetMockableDeveloperHubArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableDeveloperHubArmClient(client0));
        }

        private static MockableDeveloperHubResourceGroupResource GetMockableDeveloperHubResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableDeveloperHubResourceGroupResource(client, resource.Id));
        }

        private static MockableDeveloperHubSubscriptionResource GetMockableDeveloperHubSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableDeveloperHubSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Gets an object representing a <see cref="GitHubOAuthResponseResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="GitHubOAuthResponseResource.CreateResourceIdentifier" /> to create a <see cref="GitHubOAuthResponseResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubArmClient.GetGitHubOAuthResponseResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="GitHubOAuthResponseResource"/> object. </returns>
        public static GitHubOAuthResponseResource GetGitHubOAuthResponseResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDeveloperHubArmClient(client).GetGitHubOAuthResponseResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="WorkflowResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WorkflowResource.CreateResourceIdentifier" /> to create a <see cref="WorkflowResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubArmClient.GetWorkflowResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="WorkflowResource"/> object. </returns>
        public static WorkflowResource GetWorkflowResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDeveloperHubArmClient(client).GetWorkflowResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="IacProfileResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IacProfileResource.CreateResourceIdentifier" /> to create an <see cref="IacProfileResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubArmClient.GetIacProfileResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="IacProfileResource"/> object. </returns>
        public static IacProfileResource GetIacProfileResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDeveloperHubArmClient(client).GetIacProfileResource(id);
        }

        /// <summary>
        /// Gets a collection of WorkflowResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubResourceGroupResource.GetWorkflows()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of WorkflowResources and their operations over a WorkflowResource. </returns>
        public static WorkflowCollection GetWorkflows(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableDeveloperHubResourceGroupResource(resourceGroupResource).GetWorkflows();
        }

        /// <summary>
        /// Gets a workflow.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkflowResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubResourceGroupResource.GetWorkflowAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="workflowName"> The name of the workflow resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="workflowName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<WorkflowResource>> GetWorkflowAsync(this ResourceGroupResource resourceGroupResource, string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableDeveloperHubResourceGroupResource(resourceGroupResource).GetWorkflowAsync(workflowName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a workflow.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkflowResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubResourceGroupResource.GetWorkflow(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="workflowName"> The name of the workflow resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="workflowName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<WorkflowResource> GetWorkflow(this ResourceGroupResource resourceGroupResource, string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableDeveloperHubResourceGroupResource(resourceGroupResource).GetWorkflow(workflowName, cancellationToken);
        }

        /// <summary>
        /// Gets a collection of IacProfileResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubResourceGroupResource.GetIacProfiles()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of IacProfileResources and their operations over a IacProfileResource. </returns>
        public static IacProfileCollection GetIacProfiles(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableDeveloperHubResourceGroupResource(resourceGroupResource).GetIacProfiles();
        }

        /// <summary>
        /// Gets a IacProfile.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/iacProfiles/{iacProfileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>IacProfiles_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="IacProfileResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubResourceGroupResource.GetIacProfileAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="iacProfileName"> The name of the IacProfile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="iacProfileName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="iacProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<IacProfileResource>> GetIacProfileAsync(this ResourceGroupResource resourceGroupResource, string iacProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableDeveloperHubResourceGroupResource(resourceGroupResource).GetIacProfileAsync(iacProfileName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a IacProfile.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/iacProfiles/{iacProfileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>IacProfiles_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="IacProfileResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubResourceGroupResource.GetIacProfile(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="iacProfileName"> The name of the IacProfile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="iacProfileName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="iacProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<IacProfileResource> GetIacProfile(this ResourceGroupResource resourceGroupResource, string iacProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableDeveloperHubResourceGroupResource(resourceGroupResource).GetIacProfile(iacProfileName, cancellationToken);
        }

        /// <summary>
        /// Gets a collection of GitHubOAuthResponseResources in the SubscriptionResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubSubscriptionResource.GetGitHubOAuthResponses(AzureLocation)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The name of the Azure region. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An object representing collection of GitHubOAuthResponseResources and their operations over a GitHubOAuthResponseResource. </returns>
        public static GitHubOAuthResponseCollection GetGitHubOAuthResponses(this SubscriptionResource subscriptionResource, AzureLocation location)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDeveloperHubSubscriptionResource(subscriptionResource).GetGitHubOAuthResponses(location);
        }

        /// <summary>
        /// Callback URL to hit once authenticated with GitHub App to have the service store the OAuth token.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/githuboauth/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GitHubOAuthCallback</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GitHubOAuthResponseResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubSubscriptionResource.GetGitHubOAuthResponseAsync(AzureLocation,string,string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="code"> The code response from authenticating the GitHub App. </param>
        /// <param name="state"> The state response from authenticating the GitHub App. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/>, <paramref name="code"/> or <paramref name="state"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<GitHubOAuthResponseResource>> GetGitHubOAuthResponseAsync(this SubscriptionResource subscriptionResource, AzureLocation location, string code, string state, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return await GetMockableDeveloperHubSubscriptionResource(subscriptionResource).GetGitHubOAuthResponseAsync(location, code, state, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Callback URL to hit once authenticated with GitHub App to have the service store the OAuth token.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/githuboauth/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GitHubOAuthCallback</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GitHubOAuthResponseResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubSubscriptionResource.GetGitHubOAuthResponse(AzureLocation,string,string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="code"> The code response from authenticating the GitHub App. </param>
        /// <param name="state"> The state response from authenticating the GitHub App. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/>, <paramref name="code"/> or <paramref name="state"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<GitHubOAuthResponseResource> GetGitHubOAuthResponse(this SubscriptionResource subscriptionResource, AzureLocation location, string code, string state, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDeveloperHubSubscriptionResource(subscriptionResource).GetGitHubOAuthResponse(location, code, state, cancellationToken);
        }

        /// <summary>
        /// Generate preview dockerfile and manifests.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/generatePreviewArtifacts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GeneratePreviewArtifacts</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GitHubOAuthResponseResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubSubscriptionResource.GeneratePreviewArtifacts(ArtifactGenerationProperties,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="artifactGenerationProperties"> The <see cref="ArtifactGenerationProperties"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="artifactGenerationProperties"/> is null. </exception>
        public static async Task<Response<IReadOnlyDictionary<string, string>>> GeneratePreviewArtifactsAsync(this SubscriptionResource subscriptionResource, ArtifactGenerationProperties artifactGenerationProperties, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return await GetMockableDeveloperHubSubscriptionResource(subscriptionResource).GeneratePreviewArtifactsAsync(artifactGenerationProperties, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate preview dockerfile and manifests.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/generatePreviewArtifacts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GeneratePreviewArtifacts</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GitHubOAuthResponseResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubSubscriptionResource.GeneratePreviewArtifacts(ArtifactGenerationProperties,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="artifactGenerationProperties"> The <see cref="ArtifactGenerationProperties"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="artifactGenerationProperties"/> is null. </exception>
        public static Response<IReadOnlyDictionary<string, string>> GeneratePreviewArtifacts(this SubscriptionResource subscriptionResource, ArtifactGenerationProperties artifactGenerationProperties, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDeveloperHubSubscriptionResource(subscriptionResource).GeneratePreviewArtifacts(artifactGenerationProperties, cancellationToken);
        }

        /// <summary>
        /// Gets a list of workflows associated with the specified subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/workflows</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkflowResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubSubscriptionResource.GetWorkflows(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="WorkflowResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<WorkflowResource> GetWorkflowsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDeveloperHubSubscriptionResource(subscriptionResource).GetWorkflowsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets a list of workflows associated with the specified subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/workflows</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkflowResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubSubscriptionResource.GetWorkflows(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="WorkflowResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<WorkflowResource> GetWorkflows(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDeveloperHubSubscriptionResource(subscriptionResource).GetWorkflows(cancellationToken);
        }

        /// <summary>
        /// Gets a list of IacProfiles associated with the specified subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/iacProfiles</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>IacProfiles_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="IacProfileResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubSubscriptionResource.GetIacProfiles(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="IacProfileResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<IacProfileResource> GetIacProfilesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDeveloperHubSubscriptionResource(subscriptionResource).GetIacProfilesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets a list of IacProfiles associated with the specified subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/iacProfiles</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>IacProfiles_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="IacProfileResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeveloperHubSubscriptionResource.GetIacProfiles(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="IacProfileResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<IacProfileResource> GetIacProfiles(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDeveloperHubSubscriptionResource(subscriptionResource).GetIacProfiles(cancellationToken);
        }
    }
}
