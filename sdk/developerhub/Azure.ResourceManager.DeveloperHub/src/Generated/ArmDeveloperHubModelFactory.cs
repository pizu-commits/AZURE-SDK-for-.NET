// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DeveloperHub.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmDeveloperHubModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.GitHubOAuthInfoResult"/>. </summary>
        /// <param name="authURL"> URL for authorizing the Developer Hub GitHub App. </param>
        /// <param name="token"> OAuth token used to make calls to GitHub. </param>
        /// <returns> A new <see cref="Models.GitHubOAuthInfoResult"/> instance for mocking. </returns>
        public static GitHubOAuthInfoResult GitHubOAuthInfoResult(string authURL = null, string token = null)
        {
            return new GitHubOAuthInfoResult(authURL, token, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeveloperHub.GitHubOAuthResponseData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="username"> user making request. </param>
        /// <returns> A new <see cref="DeveloperHub.GitHubOAuthResponseData"/> instance for mocking. </returns>
        public static GitHubOAuthResponseData GitHubOAuthResponseData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string username = null)
        {
            return new GitHubOAuthResponseData(
                id,
                name,
                resourceType,
                systemData,
                username,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeveloperHub.WorkflowData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="generationLanguage"> The programming language used. </param>
        /// <param name="languageVersion"> The version of the language image used for execution in the generated dockerfile. </param>
        /// <param name="builderVersion"> The version of the language image used for building the code in the generated dockerfile. </param>
        /// <param name="port"> The port the application is exposed on. </param>
        /// <param name="appName"> The name of the app. </param>
        /// <param name="dockerfileOutputDirectory"> The directory to output the generated Dockerfile to. </param>
        /// <param name="manifestOutputDirectory"> The directory to output the generated manifests to. </param>
        /// <param name="dockerfileGenerationMode"> The mode of generation to be used for generating Dockerfiles. </param>
        /// <param name="manifestGenerationMode"> The mode of generation to be used for generating Manifest. </param>
        /// <param name="manifestType"> Determines the type of manifests to be generated. </param>
        /// <param name="imageName"> The name of the image to be generated. </param>
        /// <param name="namespacePropertiesArtifactGenerationPropertiesNamespace"> The namespace to deploy the application to. </param>
        /// <param name="imageTag"> The tag to apply to the generated image. </param>
        /// <param name="repositoryOwner"> Repository Owner. </param>
        /// <param name="repositoryName"> Repository Name. </param>
        /// <param name="branchName"> Repository Branch Name. </param>
        /// <param name="dockerfile"> Path to the Dockerfile within the repository. </param>
        /// <param name="dockerBuildContext"> Path to Dockerfile Build Context within the repository. </param>
        /// <param name="deploymentProperties"></param>
        /// <param name="namespacePropertiesGithubWorkflowProfileNamespace"> Kubernetes namespace the application is deployed to. </param>
        /// <param name="acr"> Information on the azure container registry. </param>
        /// <param name="oidcCredentials"> The fields needed for OIDC with GitHub. </param>
        /// <param name="aksResourceId"> The Azure Kubernetes Cluster Resource the application will be deployed to. </param>
        /// <param name="prURL"> The URL to the Pull Request submitted against the users repository. </param>
        /// <param name="pullNumber"> The number associated with the submitted pull request. </param>
        /// <param name="prStatus"> The status of the Pull Request submitted against the users repository. </param>
        /// <param name="lastWorkflowRun"></param>
        /// <param name="authStatus"> Determines the authorization status of requests. </param>
        /// <returns> A new <see cref="DeveloperHub.WorkflowData"/> instance for mocking. </returns>
        public static WorkflowData WorkflowData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, GenerationLanguage? generationLanguage = null, string languageVersion = null, string builderVersion = null, string port = null, string appName = null, string dockerfileOutputDirectory = null, string manifestOutputDirectory = null, DockerfileGenerationMode? dockerfileGenerationMode = null, ManifestGenerationMode? manifestGenerationMode = null, GenerationManifestType? manifestType = null, string imageName = null, string namespacePropertiesArtifactGenerationPropertiesNamespace = null, string imageTag = null, string repositoryOwner = null, string repositoryName = null, string branchName = null, string dockerfile = null, string dockerBuildContext = null, DeploymentProperties deploymentProperties = null, string namespacePropertiesGithubWorkflowProfileNamespace = null, ACR acr = null, GitHubWorkflowProfileOidcCredentials oidcCredentials = null, string aksResourceId = null, string prURL = null, int? pullNumber = null, PullRequestStatus? prStatus = null, WorkflowRun lastWorkflowRun = null, AuthorizationStatus? authStatus = null)
        {
            tags ??= new Dictionary<string, string>();

            return new WorkflowData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                generationLanguage,
                languageVersion,
                builderVersion,
                port,
                appName,
                dockerfileOutputDirectory,
                manifestOutputDirectory,
                dockerfileGenerationMode,
                manifestGenerationMode,
                manifestType,
                imageName,
                namespacePropertiesArtifactGenerationPropertiesNamespace,
                imageTag,
                repositoryOwner,
                repositoryName,
                branchName,
                dockerfile,
                dockerBuildContext,
                deploymentProperties,
                namespacePropertiesGithubWorkflowProfileNamespace,
                acr,
                oidcCredentials,
                aksResourceId,
                prURL,
                pullNumber,
                prStatus,
                lastWorkflowRun,
                authStatus,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.WorkflowRun"/>. </summary>
        /// <param name="succeeded"> Describes if the workflow run succeeded. </param>
        /// <param name="workflowRunURL"> URL to the run of the workflow. </param>
        /// <param name="lastRunOn"> The timestamp of the last workflow run. </param>
        /// <param name="workflowRunStatus"> Describes the status of the workflow run. </param>
        /// <returns> A new <see cref="Models.WorkflowRun"/> instance for mocking. </returns>
        public static WorkflowRun WorkflowRun(bool? succeeded = null, string workflowRunURL = null, DateTimeOffset? lastRunOn = null, WorkflowRunStatus? workflowRunStatus = null)
        {
            return new WorkflowRun(succeeded, workflowRunURL, lastRunOn, workflowRunStatus, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeleteWorkflowResult"/>. </summary>
        /// <param name="status"> delete status message. </param>
        /// <returns> A new <see cref="Models.DeleteWorkflowResult"/> instance for mocking. </returns>
        public static DeleteWorkflowResult DeleteWorkflowResult(string status = null)
        {
            return new DeleteWorkflowResult(status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeveloperHub.IacProfileData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="stages"></param>
        /// <param name="templates"></param>
        /// <param name="storageAccountSubscription"> Terraform Storage Account Subscription. </param>
        /// <param name="storageAccountResourceGroup"> Terraform Storage Account Resource Group. </param>
        /// <param name="storageAccountName"> Terraform Storage Account Name. </param>
        /// <param name="storageContainerName"> Terraform Container Name. </param>
        /// <param name="repositoryName"> Repository Name. </param>
        /// <param name="repositoryMainBranch"> Repository Main Branch. </param>
        /// <param name="repositoryOwner"> Repository Owner. </param>
        /// <param name="authStatus"> Determines the authorization status of requests. </param>
        /// <param name="pullNumber"> The number associated with the submitted pull request. </param>
        /// <param name="prStatus"> The status of the Pull Request submitted against the users repository. </param>
        /// <param name="branchName"> Repository Branch Name. </param>
        /// <returns> A new <see cref="DeveloperHub.IacProfileData"/> instance for mocking. </returns>
        public static IacProfileData IacProfileData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ETag? etag = null, IEnumerable<StageProperties> stages = null, IEnumerable<IacTemplateProperties> templates = null, string storageAccountSubscription = null, string storageAccountResourceGroup = null, string storageAccountName = null, string storageContainerName = null, string repositoryName = null, string repositoryMainBranch = null, string repositoryOwner = null, AuthorizationStatus? authStatus = null, int? pullNumber = null, PullRequestStatus? prStatus = null, string branchName = null)
        {
            tags ??= new Dictionary<string, string>();
            stages ??= new List<StageProperties>();
            templates ??= new List<IacTemplateProperties>();

            return new IacProfileData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                etag,
                stages?.ToList(),
                templates?.ToList(),
                storageAccountSubscription,
                storageAccountResourceGroup,
                storageAccountName,
                storageContainerName,
                repositoryName,
                repositoryMainBranch,
                repositoryOwner,
                authStatus,
                pullNumber,
                prStatus,
                branchName,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PrLinkResult"/>. </summary>
        /// <param name="prLink"> The link of the pull request. </param>
        /// <returns> A new <see cref="Models.PrLinkResult"/> instance for mocking. </returns>
        public static PrLinkResult PrLinkResult(string prLink = null)
        {
            return new PrLinkResult(prLink, serializedAdditionalRawData: null);
        }
    }
}
