// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.DeveloperHub.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DeveloperHub
{
    public partial class WorkflowData : IUtf8JsonSerializable, IJsonModel<WorkflowData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<WorkflowData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<WorkflowData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkflowData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WorkflowData)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            writer.WritePropertyName("artifactGenerationProperties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(GenerationLanguage))
            {
                writer.WritePropertyName("generationLanguage"u8);
                writer.WriteStringValue(GenerationLanguage.Value.ToString());
            }
            if (Optional.IsDefined(LanguageVersion))
            {
                writer.WritePropertyName("languageVersion"u8);
                writer.WriteStringValue(LanguageVersion);
            }
            if (Optional.IsDefined(BuilderVersion))
            {
                writer.WritePropertyName("builderVersion"u8);
                writer.WriteStringValue(BuilderVersion);
            }
            if (Optional.IsDefined(Port))
            {
                writer.WritePropertyName("port"u8);
                writer.WriteStringValue(Port);
            }
            if (Optional.IsDefined(AppName))
            {
                writer.WritePropertyName("appName"u8);
                writer.WriteStringValue(AppName);
            }
            if (Optional.IsDefined(DockerfileOutputDirectory))
            {
                writer.WritePropertyName("dockerfileOutputDirectory"u8);
                writer.WriteStringValue(DockerfileOutputDirectory);
            }
            if (Optional.IsDefined(ManifestOutputDirectory))
            {
                writer.WritePropertyName("manifestOutputDirectory"u8);
                writer.WriteStringValue(ManifestOutputDirectory);
            }
            if (Optional.IsDefined(DockerfileGenerationMode))
            {
                writer.WritePropertyName("dockerfileGenerationMode"u8);
                writer.WriteStringValue(DockerfileGenerationMode.Value.ToString());
            }
            if (Optional.IsDefined(ManifestGenerationMode))
            {
                writer.WritePropertyName("manifestGenerationMode"u8);
                writer.WriteStringValue(ManifestGenerationMode.Value.ToString());
            }
            if (Optional.IsDefined(ManifestType))
            {
                writer.WritePropertyName("manifestType"u8);
                writer.WriteStringValue(ManifestType.Value.ToString());
            }
            if (Optional.IsDefined(ImageName))
            {
                writer.WritePropertyName("imageName"u8);
                writer.WriteStringValue(ImageName);
            }
            if (Optional.IsDefined(NamespacePropertiesArtifactGenerationPropertiesNamespace))
            {
                writer.WritePropertyName("namespace"u8);
                writer.WriteStringValue(NamespacePropertiesArtifactGenerationPropertiesNamespace);
            }
            if (Optional.IsDefined(ImageTag))
            {
                writer.WritePropertyName("imageTag"u8);
                writer.WriteStringValue(ImageTag);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("githubWorkflowProfile"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(RepositoryOwner))
            {
                writer.WritePropertyName("repositoryOwner"u8);
                writer.WriteStringValue(RepositoryOwner);
            }
            if (Optional.IsDefined(RepositoryName))
            {
                writer.WritePropertyName("repositoryName"u8);
                writer.WriteStringValue(RepositoryName);
            }
            if (Optional.IsDefined(BranchName))
            {
                writer.WritePropertyName("branchName"u8);
                writer.WriteStringValue(BranchName);
            }
            if (Optional.IsDefined(Dockerfile))
            {
                writer.WritePropertyName("dockerfile"u8);
                writer.WriteStringValue(Dockerfile);
            }
            if (Optional.IsDefined(DockerBuildContext))
            {
                writer.WritePropertyName("dockerBuildContext"u8);
                writer.WriteStringValue(DockerBuildContext);
            }
            if (Optional.IsDefined(DeploymentProperties))
            {
                writer.WritePropertyName("deploymentProperties"u8);
                writer.WriteObjectValue(DeploymentProperties, options);
            }
            if (Optional.IsDefined(NamespacePropertiesGithubWorkflowProfileNamespace))
            {
                writer.WritePropertyName("namespace"u8);
                writer.WriteStringValue(NamespacePropertiesGithubWorkflowProfileNamespace);
            }
            if (Optional.IsDefined(Acr))
            {
                writer.WritePropertyName("acr"u8);
                writer.WriteObjectValue(Acr, options);
            }
            if (Optional.IsDefined(OidcCredentials))
            {
                writer.WritePropertyName("oidcCredentials"u8);
                writer.WriteObjectValue(OidcCredentials, options);
            }
            if (Optional.IsDefined(AksResourceId))
            {
                writer.WritePropertyName("aksResourceId"u8);
                writer.WriteStringValue(AksResourceId);
            }
            if (options.Format != "W" && Optional.IsDefined(PrURL))
            {
                writer.WritePropertyName("prURL"u8);
                writer.WriteStringValue(PrURL);
            }
            if (options.Format != "W" && Optional.IsDefined(PullNumber))
            {
                writer.WritePropertyName("pullNumber"u8);
                writer.WriteNumberValue(PullNumber.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PrStatus))
            {
                writer.WritePropertyName("prStatus"u8);
                writer.WriteStringValue(PrStatus.Value.ToString());
            }
            if (Optional.IsDefined(LastWorkflowRun))
            {
                writer.WritePropertyName("lastWorkflowRun"u8);
                writer.WriteObjectValue(LastWorkflowRun, options);
            }
            if (options.Format != "W" && Optional.IsDefined(AuthStatus))
            {
                writer.WritePropertyName("authStatus"u8);
                writer.WriteStringValue(AuthStatus.Value.ToString());
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        WorkflowData IJsonModel<WorkflowData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkflowData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WorkflowData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeWorkflowData(document.RootElement, options);
        }

        internal static WorkflowData DeserializeWorkflowData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            GenerationLanguage? generationLanguage = default;
            string languageVersion = default;
            string builderVersion = default;
            string port = default;
            string appName = default;
            string dockerfileOutputDirectory = default;
            string manifestOutputDirectory = default;
            DockerfileGenerationMode? dockerfileGenerationMode = default;
            ManifestGenerationMode? manifestGenerationMode = default;
            GenerationManifestType? manifestType = default;
            string imageName = default;
            string @namespace = default;
            string imageTag = default;
            string repositoryOwner = default;
            string repositoryName = default;
            string branchName = default;
            string dockerfile = default;
            string dockerBuildContext = default;
            DeploymentProperties deploymentProperties = default;
            string namespace0 = default;
            ACR acr = default;
            GitHubWorkflowProfileOidcCredentials oidcCredentials = default;
            string aksResourceId = default;
            string prURL = default;
            int? pullNumber = default;
            PullRequestStatus? prStatus = default;
            WorkflowRun lastWorkflowRun = default;
            AuthorizationStatus? authStatus = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("artifactGenerationProperties"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("generationLanguage"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    generationLanguage = new GenerationLanguage(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("languageVersion"u8))
                                {
                                    languageVersion = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("builderVersion"u8))
                                {
                                    builderVersion = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("port"u8))
                                {
                                    port = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("appName"u8))
                                {
                                    appName = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("dockerfileOutputDirectory"u8))
                                {
                                    dockerfileOutputDirectory = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("manifestOutputDirectory"u8))
                                {
                                    manifestOutputDirectory = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("dockerfileGenerationMode"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    dockerfileGenerationMode = new DockerfileGenerationMode(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("manifestGenerationMode"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    manifestGenerationMode = new ManifestGenerationMode(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("manifestType"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    manifestType = new GenerationManifestType(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("imageName"u8))
                                {
                                    imageName = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("namespace"u8))
                                {
                                    @namespace = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("imageTag"u8))
                                {
                                    imageTag = property1.Value.GetString();
                                    continue;
                                }
                            }
                            continue;
                        }
                        if (property0.NameEquals("githubWorkflowProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("repositoryOwner"u8))
                                {
                                    repositoryOwner = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("repositoryName"u8))
                                {
                                    repositoryName = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("branchName"u8))
                                {
                                    branchName = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("dockerfile"u8))
                                {
                                    dockerfile = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("dockerBuildContext"u8))
                                {
                                    dockerBuildContext = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("deploymentProperties"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    deploymentProperties = DeploymentProperties.DeserializeDeploymentProperties(property1.Value, options);
                                    continue;
                                }
                                if (property1.NameEquals("namespace"u8))
                                {
                                    namespace0 = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("acr"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    acr = ACR.DeserializeACR(property1.Value, options);
                                    continue;
                                }
                                if (property1.NameEquals("oidcCredentials"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    oidcCredentials = GitHubWorkflowProfileOidcCredentials.DeserializeGitHubWorkflowProfileOidcCredentials(property1.Value, options);
                                    continue;
                                }
                                if (property1.NameEquals("aksResourceId"u8))
                                {
                                    aksResourceId = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("prURL"u8))
                                {
                                    prURL = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("pullNumber"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    pullNumber = property1.Value.GetInt32();
                                    continue;
                                }
                                if (property1.NameEquals("prStatus"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    prStatus = new PullRequestStatus(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("lastWorkflowRun"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    lastWorkflowRun = WorkflowRun.DeserializeWorkflowRun(property1.Value, options);
                                    continue;
                                }
                                if (property1.NameEquals("authStatus"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    authStatus = new AuthorizationStatus(property1.Value.GetString());
                                    continue;
                                }
                            }
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new WorkflowData(
                id,
                name,
                type,
                systemData,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                location,
                generationLanguage,
                languageVersion,
                builderVersion,
                port,
                appName,
                dockerfileOutputDirectory,
                manifestOutputDirectory,
                dockerfileGenerationMode,
                manifestGenerationMode,
                manifestType,
                imageName,
                @namespace,
                imageTag,
                repositoryOwner,
                repositoryName,
                branchName,
                dockerfile,
                dockerBuildContext,
                deploymentProperties,
                namespace0,
                acr,
                oidcCredentials,
                aksResourceId,
                prURL,
                pullNumber,
                prStatus,
                lastWorkflowRun,
                authStatus,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<WorkflowData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkflowData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(WorkflowData)} does not support writing '{options.Format}' format.");
            }
        }

        WorkflowData IPersistableModel<WorkflowData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkflowData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeWorkflowData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(WorkflowData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<WorkflowData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
